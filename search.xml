<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>csapp实验一总结</title>
    <url>/2021/03/15/csapp%E5%AE%9E%E9%AA%8C%E4%B8%80%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>最近在看csapp，也做了一些实验，怕以后又忘记了，就记录一下，也能巩固知识。</p>
<p>实验一主要是关于位运算跟补码和浮点数的表示的。</p>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="整数部分"><a href="#整数部分" class="headerlink" title="整数部分"></a>整数部分</h4><ul>
<li><p><strong>biXor</strong>（用~和&amp;两个位运算去表示异或运算）</p>
<p>因为异或就是两位不同的为1，相同的为0嘛，所以我们可以先找出都是0和都为1的位，找出都为1的位可以直接用<code>x &amp; y</code>，找出都为0的位可以使用<code>~x &amp; ~y</code>，最后把这两个结果分别取反再<code>&amp;</code>一次就得到最后的结果。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * bitXor - x^y using only ~ and &amp; </span><br><span class="hljs-comment"> *   Example: bitXor(4, 5) = 1</span><br><span class="hljs-comment"> *   Legal ops: ~ &amp;</span><br><span class="hljs-comment"> *   Max ops: 14</span><br><span class="hljs-comment"> *   Rating: 1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bitXor</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-type">int</span> _x = ~x;<br>  <span class="hljs-type">int</span> _y = ~y;<br>  <span class="hljs-type">int</span> temp = _x &amp; _y;<br>  <span class="hljs-type">int</span> ans = ~temp &amp; (~(x &amp; y));<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>tmin</strong>（返回用补码表示的最小数）<br>我们知道补码的范围为$2^{n-1} … 2^{n-1}-1$，且$2^{n-1}$为最高位为1，其他都为$0$，所以我们只需要把$1$左移$3$1位，就能得到min。</p>
</li>
</ul>
  <span id="more"></span>
<p>  代码</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * tmin - return minimum two&#x27;s complement integer </span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 4</span><br><span class="hljs-comment"> *   Rating: 1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">tmin</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br><br>  <span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> ans = x &lt;&lt; <span class="hljs-number">31</span>;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
<ul>
<li><p><strong>isTmax</strong>（判断一个数是否为补码表示的最大值）<br>因为补码表示的最大值的二进制形式为$0x7fffffff$，它加$1$恰好为<strong>tmin</strong>，所以我们只需把<strong>tmin</strong>减一，就能得到<strong>max</strong>，然后再用$max-x$再取反，就能得到最后结果。这个题也解释了我当时大一刚学编程的困惑，而且学计组的时候我好像也没有注意到这个细节，我有问题哈哈。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span><br><span class="hljs-comment"> *     and 0 otherwise </span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | +</span><br><span class="hljs-comment"> *   Max ops: 10</span><br><span class="hljs-comment"> *   Rating: 1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isTmax</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> _x = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> ans = _x &lt;&lt; <span class="hljs-number">31</span>;<br>  <span class="hljs-type">int</span> _MAX = ans + (~_x + <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> !(_MAX - x);<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>allOddBits</strong>（所以奇数位的数字都为1）<br>首先先构造奇数位都为1，偶数位都为0的数字，我是用$0xaa$不断左移再加$0xaa$构造的，得到这个数后，用<code>x&amp;</code>这个数，加减去这个数，如果不为0，就说明奇数位不是全为0.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span><br><span class="hljs-comment"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span><br><span class="hljs-comment"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 12</span><br><span class="hljs-comment"> *   Rating: 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">allOddBits</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> per = <span class="hljs-number">0xaa</span>, ans = <span class="hljs-number">0xaa</span>;<br>  ans &lt;&lt;= <span class="hljs-number">8</span>;<br>  ans += per;<br>  ans &lt;&lt;= <span class="hljs-number">8</span>;<br>  ans += per;<br>  ans &lt;&lt;= <span class="hljs-number">8</span>;<br>  ans += per;<br>  <span class="hljs-keyword">return</span> !((ans &amp; x) - ans);<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>negate</strong>（返回一个数的相反数）<br>这个算是里面最简单的把，取反加1就能得到了。另外csapp里提到的，补码实际上是阿贝尔群，每个元素的逆元都是取反加1。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * negate - return -x </span><br><span class="hljs-comment"> *   Example: negate(1) = -1.</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 5</span><br><span class="hljs-comment"> *   Rating: 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">negate</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ans = ~x + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>isAsciiDigit</strong>（判断一个x是否满足$0x30 \leq x \leq 0x39$）<br>我的思路是先表示$0x30$和$0x39$，判断$x-0x30$的符号位为$0$且$0x39-x$的符号为$0$，如果满足就为真，否则为假。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//3</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#x27;0&#x27; to &#x27;9&#x27;)</span><br><span class="hljs-comment"> *   Example: isAsciiDigit(0x35) = 1.</span><br><span class="hljs-comment"> *            isAsciiDigit(0x3a) = 0.</span><br><span class="hljs-comment"> *            isAsciiDigit(0x05) = 0.</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 15</span><br><span class="hljs-comment"> *   Rating: 3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isAsciiDigit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> _min = <span class="hljs-number">0x30</span>;<br>  <span class="hljs-type">int</span> _max = <span class="hljs-number">0x39</span>;<br>  <span class="hljs-type">int</span> _x = ~_min + <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> ans1 = !((_x + x) &gt;&gt; <span class="hljs-number">31</span>);<br>  <span class="hljs-type">int</span> __x = ~x + <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> ans2 = !((__x + _max) &gt;&gt; <span class="hljs-number">31</span>);<br>  <span class="hljs-type">int</span> ans = ans1 &amp; ans2;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>conditional</strong>（实现三目运算符$ x\space? \space y:z$）<br>如果$x$非$0$就把$x$转换成$0xffffffff$，转换的方法可以借助对$x$取两次非，再取它的相反数；$x=0$时，也采用上述方法，$x$结果还是$0$，然后利用$~ 0xffffffff = 0x00000000$，就可以实现了。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * conditional - same as x ? y : z </span><br><span class="hljs-comment"> *   Example: conditional(2,4,5) = 4</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 16</span><br><span class="hljs-comment"> *   Rating: 3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">conditional</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span> </span>&#123;<br>  x = !!x;<br>  x = ~x + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> (x &amp; y) | (~x &amp; z);<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>isLessOrEqual</strong>（判断$x\leq y$是否成立）<br>如果$x$和$y$的符号不同，则判断$y-x$的符号位，如果$x$和$y$的符号位不同，则谁的符号位为$0$则，谁更大。利用<code>x_sign ^ y_sign</code>判断符号为是否相同，另外如果有多种情况的，一般都要用$|$运算符。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span><br><span class="hljs-comment"> *   Example: isLessOrEqual(4,5) = 1.</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 24</span><br><span class="hljs-comment"> *   Rating: 3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isLessOrEqual</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-type">int</span> _x = ~x + <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> ans = _x + y;<br>  <span class="hljs-type">int</span> sign = (ans &gt;&gt; <span class="hljs-number">31</span>) &amp; <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> x_sign = (x &gt;&gt; <span class="hljs-number">31</span>) &amp; <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> y_sign = (y &gt;&gt; <span class="hljs-number">31</span>) &amp; <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> ((x_sign ^ y_sign) &amp; ((!y_sign) &amp; x_sign)) | (!(x_sign ^ y_sign) &amp; (!sign));<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>logicalNeg</strong>（实现$! \space x$）<br>利用$0$的逆元仍为$0$，所以$0$与它的逆元的符号位都是0，而其他的数和它的逆元的符号位至少有一个是$1$。然后把符号位右移$31$位，如果符号位为$1$则为$0xffffffff$，符号位为$0$则为$0x00000000$，然后加$1$就是最终结果。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//4</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * logicalNeg - implement the ! operator, using all of </span><br><span class="hljs-comment"> *              the legal operators except !</span><br><span class="hljs-comment"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span><br><span class="hljs-comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 12</span><br><span class="hljs-comment"> *   Rating: 4 </span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">logicalNeg</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> ((x | (~x + <span class="hljs-number">1</span>)) &gt;&gt; <span class="hljs-number">31</span>) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>howManyBits</strong>（一个数的补码最少需要几个bits去表示）<br>这个题我不会，主要是搞不懂为什么表示$-1$为什么只需要$1$位，这里有个代码来自，<a href="https://zhuanlan.zhihu.com/p/59534845">知乎用户</a>，可以参考下，如果有哪位朋友知道$-1$为什么只需一位可以联系我。</p>
<p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* howManyBits - return the minimum number of bits required to represent x in</span><br><span class="hljs-comment"> *             two&#x27;s compblement</span><br><span class="hljs-comment"> *  Examples: howManyBits(12) = 5</span><br><span class="hljs-comment"> *            howManyBits(298) = 10</span><br><span class="hljs-comment"> *            howManyBits(-5) = 4</span><br><span class="hljs-comment"> *            howManyBits(0)  = 1</span><br><span class="hljs-comment"> *            howManyBits(-1) = 1</span><br><span class="hljs-comment"> *            howManyBits(0x80000000) = 32</span><br><span class="hljs-comment"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *  Max ops: 90</span><br><span class="hljs-comment"> *  Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">howManyBits</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> b16,b8,b4,b2,b1,b0;<br>  <span class="hljs-type">int</span> sign=x&gt;&gt;<span class="hljs-number">31</span>;<br>  x = (sign&amp;~x)|(~sign&amp;x);<span class="hljs-comment">//如果x为正则不变，否则按位取反（这样好找最高位为1的，原来是最高位为0的，这样也将符号位去掉了）</span><br><br><br><span class="hljs-comment">// 不断缩小范围</span><br>  b16 = !!(x&gt;&gt;<span class="hljs-number">16</span>)&lt;&lt;<span class="hljs-number">4</span>;<span class="hljs-comment">//高十六位是否有1</span><br>  x = x&gt;&gt;b16;<span class="hljs-comment">//如果有（至少需要16位），则将原数右移16位</span><br>  b8 = !!(x&gt;&gt;<span class="hljs-number">8</span>)&lt;&lt;<span class="hljs-number">3</span>;<span class="hljs-comment">//剩余位高8位是否有1</span><br>  x = x&gt;&gt;b8;<span class="hljs-comment">//如果有（至少需要16+8=24位），则右移8位</span><br>  b4 = !!(x&gt;&gt;<span class="hljs-number">4</span>)&lt;&lt;<span class="hljs-number">2</span>;<span class="hljs-comment">//同理</span><br>  x = x&gt;&gt;b4;<br>  b2 = !!(x&gt;&gt;<span class="hljs-number">2</span>)&lt;&lt;<span class="hljs-number">1</span>;<br>  x = x&gt;&gt;b2;<br>  b1 = !!(x&gt;&gt;<span class="hljs-number">1</span>);<br>  x = x&gt;&gt;b1;<br>  b0 = x;<br>  <span class="hljs-keyword">return</span> b16+b8+b4+b2+b1+b0+<span class="hljs-number">1</span>;<span class="hljs-comment">//+1表示加上符号位</span><br>&#125;<br></code></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="浮点数部分"><a href="#浮点数部分" class="headerlink" title="浮点数部分"></a>浮点数部分</h4><p>在说题目之前我想先来写一些浮点数表示的方法，以及一些注意事项。<br>现在计算机基本上都采用了IEEE754标准来表示浮点数，改标准把浮点数的表示为$V = (-1)^s <em> M </em> 2^E$这种形式，其中$s$称为符号位，$M$称为尾数，$E$称为阶码，对于单精度浮点数，它们在各自所在的位置以及位数为<br><img src="https://i.loli.net/2021/03/14/gkbXuMNx91pilHD.png" alt="image-20210314220405589"></p>
<p>这里我们也就只讨论单精度。<br>浮点数的表示分为4种情况，<img src="https://i.loli.net/2021/03/14/5pWPtB4Zcx8Akwv.png" alt="image-20210314220858815"></p>
<p>如果$exp \neq 0\space \&amp; \space exp \neq 255$ , 称为规格化，$E = exp - 127$，$M = 1.f$。<br>如果$exp==0$，这情况称为为规格化(Denormalized)，$E = -127(bias)，M = 0.f$，这里的处理与规格化处理是不同的，这种处理也是为了从非规格化处理到规格化处理转变的更加平滑，这里举个$exp$位数为$3$，$fraction$位数为$2$的转变例子。<br><img src="https://i.loli.net/2021/03/14/b7z41W39MvYle5t.png" alt="image-20210314233514394"></p>
<p>可以看到从最大的非规格化数$(\frac{7}{8})$过渡到最小的规格化数$\frac{8}{8}$是非常平滑的，这个特点在<strong>floatScale</strong>会利用到的。</p>
<ul>
<li><p><strong>floatScale</strong>（求$2*uf$）</p>
<p>先说一下简单的思路，因为$uf= (-1)^s<em> M </em>2^E$，所以要得到$2<em>uf$，最直白的做法是直接让$E = E + 1$，因为要使$M = 2</em>M$，不是那么简单的。<br>先提取出$exp$，如果$exp == 255$则会使为$NaN$，按照题目要求返回$uf$，<br>否则，再提取出$f$的符号位$sign$，如果$exp == 0$，表示这个数是未规格化的，$E = 1-bias$，$M = 0.f$，这个情况就是让$M = 2<em>M$，如果$M$有进位，$exp == 1$，$E = 1-bias$，$M = 1.f’$，此时$exp == exp$，且易证$2</em>0,f  = 1.f’$，所以实现了功能。<br>如果$exp$不是上面那两种情况，则我们可以用最简单的思路去解决，$exp = exp + 1$，如果$exp == 255$，所以溢出了，变成$infinity$，返回$infinity$，注意符号。如果不等于$255$则直接先把$uf$的$exp$置为$0$，然后再把新的$exp \space |$进去。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//float</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span><br><span class="hljs-comment"> *   floating point argument f.</span><br><span class="hljs-comment"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span><br><span class="hljs-comment"> *   they are to be interpreted as the bit-level representation of</span><br><span class="hljs-comment"> *   single-precision floating point values.</span><br><span class="hljs-comment"> *   When argument is NaN, return argument</span><br><span class="hljs-comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span><br><span class="hljs-comment"> *   Max ops: 30</span><br><span class="hljs-comment"> *   Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-title">floatScale2</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> uf)</span> </span>&#123;<br>  <span class="hljs-type">int</span> exp = (uf &amp; <span class="hljs-number">0x7f800000</span>) &gt;&gt; <span class="hljs-number">23</span>;<br>  <span class="hljs-type">int</span> sign = uf &amp; (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">31</span>);<br>  <span class="hljs-keyword">if</span>(exp == <span class="hljs-number">255</span>)  <span class="hljs-keyword">return</span> uf;<br>  <span class="hljs-keyword">if</span>(exp == <span class="hljs-number">0</span>)  <span class="hljs-keyword">return</span> (uf&lt;&lt;<span class="hljs-number">1</span>) | sign;<br>  exp++;<br>  <span class="hljs-keyword">if</span>(exp == <span class="hljs-number">255</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">0x7f800000</span> | sign;<br>  <span class="hljs-keyword">else</span>  <span class="hljs-built_in">return</span> (uf &amp; <span class="hljs-number">0x807fffff</span>) | (exp &lt;&lt; <span class="hljs-number">23</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>floatFloat2Int</strong>（实现把<code>float</code>转换成<code>int</code>)</p>
<p>首先要先提取出<code>float</code>的<code>exp</code>和<code>frac</code>的值，注意这里的<code>frac</code>要在前面添上$1$，因为对于<code>int_32</code>，其表示范围为$-2^{32} … 2^{32} -1$，所以如果$exp - 127 &gt;31$，则说明会发生溢出，根据题目要求返回$infinity$，如果$exp - 127&lt;0 \space | \ exp_frac ==0$返回$0$。<br>否则对根据$exp$对$frac$进行左移或者右移，再判断$frac$的符号是否与原来的<code>float</code>相同，相同返回$frac$，如果发生了正溢出（原来为正的，变成负的了）则返回$infinity$，如果发生负溢出，则返回相反数，两种溢出的处理方式不同，主要是因为，发生正溢出，说明<code>int</code>有一位被当成符号位了，也就是说这个<code>int</code>的真值部分就需要$32$位，所以超过了表示的范围。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * floatFloat2Int - Return bit-level equivalent of expression (int) f</span><br><span class="hljs-comment"> *   for floating point argument f.</span><br><span class="hljs-comment"> *   Argument is passed as unsigned int, but</span><br><span class="hljs-comment"> *   it is to be interpreted as the bit-level representation of a</span><br><span class="hljs-comment"> *   single-precision floating point value.</span><br><span class="hljs-comment"> *   Anything out of range (including NaN and infinity) should return</span><br><span class="hljs-comment"> *   0x80000000u.</span><br><span class="hljs-comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span><br><span class="hljs-comment"> *   Max ops: 30</span><br><span class="hljs-comment"> *   Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">floatFloat2Int</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> uf)</span> </span>&#123;<br>  <span class="hljs-type">int</span> exp = ((uf &amp; <span class="hljs-number">0x7f800000</span>) &gt;&gt; <span class="hljs-number">23</span> )- <span class="hljs-number">127</span>;<br>  <span class="hljs-type">int</span> frac = (uf &amp; <span class="hljs-number">0x007fffff</span>) | <span class="hljs-number">0x00800000</span>;<br><br>  <span class="hljs-keyword">if</span> (!(uf &amp; <span class="hljs-number">0x7fffffff</span>))  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (exp &gt; <span class="hljs-number">31</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">0x80000000</span>;<br>  <span class="hljs-keyword">if</span>(exp &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span>(exp &lt; <span class="hljs-number">23</span>)<br>    frac = frac &gt;&gt; (<span class="hljs-number">23</span> - exp);<br>  <span class="hljs-keyword">else</span>  frac = frac &lt;&lt; (exp - <span class="hljs-number">23</span>);<br><br>  <span class="hljs-type">int</span> sign = uf &gt;&gt; <span class="hljs-number">31</span>;<br>  <span class="hljs-keyword">if</span>(!((frac&gt;&gt;<span class="hljs-number">31</span>) ^ sign))  <span class="hljs-keyword">return</span> frac;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(frac&gt;&gt;<span class="hljs-number">31</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">0x80000000</span>;<br>  <span class="hljs-keyword">else</span>  <span class="hljs-keyword">return</span> ~frac + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>floatPower2</strong>（返回$2.0^x$）<br>因为$V=(-1)^{sign}<em>M</em>2^E$，要得到$2.0^x$我们只需要改变$E$的值，也就是改变$exp$的值，而$M=0$，如果$exp\geq255$，返回$+infinity(0x7f800000)$，如果$exp\leq0$返回$0$，否则返回$exp&lt;&lt;23$。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</span><br><span class="hljs-comment"> *   (2.0 raised to the power x) for any 32-bit integer x.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   The unsigned value that is returned should have the identical bit</span><br><span class="hljs-comment"> *   representation as the single-precision floating-point number 2.0^x.</span><br><span class="hljs-comment"> *   If the result is too small to be represented as a denorm, return</span><br><span class="hljs-comment"> *   0. If too large, return +INF.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while </span><br><span class="hljs-comment"> *   Max ops: 30 </span><br><span class="hljs-comment"> *   Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-title">floatPower2</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> exp = x + <span class="hljs-number">127</span>;<br>  <span class="hljs-type">int</span> INF = <span class="hljs-number">0xff</span>&lt;&lt;<span class="hljs-number">23</span>;<br>  <span class="hljs-keyword">if</span>(exp &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span>(exp &gt;= <span class="hljs-number">255</span>)  <span class="hljs-keyword">return</span> INF;   <br>  <span class="hljs-keyword">return</span> exp &lt;&lt; <span class="hljs-number">23</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>java解耦合的学习记录</title>
    <url>/2021/05/29/java%E8%A7%A3%E8%80%A6%E5%90%88%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>程序的耦合主要有类之间的依赖和程序间的依赖，以jdbc的使用做为一个例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.注册驱动</span><br>DriverManager.registerDriver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.mysql.cj.jdbc.Driver());<br><span class="hljs-comment">//2.获取连接</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/eesy?		                 serverTimezone=GMT&amp;useSSL=false&quot;</span>,<br>                <span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br><span class="hljs-comment">//3.获取操作数据库的预处理对象</span><br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(<span class="hljs-string">&quot;select * from account&quot;</span>);<br><span class="hljs-comment">//4.执行SQL,得到结果集</span><br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> preparedStatement.executeQuery();<br><span class="hljs-comment">//5.遍历结果集</span><br><span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>    System.out.println(resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>));<br>&#125;<br><span class="hljs-comment">//6.释放资源</span><br>resultSet.close();<br>preparedStatement.close();<br>connection.close();<br></code></pre></td></tr></table></figure>
<p>这里<code>Driver()</code>使用的是mysql，这段代码高度高度依赖于<code>com.mysql.cj.jdbc.Driver</code>，如果将来<code>com.mysql.cj.jdbc.Driver</code>出现了问题，那么这段代码就发生错误，或者当我们需要更改需求时，比如如果程序间的耦合度太高，要改的代码也就更多。</p>
<p>解耦的目的是降低程序间的依赖关系，主要是程序尽量模块化，使程序尽量做到编译期不依赖，运行时才依赖。</p>
<p>解耦的一种思路：第一步，使用反射来创建对象，而不是new；第二步，通过读取配置文件来获取要创建的对象全限定类名，也就是采用工厂设计模式。举一个service层和dao层的例子，采用工厂模式前</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xinyu.dao;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 账户的持久层接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IAccountDao</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAccount</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.xinyu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.xinyu.dao.IAccountDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAccountDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAccount</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;保存了账户&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.xinyu.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IAccountService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAccount</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.xinyu.service.impl;<br><br><span class="hljs-keyword">import</span> com.xinyu.dao.IAccountDao;<br><span class="hljs-keyword">import</span> com.xinyu.dao.impl.AccountDaoImpl;<br><span class="hljs-keyword">import</span> com.xinyu.factory.BeanFactory;<br><span class="hljs-keyword">import</span> com.xinyu.service.IAccountService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 账户业务层实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAccountService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">IAccountDao</span> <span class="hljs-variable">accountDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountDaoImpl</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAccount</span><span class="hljs-params">()</span> &#123;<br>        accountDao.saveAccount();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>可以看到我们在AccoutServiceImpl直接new了一个AccoutDaoImpl对象，也就是说AccountServiceImpl会高度依赖于AccoutDaoImpl，它们之间耦合度很高。所以我们编写一个工厂类<code>BeanFactory</code>在类里利用反射创建对象，并创建一个配置文件，在里面配置对象名与全限定类名的映射关系。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xinyu.factory;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanFactory</span> &#123;<br>    <span class="hljs-comment">//定义一个Properties对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Properties properties;<br>    <span class="hljs-comment">//使用静态代码块为Properties对象赋值</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//实例化对象</span><br>            properties = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            <span class="hljs-comment">//获取properties文件的流对象</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> BeanFactory.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;bean.properties&quot;</span>);<br>            properties.load(in);<br>         &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionInInitializerError</span>(<span class="hljs-string">&quot;初始化properties失败&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据bean的名称获取bean对象，这种方式获取的bean是多例的，既同一个类型的多个bean是不同的</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beanName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String beanName)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">beanPath</span> <span class="hljs-operator">=</span> properties.getProperty(beanName);<br>            <span class="hljs-comment">//使用了反射</span><br>            bean = Class.forName(beanPath).getDeclaredConstructor().newInstance();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>bean.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">accountDao</span> = <span class="hljs-string">com.xinyu.dao.impl.AccountDaoImpl</span><br></code></pre></td></tr></table></figure>
<p>然后我们就可以把<code>AccountServiceImpl</code>的代码改为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xinyu.service.impl;<br><br><span class="hljs-keyword">import</span> com.xinyu.dao.IAccountDao;<br><span class="hljs-keyword">import</span> com.xinyu.dao.impl.AccountDaoImpl;<br><span class="hljs-keyword">import</span> com.xinyu.factory.BeanFactory;<br><span class="hljs-keyword">import</span> com.xinyu.service.IAccountService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 账户业务层实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAccountService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">IAccountDao</span> <span class="hljs-variable">accountDao</span> <span class="hljs-operator">=</span> (IAccountDao) BeanFactory.getBean(<span class="hljs-string">&quot;accountDao&quot;</span>);<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAccount</span><span class="hljs-params">()</span> &#123;<br>        accountDao.saveAccount();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>但是以这种方式创建工厂也会带来一点问题，因为我们在<code>getBean</code>方法中采用了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">bean = Class.forName(beanPath).getDeclaredConstructor().newInstance();<br></code></pre></td></tr></table></figure>
<p>去创建bean，所以假设我们在<code>AccountServiceImpl</code>里需要多个<code>IAccountDao</code>，那么这多个<code>IAccountDao</code>也是不同的（多例模式），如果我们想要提高利用率，也就是用单例模式，这时就需要容器这个概念了。我们可以在<code>BeanFactory</code>中定义一个Map，用来存储bean, 并在static执行时，就通过读取.properties里的所有映射关系，将bean初始化后存入Map中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xinyu.factory;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanFactory</span> &#123;<br>    <span class="hljs-comment">//定义一个Properties对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Properties properties;<br>    <span class="hljs-comment">//bean容器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; beans;<br>    <span class="hljs-comment">//使用静态代码块为Properties对象赋值</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//实例化对象</span><br>            properties = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            <span class="hljs-comment">//获取properties文件的流对象</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> BeanFactory.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;bean.properties&quot;</span>);<br>            properties.load(in);<br><br>            <span class="hljs-comment">//在static中一开始就对所有的bean初始化，并存放在map中，然后获取bean时就直接返回这里初始化的对象就好</span><br>            <span class="hljs-comment">//这种方式是单例模式，既同个类型的多个对象是同一个</span><br>            beans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            Enumeration&lt;Object&gt; keys = properties.keys();<br>            <span class="hljs-keyword">while</span> (keys.hasMoreElements()) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keys.nextElement().toString();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">beanPath</span> <span class="hljs-operator">=</span> properties.getProperty(key);<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Class.forName(beanPath).getConstructor().newInstance();<br>                beans.put(key, value);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionInInitializerError</span>(<span class="hljs-string">&quot;初始化properties失败&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据bean的名称获取bean对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beanName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String beanName)</span> &#123;<br>        <span class="hljs-keyword">return</span> beans.get(beanName);<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure>
<p>通过这种方式就能使创建的bean是单例的了。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>最近的一些事情与想法</title>
    <url>/2020/10/17/some-puzzles-in-these-day/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7735b879e25e91fa00e0d0bb92df24d495e9a22ec5a770a63eb92e78c000f93c">dc539cac4ab894d5e83acb08e14db5a37910aac42c87a9297688307e645ec0e274a1b13d452ed1c0aaff93a9c74375ec43518e548ec4917cf8d1d53f02418d9e82afd5d81d55eeb85260fd8eb0a4d9c8af608ec3c690c59a2e357bf2eb84afc2afd7f7bcee0c9faedacba14f62ae6633573c46981a964260763ca38544a3c69e5cfd1f8fa62aa84c846d2837dbcfdf8a73d9c0f1fc1b4e0c9d6cea1deb28c3617fee88fe3b50aecb4bd349ff7b4f5d4a533959d972981fecec0391e0487599faf8361ee1c535b8d2076dc3562a2c7cf5525e38e8227a44d3859a26e5663abb9d833bc2881f84a8665a39a79b127efb0939d76d3c85175728d19c5d78638a6ca58dc4285fee2a40c4198360e9611987315065c5ab9805c97251ce6bf468da8d37244cd8eb313f60e5c28cb441080f4cdb02b99f15bf8231335b557e36e38c9535e48011bcf187a29b811af1ff18c17acfc7c25dd492dc8dfb3f6b9762508c4ecd52ab4a2dc1090c1849a9cb347bb947fdea7b35f887f3f7299d06170caf7d29787bfd283839db158869c6184bb67b4c6e75fad7a611354487039c222dba5515e73127354c7ac54072b80d1d6b001ff584fa9ac6f36d003ce7474f7179579687cd3916cbb670c5c30c47d40007aa2f4ca7adcf410fd09c287cef8cc092144da83d70ccd40860291c39f2658751d4666e53de2f6faa1b855dca14c13086662ed22a774856da6792fb56214704089a582bceb000cec867453aee98bcb6f55d4ce6b5d179c75acf7fb9077c4777d6d3dd79a979df9c3aeaa4416abe5a7443efef36eed9b1b0dfbcf99fccb1e4102c77b1459c3b30eefc1c56521ba73ba48d2e46120da95d809282ffefa63cd9b493e7c90178b9039a9a4391b66429eda1b95eedb45baee30be0789d57cecf8fd6fd618e1d32a4dbe9c4872b0d6f6514db41cc5b72bdcbdf4394eee0f9bc132af46e384f64300b23cfcc1390a95bd2569621c2a4f54a11a8981ed7e73ae01c7e9be6f25450afb41607dd39bd2e3d5f033ee2b9cb86a0ef8b506bf17c6573417b8c76fa577b8d24d1cb7198f4e5542ddd5c12be733293406e33a31939c63e2447dc2978980050d20d09a982787e90fd9aa1e45459b894b84c622ce9fd8fe7e7d08bcd22f4cff85222ba4e6f38a08c80c212b8b01af83b912a27d6d1014d4cc9f14d1afcd76722d38815e37d5a1f22a781a466e307b03a9cd03f135e5224be8e8920767e1a6ebdb3d85c2ed025b022c29f7ca301ff2a0a10edf5b3aee5f1eaf60131d23f8d37e9e7b9bbcba1863b424a662ec73b910444d5fec961c2af5b222d3ac485cb9010668ba5a9be47a6951c97b8e107570460314f16ee4c51cdd72f35f557189d1b5b2d7419a47071c4e5f8cc21a67a5682c242caa7a845030fa54c515800ab67819acafe83f197678eea6a54c06ac555905cd07955e11cad5bb0d4d0cff593940c2783504f8ce19f91ec830496b3ec935803612f1743f3e57e40efb8a5fb6f918fc0835ed73e52b88c5a2d1ebfab0830ac46099b3d2053448d97cd778036cd9f78e7a7ece96af301e5385650c3a4b08993ba51b6e681993971682ed504393335bc8625c47340589c765a47aeb1fa5635f02ba3f8c059ac29e801529ab966e384be6bc77f953e699fab01b68bacc57eecb12805510fe0e1198475b8c20dcac8752e68a41a26be891eb2465b15aa06eb4670a125cb6e571cadcef3cea8f035d8dd07134ae76fb70ee09cb948b0613a23626cf481d8e53cf801ee51e27916e6aa158327d01fd0fdb9107d5a480bb6fa520184bc39170049cbe84a7fa7db16b5cd1f692ccca05ce6547e556aad37ae06ec45fd85a4e3d0465fe84f03cfc9da04fed3777031fdb303b3e6eeca1ec7ccdf3e2803cf42825b45b59053e6a730cbd748672f6832306e88088de6dabfc82c8d351fe203b4e060031e93448a3ef5aa10b80ebde1335cbf46463a530603afc474737964cddc69f01c93d4e8a35e6daeb2f3132ac2968ac0c8e315661fb864875215fcdc65966430f4ed7a184be97d6900d477b808d9127a8e68c30e6814a209da78b3180f84517a72b8e5a4b6929dbd2f92018f7c4e46407a0b35084920c1f962514abaf8ec49b3dbc8055a7380b8eca7721aff1d745e060e2e11ecde97da02838067ce046e51d471e0f59c781528e78346ad2824f8d2db27d97b47b9762246af7ff4978b650db89023ae7a00c54d5a5c96590bee272e9464e9dcbb5782414955ed130aa8269b9a2b73fabf81aa6dd7a26fa5280cc09a4082b4ad7564ffee87558c8a9007dc4dbd55ddc173975c20ec7ea81f9db7b76e862ac9e0e6d2feee9e7163a94e7ece8c23868e9f72ad1080b427b7e5698b9c912c63c0b527d1fda20bda21c104e35a9fbe7d71f36e03f34ff58b00039b48d68cb10c55dc40459c70bf83e63bd1e29a2d23bcbb4dcdb75943aea73a4588c3922f41c6705ea9c0521cc356ecc8ac0204</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>杂想</category>
      </categories>
  </entry>
  <entry>
    <title>一些想法</title>
    <url>/2020/08/16/%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0134af86ff2626fa2c8c7851022654ef3765261824fa0410bf45a8b7568cb5dc">dc539cac4ab894d5e83acb08e14db5a30e8a3c95e06d6034ba80ad782b33a51886cad32a6f8a1dfa1e4a6bc34c9d4018abd7e32e330cd7be6be92fa8b78f82393b5a7b007dc491206f3a6ca368ac1cffa1ca1ab665448488bd8436916c59f9bb79eba4fc3332a4cd09e6fac0bcbe97af4a67dcd1492b4030970c9901dbe525881726cdc7e317f4ad5a5fbdfd49d0667be07f6962d306e5711713b5410a45d3fb23c2eedeefbfd95ba85a2966dc71b40be4ce1c332da796f4157b7827ec0da797bfdd1ff73514fd933e35cd8fc027af85d52a79553f56b392e392c44506ad997b27c1c1a706cc8a1d6de376dbad56801a6a2a74c20c58d3fdd5078cf1b102d0ab1dfed6845747c47eecec1ddb00a56a591978bd6f9979934c8cfc899ffe8064e768b3c2c687d99bf87b7c3e2abbd30b4bf43a0361eddb84c0c8dccfbc0cae53e83d2ec843adcde77f902ba6386a84da38b93f7c628b412ef2e24e206eb6cc2c42c8dc5640f7bc167a6d70b2f8a9dd3a1b251f3524a00994f0327947637ff61e861d596574804475a380798133162fce58d06a8041db7418ca551db20d87de994eb1ca9a8be8d9a8a4b8665a3c7a483bb058c6103aa6253ed8df6b7b835404a1b83e767934ca35c18b475f7fd318b7b9b971f8ba041662c67f3ebf6cb7344f4976275c3b1e8d27ae8781647e54a32ed1e69001efdf3334d2c1f6b452bfae3c5e2f124f8eb90f39f8e78b585c1130c68a63190799ef0ec2853caaa5cba60672e88f344b3799a983718d569fb883728d2ee961f0a9e20764ddddf17b38a10174b64044e827275aa30b9279876c696f1724dd3a230e8f9e56ec3107414e03809145533d7b21b54b33ed6b86343c1fbaf17dbc233e41c1003dc3cd454a5f4122b547bfd8d1289487f1f8146d946de356774c7e1cde185d19a56ec5be526e1f18f7c0022ee1588357124943ecc8102eefd3449f61f6a8360ee8968945bbc5810602c83358e197aa4355a3735b254a8c02fa8a9074367e24d165584a9ff9a118eaa5ce20c48ff875519265a101fc357421608f91316bb509b954298aa6016b45d4913ba9d4076ed550ce367421efc0b3d8611af53e010283b06331eacd3b218d966147a24d891cc08219f546a5c3fcfa1b0598b6bb13a85d9776ecee618d43165eca1fa3a3ea2fd22ac07ab09856ce23139afc8fc19aec1a7f3b188323261cef6e7a972adb4c5fbcaa6248c0855f07acb6f292a415b7bc7bcda4466343c23795afe8a179cc22f13cd606ed5485154661ced1c8fec3a668e66703638fbd6fee2dd2c7bb4ebfb9b883576d6859f7a804ea09bef00eb3332721cc2acb3b6bb06be8d5421db9ea98b833207a572932891367a51688c27967dec3a76dabd22df3f1d3d9652f998de9c817c602f5877005c8f43f706f2353f60beffbb2458bc7762378ac1b595eea34c15ce7e37c6de4e38a3237879742ea524d90da7713cc274e0bfc40ae200abec1388735a137763c0ee217626742df368ae9667733915e74431efe986f0b09d250ab06b08f910b962b094ccdc281f0dd26fb93b8d46f03d4d99fffadca53956fd95a3589d80b2c7c15990087ac7e63907cfb22ceb7ed858278a6a6035070fe28ab1cd66806fc69edb55fc99b5715b702deeb33402fe6beb8342d26cf644317764094461c49ab289fcdeb7baf57942df8f7cbb2fac18d04877557f679fb94bf75bd25515f9f8037b6b24d1a0315cc05695204e1786f5bd99d478a6d10bf26d12de18f19c1f4aa432cd69befbf412cc0d4e86d42c35d41e26dd14e85a947f96e51a50a7f7e1af358963e6cb6df85aa32e2bb810d508f0d6728b40422e88ef6cf6732e25fd68b24bea2e12b498a54a671da4b528dd07505b729e92c730f629356f1238cd7e4c83fa12d6114848b9df8a7a78fb043014224e5f1f0277a525219b1b764385c037c44b142cab802eb557085f40bee600096fea097e6b97886b70313623a4bc2a0425bcbc847e23ad32290f99800f940420ad7ef215eed434af542f8bc7ec6fb8beed4c448e61be911d1e6e2ecc45b3bfbbabee1ba1153ef0f0cea3a12912a3a5a804f505643ca0f09660fc8de37dac4e508660f33dce2033f8de19febb4766d05d4092df3fa374af41bb89396ad38bb9ebfec6269c913d235061fe1d3979d2d09f8ec167c85581c44d657c3e88c44744099aec3c4df5c645b7a4ddf1ee776aedf851b4ec1b2dc6824e010092c4dc598373cb88e668df5f65daf4d8dfabdabc798cacf30b9359afaf1579b9a92b6090de8ab140618bbb42cd4933a0de9f9779bd3d55b01163ff7b3df60c989774e27d2da166f822a3693af255a4cb7c997fac7b56d018929aca59f02a5a3b8d368678f8cd89c2dcb2b439f54dc81c6604cd0b7b10c83ddc3f1f71891cedca345addc7a7d7f3f4fc05912daff4bcf0bdd55c481ea20f5ac45ff9421ff43f82b1631f648cde6ebf3dfcfa219f9e19134654603824ff73c86ddeb2a02c72b74c53dd86668e70f8ddd02b081c5ad765761dab692b6fee266c0f64d27916d61ac7f0927b8fb21720187469ae70fd5d8ea3c57149cf9e4a5601cec0164bdb765feec31e2ad5e130fe0e9f62944239f46a1ee068c453c0569c45e41b50cbc3ec674abbd4ff3480d4b9aeb7572eaef510631fbed94dd0d6dc4deae55245dc14139fe36c26049126bc9fa555faa4401f3e18fe55268ff113f2a971cece037930d13c32b89e7da13ac86e1dbe8871b685b1070446a944b49dace92a64e76ee64be3490422b32d24604f9a41e4996d7e6d4d630d8d45663ad13d1a4a48fc2b000a55dff25e4bad9ce32bbfde3a50664ccbb9808c686587c2bfbfa966ed2280e54ff37ba023d00208cc6e343f9610d8eee460256b2707f5a203d1d8fa86107178e32f99c89e7877f681ea21e7490216c4ef8b7c941143a9ad30dc7c9809ce4ae58a144848e66128fe07673c1722df4a192ce381abf05ed69253a6dcf6c1685c3a937373035c5f6f4503ed898311178fc066558c6bc134e52b1746626c22567b02e4cf59dc860e30b51e5410c74c9a5b0246e21917d5a15249a64232a661cad165527cb69760c0107c760e75abdc8a9587eb38abc60653060b9c897d403397cd802d4d55e96bdd3ceed3d0186056d2854455b3504ccd600008dd86699eb439d567c9d626805c7ad2252e6aca01484615266ec825c378908ce8cbaed3cce855de1549e2ba2a4a0bf13a696e5019f99882337f081b4922dee742b7a7cba6bf85d1749a89faf5e54f4d8479dd9447f64b9c61a101396f98c35d8650b226510f96efbdd48e53cc624f4616daa648daa5a5b00395ec81e2630ae6d4dad515be6ba2961e8182f3f2f88405d07cc30148ed2f21ed78fcd8f1cd9ccb126a7d7712760530e4af709f73b79bc7535117c0b023baeeb3392934d6a79b8bbe43d23b748417f79520de42f3319d8c2a9117e6826e4393be0ca6c28fbe21c5e87b221022a7f5bda4962bc41b7fc76dd657c9b45999d0f85581dec4e115d1b17247c64e6f96e1bd38e28c5a5fc3b685f7f61beb290ac3e8ad6fb559667a4b2701e0be313acc2db91758c997e1161e6b9e39cfeca1b42f80eeb574dd55ee2134c1c3a790b4781ce960af29daaa85f7b71970ae6ad9b9c7c0640b57ae6d129ec548c656a9af7267700309be8e426847117ce52fea86668f7ecc499b91182f1aa5034f6fbbb60c8c94409d952333dfed728779ccfa0b7472f338930de10c36e8665330e0f1d59af17c16a4d5e60e1b5d5e33dbf5da5867f5afbe9f05189c17f6b90539399a9105f5006f9fe4bddfac894f40ae1d7802ede8a6bfe715bfcb5b356bfae8ecc4bb7ba852468d56dd15afd7ee0f3aecbb99676f99475b6d065b5d8efdec94571ca8bb796b97afc517c1fc6497e2399f3678dc13ff7ae4eceba4adafbe2ae6fdfb5fe23650f66eef4255fd37665b2f2f76900bd5f473442202fa5e8d11ce99e481c18e9633d613202916966d259a6f103f83480fd4a2ffb9a5f85e9735ce5edf70758d6074e2e9cb65fa1c3c8eb85c029a8d4cc3d9b356a8a375f3ebb596c6d3858f0d877cad4588692ea31b67283dc5a8011644d49e90e3202a8c5bfec8048c709ce3b887befdc6d72807ee954d587e6e4d485a5d00a7c22bbc1398436640d43ba14e9fd320f951d83fcf63dc2ca678bc4905b0f8e7e8aac530eeb942a371fc052e57b32f928eee99f458fa44a5c0d32f3fe303608e7aa03c2fafbae4ce6149d616926856b8bbaa73e986f2e5326076463479cd2d1c9d3620f02ec307790f2a3d5a9e31c127b24e362d5990b618af55d890e7e92623a74261e75532512f0717571777f9ffb009c31a363a214148eeecc79709ec332908d74aac2948202513f1e9cd71a81078736d142df8aabb605b3f2b36f988c8fb75fdb8a1d393fa28f8b8da83119799afd92163244436fdadc6de466c8eb6837ed58e2273936cb5d3b91c3fe7d7b422f2194e73f9813d0cb3eac7d6f2c478dcd46152d5d5850271615c95f8043589ce5d02f1054933f96c857f8c384333bda9d51365104cf957ed4f63969eb1e0320200c7cadfe46ab358f581dfca24849ff9138b9424e784d746949aa4d70ef38145a45182b802da0e697eef7d26c6a56097be8a2e1d82a66abd2639a7e8177cefa0f8604cf2fda5e2a947d7f1b1bfb9ad7e88dacdff44be45a1424e0c37fa8013dc0f02820f97c01dadfce9aed05609c741eb64b4653276dd0fb9c60756ae7a0dc81cbd2549ffa75dc1ace8340a644005aa9623cafe785d0debb3b59eaff3ef6b9d22a85f41d7915bd6b0da0474cad8ad4a703bd340c67c05691cc18bea4b33e892d796127652ee392531c8dff21d2f2598b3d7e9e0b2da0811ae83b00e3c8d747bab35fe3d1ed6d82b43a6b89b2fb9c483916cd31cfb00eab97a5f6331751d0115a2d12077c61d46a36eda704152c414c7c8996153c3f994fc260f5e842e802a259efb9ec321981feb0cb542dea37446e4bda1bd9903e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>杂想</category>
      </categories>
  </entry>
  <entry>
    <title>大一总结以及未来的规划</title>
    <url>/2020/07/20/%E5%A4%A7%E4%B8%80%E6%80%BB%E7%BB%93%E4%BB%A5%E5%8F%8A%E6%9C%AA%E6%9D%A5%E7%9A%84%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p>时间过的真是很快，特别是在家混了一个学期，大一就这样过去了，也是很久没有写博客了，趁着最近心情不是很好 <del>打游戏总是输</del> ，就写一下大一学了什么吧。</p>
<span id="more"></span>
<h3 id="入学"><a href="#入学" class="headerlink" title="入学"></a>入学</h3><p>暑期时，我有看了<strong>一点</strong>翁恺老师的c语言教程，入学时还算有点基础吧（只是看到for循环好像）。军训结束后<del>想起来军训过的还是很开心的，虽然太阳很大</del>，我们学院的王立斌老师来介绍他组织的图灵班。第一节课去的时候，讲的是输出格式化，这个还算听的懂吧。结果第二节课就直接讲起了指针和二级指针，听得我一头雾水，交作业也要求要用函数<del>那时候我连什么是函数都不知道</del>，后面还是退出了，只要是因为我学得太慢了吧。</p>
<h3 id="大一上的一些课程"><a href="#大一上的一些课程" class="headerlink" title="大一上的一些课程"></a>大一上的一些课程</h3><p>大一上学期最难的应该是线代吧，我直到期末才有点懂得线代的用处，结果现在又忘了，以后再找机会二刷吧。编程方面主要就学了c语言吧，看的是谭浩强的书<del>这书真的不行</del>，而且我要吐槽一下，我们学院教的也太慢了吧，练指针都还没教，没有那种逼着我们跑的感觉，所以我学的也很慢，不过我倒是自己看了一部分的数据结构，那时候对指针理解不够，所以看到二叉树的遍历就看不下了，现在好多也忘了，学了就忘是真的烦😥。上学期算学的很少吧，参加了很多比赛也都没有拿奖，真的挺伤心的，感觉我主要的原因是很难静下心来，学着学着就想跑出去玩，所以上学期坐了几百块的地铁，而且什么都想学，又只学了一点点，就搁置了，因为又有其他的事情需要去做。比如上学期参加了ctf新生赛，算是一个人参加的吧，忙活了几天后，没有拿奖，真的那时候我什么都不懂，然后比赛结束后，我也没有继续学习了，就把本来通过这次比赛学的<strong>一点点</strong>知识也扔掉了，害！我感觉这是一个很致命的问题，学习一个知识后，应该继续深入学习，然后再与现阶段学习的内容贯通，最后能够做点东西出来，才算有用吧。</p>
<h3 id="寒假"><a href="#寒假" class="headerlink" title="寒假"></a>寒假</h3><p>寒假时，刷了很多acm的题，接触了挺多算法的，已经能熟悉的用深搜了，也开始学习动态规划了，但是后面一开学，我又开始搁置了<del>接受不了.jpg</del> 。现在算是又忘的差不多了吧，老毛病了，感觉要每天都做一些才能不忘记，不然真的挺容易不想继续，就慢慢搁了，因为每天都会有各种各样的事，而且我也挺懒的哈。寒假还学了一下小程序，也是学得差不多就搁置了，不过我找到了一个<a href="https://www.bilibili.com/video/BV1sx411z77P?from=search&amp;seid=6116369401220262130">非常好的教程</a>，算把小程序的怎么开发讲得非常好了，结合微信开发文档，如果以后要开发我还是很有信心做好的。</p>
<h3 id="大一下"><a href="#大一下" class="headerlink" title="大一下"></a>大一下</h3><p>这学期算学了很多内容吧，高数下比上难了好多，学了C++面向对象，也做了一个很多行的大作业，C++算学的还可以，只是对C++11还不是很掌握，本来打算暑假继续学习C++的，现在也不知道要往什么方向学习，害。这学期算学得不多吧，还在一个打基础的阶段，等离散跟概率论都学完，我就会加快步伐的。</p>
<h3 id="接下来的安排"><a href="#接下来的安排" class="headerlink" title="接下来的安排"></a>接下来的安排</h3><ul>
<li>准备数学建模</li>
<li>继续学习《算法导论》</li>
<li>c#图像识别入门（申请的项目要求的）</li>
<li>下学期可能会申请当兼助，做点有意义的事</li>
</ul>
<p>下次再来写写最近的感悟，不涉及技术方面的。</p>
]]></content>
      <categories>
        <category>杂想</category>
      </categories>
  </entry>
  <entry>
    <title>魔兽世界3备战</title>
    <url>/2020/05/13/%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<p>这个题目，我花了差不多4天才全部做出来的，一开始也没很好的设计，就是看见有什么功能，就写一个函数的声明，然后写另一个类的时候，发现我要用到前面写的类的函数时，才去定义相应的函数，所以可能会很混乱。我写这篇文章一是为了重新理一下思路，也希望能给后面设计的人一个想法吧。</p>
<span id="more"></span>
<p>首先我大体上设置了5个类吧，不包括相应的子类，分别是factorial（工厂类）、headquarter（司令部类，其实叫做城市类更好）、time（时间类，用来管理时间和大部分的输出的）、warrior（武士类，这道题中最重要的类）、weapon（武器类）。先从最重要的开始吧。</p>
<ul>
<li><p>warrior</p>
<p>武士有生命值(life)、编号（serial 注意这个编号是从1开始算的，每制造一个武士编号就相应的加一，而且并不会因为删除前面的武士而改变）、攻击力（damage，由司令部决定，但具体的规则不同，可以由不同的子类传进去）、位置（location，用来记录武士现在所在的位置，用于打架与移动）、武器的数量数组（WeaponNum，静态数组用来储存不同武器的数量），名字（用来存储子类不同的名字）colorname（隶属司令部的颜色）、武器（这里使用一个vector数组，放武士拥有的武器）。武士有两个重要的方法一个是抢武器，一个是用武器。</p>
</li>
<li><p>weapon</p>
<p>武器有攻击力，武器的编号，剩余的使用次数，还有使用string存储它的名字。武器最终要的是ninja武士使用bomb不会自残，我的做法是使用一个使用武器的方法，并把武士作为形参传进来。</p>
</li>
<li><p>factorial</p>
<p>这个类听从了hhy老师的建议，使用了了静态函数负责制造武士和制造武器，但是我现在的工厂类没有任何数据成员，所以我还是不知道为什么不使用普通的函数，或许可以给工厂多一些功能，比如一个静态成员去记录现在的武士武器编号？？</p>
</li>
<li><p>time</p>
<p>用于对于处理各种事件并输出，主要要总的输出时间和现在的时间，可以包括小时与分钟，也可以只包括小时。这个类的方法大致于题目不同时刻的事件相同，有制造武士，武士逃跑，武士前进，同一个城市的武士抢武器，打架，司令部报告，武士报告。对于武士我的处理方法是先按司令部全部遍历都前进一步，在根据城市的顺序从左到右输出，或许可以全部由城市来负责。</p>
</li>
<li><p>headquarters</p>
<p>司令部是继承普通的city类来着，司令部有总的生命值，制造武士的顺序，各个武士的攻击力和所需要的生命（或许这两个就可以放置在factorial类中作为静态成员），还需要一个vector用来记录司令部的士兵。</p>
</li>
</ul>
<p>类的介绍就差不多是这样了，删除武士删除武器的操作，或许都可以由factorial来实现，把功能给对应的类吧，不过这样好像要写成模板函数了。</p>
<hr>
<p>最后再说一下可能会遇到的一些坑吧。</p>
<p>武士打架时，在奇数城市红方先攻击，偶数城市蓝方先攻击  </p>
<p>武器的攻击力会随使用者的改变而发生改变，<strong>所以在抢夺武器时记得要给一个接口去改变武器的攻击力</strong></p>
<p>Wolf的抢夺武器与打赢后抢夺武器是不一样的，wolf只抢劫一种（编号最小的武器），而打赢之后进行的抢劫，所有的武器都能抢。</p>
<p>关于删除武器，武士的erase，erase最好写一个函数，参数传递要删除的对应指针（容器里面放的是指针嘛），erase的参数都是迭代器，推荐使用for循环找到要删除指针对应的迭代器。</p>
<p> 注意iceman前进一步损失10%的生命值，表示的方式是<script type="math/tex">life-life*10%</script>,而不是<script type="math/tex">life*90%</script></p>
<p>移动的输出顺序是按目的地从西向东的，我的做法是先全部移动，再按city输出相应的信息</p>
<p>如果武士用一个数组去存储武器的数量，另外还有如果wolf抢劫了敌人的武器记得把敌人数组的数量减掉，武士的数组加相应的值。</p>
<p>还有一个非常坑的点，在打架时，假如两个都剩余一件sword的攻击力为0，或者有一个没有武器，都会进行入死循环。但是其他两种武器是有使用次数的就每关系。</p>
<p>耳聋咆哮是活下来就要的，不是赢了才。</p>
<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//最后附上代码，可能有很多功能没有分离好，导致接口写的太多了</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;climits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">factorial</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Time</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">headquarter</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">city</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">warrior</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">weapon</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">factorial</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-comment">//l表示武士的生命，L表示武士的位置，s表示武士的标号，choice确定选择哪一个武士</span><br>	<span class="hljs-comment">//需要的变量哪一个武士,武士的各种信息</span><br>	<span class="hljs-function"><span class="hljs-type">static</span> warrior* <span class="hljs-title">creator_warrior</span><span class="hljs-params">(<span class="hljs-type">int</span> choice, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> life, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> total, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>*, <span class="hljs-type">int</span>)</span></span>;<br>	<span class="hljs-comment">//</span><br>	<span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">creator_weapon</span><span class="hljs-params">(<span class="hljs-type">int</span> attack, <span class="hljs-type">int</span> seria, <span class="hljs-type">int</span> num, std::vector&lt;weapon*&gt;&amp;d, <span class="hljs-type">int</span> *)</span></span>;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">warrior</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">city</span><br>&#123;<br><span class="hljs-keyword">protected</span>:<br>	<span class="hljs-type">int</span> location;<br>	std::vector&lt;warrior*&gt; qwarriors;	<span class="hljs-comment">//用来占领存放武士的容器</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">city</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>) :<span class="hljs-built_in">location</span>(l)<br>	&#123;<br><br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_qwarriors</span><span class="hljs-params">(warrior *)</span></span>;<br>	<span class="hljs-function">std::vector&lt;warrior*&gt; &amp;<span class="hljs-title">show_qwarriors</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> qwarriors;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">city_delete</span><span class="hljs-params">(warrior *)</span></span>;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">headquarter</span> :<span class="hljs-keyword">public</span> city<br>&#123;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-type">int</span> TotalLife;					<span class="hljs-comment">//司令部总的生命元</span><br>	<span class="hljs-type">char</span> name[<span class="hljs-number">7</span>];					<span class="hljs-comment">//司令部的名字</span><br>	<span class="hljs-type">int</span> makeseq[<span class="hljs-number">5</span>];					<span class="hljs-comment">//制造武士的顺序</span><br>	<span class="hljs-type">int</span> LifeNeed[<span class="hljs-number">5</span>];				<span class="hljs-comment">//把制造武士所需的生命元也放在类里</span><br>	<span class="hljs-type">int</span> WarriorAttack[<span class="hljs-number">5</span>];<br>	std::vector&lt;warrior*&gt; warriors;	<span class="hljs-comment">//用来存放武士的容器</span><br>	<span class="hljs-type">bool</span> WheatherCreate = <span class="hljs-literal">true</span>;			<span class="hljs-comment">//是否可以制造武士</span><br>	<span class="hljs-type">bool</span> IsContinue = <span class="hljs-literal">true</span>;<br>	<span class="hljs-type">int</span> WarriorSeria = <span class="hljs-number">0</span>;<br>	<span class="hljs-type">int</span> lionloyalty;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-comment">//t是司令部的生命元，arr是制造武士的顺序，N城市的数量 A是武士攻击力数组</span><br>	<span class="hljs-comment">//L是武士的生命值数组</span><br>	<span class="hljs-built_in">headquarter</span>(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> *arr, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> N, <span class="hljs-type">int</span> *L, <span class="hljs-type">int</span> *A, <span class="hljs-type">int</span> Ly) :<span class="hljs-built_in">TotalLife</span>(t),<br>		<span class="hljs-built_in">lionloyalty</span>(Ly)<br>	&#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = <span class="hljs-number">0</span>; n &lt; <span class="hljs-number">5</span>; n++)<br>		&#123;<br>			makeseq[n] = arr[n];<br>			LifeNeed[n] = L[n];<br>			WarriorAttack[n] = A[n];<br>		&#125;<br>		<span class="hljs-keyword">if</span> (m == <span class="hljs-number">0</span>)<br>		&#123;<br>			name[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;r&#x27;</span>;<br>			name[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;e&#x27;</span>;<br>			name[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;d&#x27;</span>;<br>			name[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>			location = <span class="hljs-number">0</span>;<br>		&#125;<br>		<span class="hljs-keyword">if</span> (m == <span class="hljs-number">1</span>)<br>		&#123;<br>			name[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;b&#x27;</span>;<br>			name[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;l&#x27;</span>;<br>			name[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;u&#x27;</span>;<br>			name[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;e&#x27;</span>;<br>			name[<span class="hljs-number">4</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>			location = N + <span class="hljs-number">1</span>;<br>		&#125;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">getnextMakeValidWarriorKind</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">if</span> (TotalLife &gt;= LifeNeed[makeseq[warriors.<span class="hljs-built_in">size</span>() % <span class="hljs-number">5</span>]])<span class="hljs-comment">//</span><br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>		<span class="hljs-keyword">else</span><br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">delete_warrior</span><span class="hljs-params">(warrior *)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">produce</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_continue</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> IsContinue;<br>	&#125;<br>	<span class="hljs-function">std::vector&lt;warrior*&gt;&amp;  <span class="hljs-title">get_warrios</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> warriors;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_totalife</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> TotalLife;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_location</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> location;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">char</span> *<span class="hljs-title">get_name</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> name;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Been_Token</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		IsContinue = <span class="hljs-literal">false</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Time</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-type">int</span> TotalTime;<br>	<span class="hljs-type">bool</span> is_continue = <span class="hljs-literal">true</span>;<br>	<span class="hljs-type">int</span> NowTime = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">Time</span>(<span class="hljs-type">int</span> t) :<span class="hljs-built_in">TotalTime</span>(t)<br>	&#123;<br><br>	&#125;<br>	<span class="hljs-comment">//如果是武士的行为就需要引用司令部，武器的行为需要引用武士</span><br>	<span class="hljs-comment">//因为一个司令部有很多武士，一个武士有很多武器</span><br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">create_event</span><span class="hljs-params">(headquarter &amp;a, headquarter &amp;b)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">escape_event</span><span class="hljs-params">(headquarter &amp;a, headquarter &amp;b)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">forward_event</span><span class="hljs-params">(headquarter &amp;a, headquarter &amp;b, city **)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rob_event</span><span class="hljs-params">(warrior *a, warrior *b, <span class="hljs-type">int</span>)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fight_event</span><span class="hljs-params">(warrior *a, warrior *b, <span class="hljs-type">int</span>)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">headquarte_report</span><span class="hljs-params">(headquarter &amp;a)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_nowtime</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		++NowTime;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_nowtime</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> NowTime;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">warriors_report</span><span class="hljs-params">(warrior *a)</span></span>;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">weapon</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">warrior</span><br>&#123;<br><span class="hljs-keyword">protected</span>:<br>	<span class="hljs-type">int</span> life;						<span class="hljs-comment">//武士的生命</span><br>	<span class="hljs-type">int</span> seria;						<span class="hljs-comment">//武士的编号</span><br>	<span class="hljs-type">int</span> damage;						<span class="hljs-comment">//武士的攻击力</span><br>	std::vector&lt;weapon *&gt;weapons;	<span class="hljs-comment">//用来存放武器的优先队列</span><br>	<span class="hljs-type">int</span> location;					<span class="hljs-comment">//现在的位置</span><br>	<span class="hljs-type">int</span> WeaponsNum[<span class="hljs-number">3</span>] = &#123;&#125;;<br>	std::string name;<br>	<span class="hljs-type">int</span> HqtName;					<span class="hljs-comment">//所属司令部的名字,0表示red,1表示blue</span><br>	std::string colorname;			<span class="hljs-comment">//没办法了，真的需要这个</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">warrior</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> d = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> L = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>) :<span class="hljs-built_in">life</span>(l),<br>		<span class="hljs-built_in">seria</span>(s), <span class="hljs-built_in">damage</span>(d), <span class="hljs-built_in">location</span>(L), <span class="hljs-built_in">HqtName</span>(p)<br>	&#123;<br>		name = <span class="hljs-string">&quot;warrior&quot;</span>;<br>		<span class="hljs-keyword">if</span> (p == <span class="hljs-number">0</span>)<br>			colorname = <span class="hljs-string">&quot;red&quot;</span>;<br>		<span class="hljs-keyword">else</span><br>			colorname = <span class="hljs-string">&quot;blue&quot;</span>;<br>	&#125;<br>	<span class="hljs-function">std::vector&lt;weapon*&gt; &amp; <span class="hljs-title">get_weapons</span><span class="hljs-params">()</span>			<span class="hljs-comment">//返回武士的武器，记得使用引用</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> weapons;<br>	&#125;<br>	<span class="hljs-function">std::string <span class="hljs-title">get_name</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> name;<br>	&#125;<br>	<span class="hljs-function">std::string <span class="hljs-title">get_color</span><span class="hljs-params">()</span><span class="hljs-type">const</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> colorname;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_hqt</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> HqtName;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_life</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> life;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_attack</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> damage;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change_life</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">	</span>&#123;<br>		life -= n;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_loc</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> location;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_seria</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> seria;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">report</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_die</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br><br>		<span class="hljs-keyword">if</span> (life &lt;= <span class="hljs-number">0</span>)<br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>		<span class="hljs-keyword">else</span><br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rob_weapon</span><span class="hljs-params">(warrior* enermy)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete_weapon</span><span class="hljs-params">(weapon *)</span></span>;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">bool</span> <span class="hljs-title">is_use_bomb</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gaming</span><span class="hljs-params">(<span class="hljs-type">int</span> times, <span class="hljs-type">int</span> &amp;)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change_weaponnum</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span><br><span class="hljs-function">	</span>&#123;<br>		--WeaponsNum[s];<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort_weapons</span><span class="hljs-params">()</span></span>;<br>	<span class="hljs-comment">//第10分时的移动，每一次在headquarters的warriors都用一次</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> warrior*  <span class="hljs-title">forward</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">	</span>&#123;<br>		location += n;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">before_game</span><span class="hljs-params">(warrior* enermy, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>		<span class="hljs-comment">//为了wolf的偷武器而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">after_game</span><span class="hljs-params">(<span class="hljs-type">int</span> time, <span class="hljs-type">int</span> city)</span>	<span class="hljs-comment">//为了dragon的yell而设置的</span></span><br><span class="hljs-function">	</span>&#123;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">bool</span> <span class="hljs-title">is_escape</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dragon</span> :<span class="hljs-keyword">public</span> warrior<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">dragon</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> d = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> L = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>);<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">yell</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br>	<span class="hljs-function">warrior* <span class="hljs-title">forward</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">	</span>&#123;<br>		location += n;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">before_game</span><span class="hljs-params">(warrior* enermy, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>		       <span class="hljs-comment">//为了wolf的偷武器而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">after_game</span><span class="hljs-params">(<span class="hljs-type">int</span> time, <span class="hljs-type">int</span> city)</span> <span class="hljs-comment">//为了dragon的yell而设置的</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">yell</span>(time, city);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_escape</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_use_bomb</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ninja</span> :<span class="hljs-keyword">public</span> warrior<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">ninja</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> d = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> L = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>);<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_use_bomb</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-function">warrior* <span class="hljs-title">forward</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">	</span>&#123;<br>		location += n;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">before_game</span><span class="hljs-params">(warrior* enermy, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>		<span class="hljs-comment">//为了wolf的偷武器而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">after_game</span><span class="hljs-params">(<span class="hljs-type">int</span> time, <span class="hljs-type">int</span> city)</span>	<span class="hljs-comment">//为了dragon的yell而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_escape</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">iceman</span> :<span class="hljs-keyword">public</span> warrior<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">iceman</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> d = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> L = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>);<br>	<span class="hljs-function">warrior* <span class="hljs-title">forward</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">	</span>&#123;<br>		location += n;<br>		life -= life * <span class="hljs-number">1</span> / <span class="hljs-number">10</span>;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">before_game</span><span class="hljs-params">(warrior* enermy, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>		<span class="hljs-comment">//为了wolf的偷武器而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">after_game</span><span class="hljs-params">(<span class="hljs-type">int</span> time, <span class="hljs-type">int</span> city)</span>	<span class="hljs-comment">//为了dragon的yell而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_escape</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_use_bomb</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">lion</span> :<span class="hljs-keyword">public</span> warrior<br>&#123;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-type">int</span> loyalty;<br>	<span class="hljs-type">int</span> K;				<span class="hljs-comment">//每一次行走消耗的忠诚度，命名逐渐暴躁</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">lion</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> d = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> L = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>);<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_escape</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">if</span> (loyalty &lt;= <span class="hljs-number">0</span>)<br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>		<span class="hljs-keyword">else</span><br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-function">warrior* <span class="hljs-title">forward</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">	</span>&#123;<br>		loyalty -= K;<br>		location += n;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br><br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">before_game</span><span class="hljs-params">(warrior* enermy, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>		<span class="hljs-comment">//为了wolf的偷武器而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">after_game</span><span class="hljs-params">(<span class="hljs-type">int</span> time, <span class="hljs-type">int</span> city)</span>	<span class="hljs-comment">//为了dragon的yell而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_use_bomb</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">wolf</span> :<span class="hljs-keyword">public</span> warrior<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">wolf</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> d = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> L = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>) :<br>		<span class="hljs-built_in">warrior</span>(l, s, d, L, r, p)<br>	&#123;<br>		name = <span class="hljs-string">&quot;wolf&quot;</span>;<br>	&#125;<br>	<span class="hljs-function">warrior* <span class="hljs-title">forward</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">	</span>&#123;<br>		location += n;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">before_game</span><span class="hljs-params">(warrior* enermy, <span class="hljs-type">int</span> NoWtime, <span class="hljs-type">int</span> City)</span>		<span class="hljs-comment">//为了wolf的偷武器而设置的</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">wolf_rob</span>(enermy, NoWtime, City);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">after_game</span><span class="hljs-params">(<span class="hljs-type">int</span> time, <span class="hljs-type">int</span> city)</span>	<span class="hljs-comment">//为了dragon的yell而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_escape</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_use_bomb</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">wolf_rob</span><span class="hljs-params">(warrior *, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Pair</span><br>&#123;<br>	<span class="hljs-type">int</span> first;<br>	<span class="hljs-type">int</span> second;<br>	<span class="hljs-built_in">Pair</span>(<span class="hljs-type">int</span> f, <span class="hljs-type">int</span> s) :<span class="hljs-built_in">first</span>(f), <span class="hljs-built_in">second</span>(s) &#123;&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">weapon</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-type">int</span> WeaponDamage;		<span class="hljs-comment">//武器的攻击力</span><br>	<span class="hljs-type">int</span> WeaponSeria;		<span class="hljs-comment">//武器的编号，用于后面排序</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">weapon</span>(<span class="hljs-type">int</span> d, <span class="hljs-type">int</span> w) :<span class="hljs-built_in">WeaponDamage</span>(d), <span class="hljs-built_in">WeaponSeria</span>(w) &#123;&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> Pair <span class="hljs-title">using_weapon</span><span class="hljs-params">(<span class="hljs-type">int</span> MyDamage)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-built_in">Pair</span>(WeaponDamage, MyDamage);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_seria</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> WeaponSeria;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">change_damege</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function">	</span>&#123;<br>		WeaponDamage = t;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_damage</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> WeaponDamage;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">get_use_times</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">bool</span> <span class="hljs-title">is_bad</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;	<span class="hljs-comment">//每次使用武器后就调用这个函数</span><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sword</span> :<span class="hljs-keyword">public</span> weapon<br>&#123;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-type">int</span> Availbleuse = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">sword</span>(<span class="hljs-type">int</span> d = <span class="hljs-number">0</span>) :<span class="hljs-built_in">weapon</span>(d * <span class="hljs-number">2</span> / <span class="hljs-number">10</span>, <span class="hljs-number">0</span>) &#123;&#125;<br>	<span class="hljs-function">Pair <span class="hljs-title">using_weapon</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span> </span>&#123; <span class="hljs-keyword">return</span> weapon::<span class="hljs-built_in">using_weapon</span>(<span class="hljs-number">0</span>); &#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_use_times</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_bad</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change_damege</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function">	</span>&#123;<br>		weapon::<span class="hljs-built_in">change_damege</span>(t * <span class="hljs-number">2</span> / <span class="hljs-number">10</span>);<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">bomb</span> :<span class="hljs-keyword">public</span> weapon<br>&#123;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-type">int</span> AvailbleUse = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">bomb</span>(<span class="hljs-type">int</span> d = <span class="hljs-number">0</span>) :<span class="hljs-built_in">weapon</span>(d * <span class="hljs-number">4</span> / <span class="hljs-number">10</span>, <span class="hljs-number">1</span>) &#123;&#125;<br>	<span class="hljs-function">Pair <span class="hljs-title">using_weapon</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span><br><span class="hljs-function">	</span>&#123;<br>		--AvailbleUse;<br>		<span class="hljs-keyword">return</span> weapon::<span class="hljs-built_in">using_weapon</span>(<span class="hljs-built_in">get_damage</span>() / <span class="hljs-number">2</span>);<br>	&#125;<span class="hljs-comment">//</span><br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_use_times</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> AvailbleUse;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_bad</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; &#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change_damege</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function">	</span>&#123;<br>		weapon::<span class="hljs-built_in">change_damege</span>(t * <span class="hljs-number">4</span> / <span class="hljs-number">10</span>);<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">arrow</span> :<span class="hljs-keyword">public</span> weapon<br>&#123;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-type">int</span> AvailbleUse = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">arrow</span>(<span class="hljs-type">int</span> d = <span class="hljs-number">0</span>) :<span class="hljs-built_in">weapon</span>(d * <span class="hljs-number">3</span> / <span class="hljs-number">10</span>, <span class="hljs-number">2</span>) &#123;&#125;<br>	<span class="hljs-function">Pair <span class="hljs-title">using_weapon</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span><br><span class="hljs-function">	</span>&#123;<br>		--AvailbleUse;<br>		<span class="hljs-keyword">return</span> weapon::<span class="hljs-built_in">using_weapon</span>(<span class="hljs-number">0</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_bad</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">if</span> (AvailbleUse == <span class="hljs-number">0</span>)<br>		&#123;<br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>		&#125;<br>		<span class="hljs-keyword">else</span><br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_use_times</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> AvailbleUse;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change_damege</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function">	</span>&#123;<br>		weapon::<span class="hljs-built_in">change_damege</span>(t * <span class="hljs-number">3</span> / <span class="hljs-number">10</span>);<br>	&#125;<br>&#125;;<br><span class="hljs-comment">//life表示武士的生命，L表示武士的位置，s表示武士的标号，可以用choice确定使用哪一个武士</span><br><span class="hljs-function">warrior* <span class="hljs-title">factorial::creator_warrior</span><span class="hljs-params">(<span class="hljs-type">int</span> choice, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> life, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> total, <span class="hljs-type">int</span> N, <span class="hljs-type">int</span> *WarriorAttack,</span></span><br><span class="hljs-params"><span class="hljs-function">	<span class="hljs-type">int</span> K)</span></span><br><span class="hljs-function"></span>&#123;<br>	warrior *ptemp;<br>	<span class="hljs-keyword">if</span> (choice == <span class="hljs-number">0</span>)<br>		ptemp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">dragon</span>(life, s, WarriorAttack[choice], L, total, N);<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">1</span>)<br>		ptemp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ninja</span>(life, s, WarriorAttack[choice], L, total, N);<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">2</span>)<br>		ptemp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">iceman</span>(life, s, WarriorAttack[choice], L, total, N);<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">3</span>)<br>		ptemp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">lion</span>(life, s, WarriorAttack[choice], L, total, N, K);<br>	<span class="hljs-keyword">else</span><br>		ptemp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">wolf</span>(life, s, WarriorAttack[choice], L, total, N);<br>	<span class="hljs-keyword">return</span> ptemp;<br>&#125;<br><span class="hljs-comment">//N是武士存放武器的数组</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">factorial::creator_weapon</span><span class="hljs-params">(<span class="hljs-type">int</span> attack, <span class="hljs-type">int</span> seria, <span class="hljs-type">int</span> num, std::vector&lt;weapon*&gt; &amp;d,</span></span><br><span class="hljs-params"><span class="hljs-function">	<span class="hljs-type">int</span> *N)</span></span><br><span class="hljs-function"></span>&#123;<br>	weapon * ptemp1;<br>	weapon *ptemp2;<br>	<span class="hljs-keyword">if</span> (seria % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)<br>		ptemp1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">sword</span>(attack);<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (seria % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>)<br>		ptemp1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">bomb</span>(attack);<br>	<span class="hljs-keyword">else</span><br>		ptemp1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">arrow</span>(attack);<br>	<span class="hljs-keyword">if</span> ((seria + <span class="hljs-number">1</span>) % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)<br>		ptemp2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">sword</span>(attack);<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((seria + <span class="hljs-number">1</span>) % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>)<br>		ptemp2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">bomb</span>(attack);<br>	<span class="hljs-keyword">else</span><br>		ptemp2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">arrow</span>(attack);<br>	<span class="hljs-keyword">if</span> (num == <span class="hljs-number">1</span>)<br>	&#123;<br>		d.<span class="hljs-built_in">push_back</span>(ptemp1);<br>		++N[seria % <span class="hljs-number">3</span>];<br>		<span class="hljs-comment">//在函数里申请空间而不delete也是不会回收的，所以这里要delete ptemp2</span><br>		<span class="hljs-keyword">delete</span> ptemp2;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		d.<span class="hljs-built_in">push_back</span>(ptemp1);<br>		++N[seria % <span class="hljs-number">3</span>];<br>		d.<span class="hljs-built_in">push_back</span>(ptemp2);<br>		++N[(seria + <span class="hljs-number">1</span>) % <span class="hljs-number">3</span>];<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">city::city_delete</span><span class="hljs-params">(warrior *temp)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt; qwarriors.<span class="hljs-built_in">size</span>(); t++)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (qwarriors[t] == temp)<br>		&#123;<br>			qwarriors.<span class="hljs-built_in">erase</span>(qwarriors.<span class="hljs-built_in">begin</span>() + t);<br>			<span class="hljs-keyword">break</span>;<br>		&#125;<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">city::add_qwarriors</span><span class="hljs-params">(warrior *w)</span></span><br><span class="hljs-function"></span>&#123;<br>	qwarriors.<span class="hljs-built_in">push_back</span>(w);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">headquarter::produce</span><span class="hljs-params">(<span class="hljs-type">int</span> time)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (WheatherCreate == <span class="hljs-literal">false</span>)<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	<span class="hljs-keyword">if</span> (!<span class="hljs-built_in">getnextMakeValidWarriorKind</span>())<br>	&#123;<br>		WheatherCreate = <span class="hljs-literal">false</span>;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-type">int</span> N = std::<span class="hljs-built_in">strlen</span>(<span class="hljs-built_in">get_name</span>()) - <span class="hljs-number">3</span>;<br>		TotalLife -= LifeNeed[makeseq[WarriorSeria % <span class="hljs-number">5</span>]];<br>		warrior *ptemp = factorial::<span class="hljs-built_in">creator_warrior</span>(makeseq[WarriorSeria % <span class="hljs-number">5</span>], WarriorSeria + <span class="hljs-number">1</span>,<br>			LifeNeed[makeseq[WarriorSeria % <span class="hljs-number">5</span>]], location, TotalLife, N, WarriorAttack, lionloyalty);<br>		warriors.<span class="hljs-built_in">push_back</span>(ptemp);<br>		std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; time;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:00 %s %s %d born\n&quot;</span>, name, ptemp-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), WarriorSeria + <span class="hljs-number">1</span>);<br>		<span class="hljs-keyword">if</span> (ptemp-&gt;<span class="hljs-built_in">get_name</span>() == <span class="hljs-string">&quot;lion&quot;</span>)<br>			<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Its loyalty is %d\n&quot;</span>, TotalLife);<br>		++WarriorSeria;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">headquarter::delete_warrior</span><span class="hljs-params">(warrior *temp)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt; warriors.<span class="hljs-built_in">size</span>(); t++)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (warriors[t] == temp)<br>		&#123;<br>			warriors.<span class="hljs-built_in">erase</span>(warriors.<span class="hljs-built_in">begin</span>() + t);<br>			<span class="hljs-keyword">break</span>;<br>		&#125;<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Time::create_event</span><span class="hljs-params">(headquarter &amp;a, headquarter &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (NowTime * <span class="hljs-number">60</span> &gt; TotalTime)<br>	&#123;<br>		is_continue = <span class="hljs-literal">false</span>;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	a.<span class="hljs-built_in">produce</span>(NowTime);<br>	b.<span class="hljs-built_in">produce</span>(NowTime);<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Time::escape_event</span><span class="hljs-params">(headquarter &amp;a, headquarter &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">auto</span> &amp;x1 = a.<span class="hljs-built_in">get_warrios</span>();<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt; x1.<span class="hljs-built_in">size</span>(); t++)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (x1[t]-&gt;<span class="hljs-built_in">get_name</span>() == <span class="hljs-string">&quot;lion&quot;</span>)<br>		&#123;<br>			<span class="hljs-keyword">if</span> (x1[t]-&gt;<span class="hljs-built_in">is_escape</span>())<br>			&#123;<br>				std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; NowTime;<br>				<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:05 %s %s %d ran away\n&quot;</span>, a.<span class="hljs-built_in">get_name</span>(),<br>					x1[t]-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), t + <span class="hljs-number">1</span>);<br>				x1.<span class="hljs-built_in">erase</span>(x1.<span class="hljs-built_in">begin</span>() + t);<br>			&#125;<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">auto</span> &amp;x2 = b.<span class="hljs-built_in">get_warrios</span>();<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt; x2.<span class="hljs-built_in">size</span>(); t++)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (x2[t]-&gt;<span class="hljs-built_in">get_name</span>() == <span class="hljs-string">&quot;lion&quot;</span>)<br>		&#123;<br>			<span class="hljs-keyword">if</span> (x2[t]-&gt;<span class="hljs-built_in">is_escape</span>())<br>			&#123;<br>				std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; NowTime;<br>				<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:05 %s %s %d ran away\n&quot;</span>, b.<span class="hljs-built_in">get_name</span>(),<br>					x2[t]-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), t + <span class="hljs-number">1</span>);<br>				x2.<span class="hljs-built_in">erase</span>(x2.<span class="hljs-built_in">begin</span>() + t);<br>			&#125;<br>		&#125;<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Time::forward_event</span><span class="hljs-params">(headquarter &amp;a, headquarter &amp;b, city **arr)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">auto</span> &amp;x1 = a.<span class="hljs-built_in">get_warrios</span>();<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt; x1.<span class="hljs-built_in">size</span>(); t++)<br>	&#123;<br>		<span class="hljs-keyword">auto</span> ptemp = x1[t]-&gt;forward(<span class="hljs-number">1</span>);<br>		arr[ptemp-&gt;<span class="hljs-built_in">get_loc</span>()]-&gt;<span class="hljs-built_in">add_qwarriors</span>(ptemp);<br>	&#125;<br>	<span class="hljs-keyword">auto</span> &amp;x2 = b.<span class="hljs-built_in">get_warrios</span>();<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt; x2.<span class="hljs-built_in">size</span>(); t++)<br>	&#123;<br>		<span class="hljs-keyword">auto</span> ptemp = x2[t]-&gt;forward(<span class="hljs-number">-1</span>);<br>		arr[ptemp-&gt;<span class="hljs-built_in">get_loc</span>()]-&gt;<span class="hljs-built_in">add_qwarriors</span>(ptemp);<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Time::rob_event</span><span class="hljs-params">(warrior *a, warrior *b, <span class="hljs-type">int</span> City)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">get_name</span>() == <span class="hljs-string">&quot;wolf&quot;</span>&amp;&amp;b-&gt;<span class="hljs-built_in">get_name</span>() != <span class="hljs-string">&quot;wolf&quot;</span>)<br>		a-&gt;<span class="hljs-built_in">before_game</span>(b, NowTime, City);<br>	<span class="hljs-keyword">if</span> (b-&gt;<span class="hljs-built_in">get_name</span>() == <span class="hljs-string">&quot;wolf&quot;</span>&amp;&amp;a-&gt;<span class="hljs-built_in">get_name</span>() != <span class="hljs-string">&quot;wolf&quot;</span>)<br>		b-&gt;<span class="hljs-built_in">before_game</span>(a, NowTime, City);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Time::fight_event</span><span class="hljs-params">(warrior *a, warrior *b, <span class="hljs-type">int</span> choose)</span><span class="hljs-comment">//choose是city的编号</span></span><br><span class="hljs-function"></span>&#123;<br>	a-&gt;<span class="hljs-built_in">sort_weapons</span>();<br>	b-&gt;<span class="hljs-built_in">sort_weapons</span>();<br>	<span class="hljs-type">int</span> t1 = <span class="hljs-number">0</span>;<br>	<span class="hljs-type">int</span> t2 = <span class="hljs-number">0</span>;<br>	<span class="hljs-type">int</span> flag = <span class="hljs-number">2</span>;				<span class="hljs-comment">//-1表示a赢，0表示打和，1表示b赢,2表示都死了</span><br>	<span class="hljs-keyword">while</span> (!a-&gt;<span class="hljs-built_in">is_die</span>() &amp;&amp; !b-&gt;<span class="hljs-built_in">is_die</span>())<br>	&#123;<br>		<span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span> &amp;&amp; b-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<br>		&#123;<br>			<span class="hljs-type">int</span> s = <span class="hljs-number">1</span>;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : b-&gt;<span class="hljs-built_in">get_weapons</span>())<br>			&#123;<br>				<span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">get_damage</span>() != <span class="hljs-number">0</span>)<br>				&#123;<br>					s = <span class="hljs-number">0</span>;<br>				&#125;<br><br>				<span class="hljs-comment">//攻击力为0的arrow,和攻击力为0的sword</span><br>				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">get_damage</span>() == <span class="hljs-number">0</span> &amp;&amp; x-&gt;<span class="hljs-built_in">get_use_times</span>() != <span class="hljs-number">0</span>)<br>					s = <span class="hljs-number">0</span>;<br>			&#125;<br>			<span class="hljs-keyword">if</span> (s == <span class="hljs-number">1</span>)<br>				<span class="hljs-keyword">break</span>;<br>		&#125;<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<br>		&#123;<br>			<span class="hljs-type">int</span> s = <span class="hljs-number">1</span>;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : a-&gt;<span class="hljs-built_in">get_weapons</span>())<br>			&#123;<br>				<span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">get_damage</span>() != <span class="hljs-number">0</span>)<br>				&#123;<br>					s = <span class="hljs-number">0</span>;<br>				&#125;<br>				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">get_damage</span>() == <span class="hljs-number">0</span> &amp;&amp; x-&gt;<span class="hljs-built_in">get_use_times</span>() != <span class="hljs-number">0</span>)<br>					s = <span class="hljs-number">0</span>;<br>			&#125;<br>			<span class="hljs-keyword">if</span> (s == <span class="hljs-number">1</span>)<br>				<span class="hljs-keyword">break</span>;<br>		&#125;<br>		<span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>() != <span class="hljs-number">0</span>)<br>		&#123;<br>			<span class="hljs-type">int</span> dmg = a-&gt;<span class="hljs-built_in">gaming</span>(t1%a-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>(), t1);<br>			b-&gt;<span class="hljs-built_in">change_life</span>(dmg);<br>			<span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">is_die</span>())<br>				<span class="hljs-keyword">break</span>;<br>		&#125;<br>		<span class="hljs-keyword">if</span> (b-&gt;<span class="hljs-built_in">is_die</span>())<br>		&#123;<br>			<span class="hljs-keyword">break</span>;<br>		&#125;<br>		<span class="hljs-keyword">if</span> (b-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>() != <span class="hljs-number">0</span>)<br>		&#123;<br>			<span class="hljs-type">int</span> dmg = b-&gt;<span class="hljs-built_in">gaming</span>(t2%b-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>(), t2);<br>			a-&gt;<span class="hljs-built_in">change_life</span>(dmg);<br>			<span class="hljs-keyword">if</span> (b-&gt;<span class="hljs-built_in">is_die</span>())<br>				<span class="hljs-keyword">break</span>;<br>		&#125;<br>		++t1;<br>		++t2;<br>	&#125;<br>	<span class="hljs-comment">//让a是红，这里交换指针指向的值并不会影响实际的值</span><br>	std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; NowTime;<br>	<span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">get_color</span>() == <span class="hljs-string">&quot;blue&quot;</span>)<br>	&#123;<br>		<span class="hljs-keyword">auto</span> temp = a;<br>		a = b;<br>		b = temp;<br>	&#125;<br>	<span class="hljs-keyword">if</span> (!a-&gt;<span class="hljs-built_in">is_die</span>() &amp;&amp; !b-&gt;<span class="hljs-built_in">is_die</span>())<br>	&#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:40 both red %s %d and blue %s %d were alive in city %d\n&quot;</span>,<br>			a-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), a-&gt;<span class="hljs-built_in">get_seria</span>(), b-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), b-&gt;<span class="hljs-built_in">get_seria</span>(),<br>			choose);<br>		a-&gt;<span class="hljs-built_in">after_game</span>(NowTime, choose);<br>		b-&gt;<span class="hljs-built_in">after_game</span>(NowTime, choose);<br>		flag = <span class="hljs-number">0</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">is_die</span>() &amp;&amp; b-&gt;<span class="hljs-built_in">is_die</span>())<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:40 both red %s %d and blue %s %d died in city %d\n&quot;</span>,<br>			a-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), a-&gt;<span class="hljs-built_in">get_seria</span>(), b-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), b-&gt;<span class="hljs-built_in">get_seria</span>(),<br>			choose);<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">is_die</span>())<br>	&#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:40 blue %s %d killed red %s %d in city %d remaining %d elements\n&quot;</span>,<br>			b-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), b-&gt;<span class="hljs-built_in">get_seria</span>(), a-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), a-&gt;<span class="hljs-built_in">get_seria</span>(), choose,<br>			b-&gt;<span class="hljs-built_in">get_life</span>());<br>		b-&gt;<span class="hljs-built_in">rob_weapon</span>(a);<br>		b-&gt;<span class="hljs-built_in">after_game</span>(NowTime, choose);<br>		flag = <span class="hljs-number">1</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b-&gt;<span class="hljs-built_in">is_die</span>())<br>	&#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:40 red %s %d killed blue %s %d in city %d remaining %d elements\n&quot;</span>,<br>			a-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), a-&gt;<span class="hljs-built_in">get_seria</span>(), b-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), b-&gt;<span class="hljs-built_in">get_seria</span>(), choose,<br>			a-&gt;<span class="hljs-built_in">get_life</span>());<br>		flag = <span class="hljs-number">-1</span>;<br>		a-&gt;<span class="hljs-built_in">rob_weapon</span>(b);<br>		a-&gt;<span class="hljs-built_in">after_game</span>(NowTime, choose);<br>	&#125;<br>	<span class="hljs-keyword">return</span> flag;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Time::headquarte_report</span><span class="hljs-params">(headquarter &amp;a)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> n = a.<span class="hljs-built_in">get_totalife</span>();<br>	std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; NowTime;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:50 %d elements in %s headquarter\n&quot;</span>, n, a.<span class="hljs-built_in">get_name</span>());<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Time::warriors_report</span><span class="hljs-params">(warrior *a)</span></span><br><span class="hljs-function"></span>&#123;<br>	a-&gt;<span class="hljs-built_in">report</span>(NowTime, a-&gt;<span class="hljs-built_in">get_color</span>().<span class="hljs-built_in">c_str</span>());<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(weapon *a, weapon *b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">get_seria</span>() == b-&gt;<span class="hljs-built_in">get_seria</span>())<br>		<span class="hljs-keyword">return</span> a-&gt;<span class="hljs-built_in">get_use_times</span>() &lt; b-&gt;<span class="hljs-built_in">get_use_times</span>();<br>	<span class="hljs-keyword">else</span><br>		<span class="hljs-keyword">return</span> a-&gt;<span class="hljs-built_in">get_seria</span>() &lt; b-&gt;<span class="hljs-built_in">get_seria</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp1</span><span class="hljs-params">(weapon *a, weapon *b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">get_seria</span>() == b-&gt;<span class="hljs-built_in">get_seria</span>())<br>		<span class="hljs-keyword">return</span> a-&gt;<span class="hljs-built_in">get_use_times</span>() &gt; b-&gt;<span class="hljs-built_in">get_use_times</span>();<br>	<span class="hljs-keyword">else</span><br>		<span class="hljs-keyword">return</span> a-&gt;<span class="hljs-built_in">get_seria</span>() &lt; b-&gt;<span class="hljs-built_in">get_seria</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">warrior::Delete_weapon</span><span class="hljs-params">(weapon* w)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : weapons)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (x == w)<br>		&#123;<br>			weapons.<span class="hljs-built_in">erase</span>(weapons.<span class="hljs-built_in">begin</span>() + t);<br>			<span class="hljs-keyword">break</span>;<br>		&#125;<br>		++t;<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">warrior::sort_weapons</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">sort</span>(weapons.<span class="hljs-built_in">begin</span>(), weapons.<span class="hljs-built_in">end</span>(), cmp);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">warrior::report</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *N)</span></span><br><span class="hljs-function"></span>&#123;<br>	std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; t;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:55 %s %s %d has %d sword %d bomb %d arrow and %d elements\n&quot;</span>,<br>		N, name.<span class="hljs-built_in">c_str</span>(), seria, WeaponsNum[<span class="hljs-number">0</span>], WeaponsNum[<span class="hljs-number">1</span>], WeaponsNum[<span class="hljs-number">2</span>], life);<br>&#125;<br><span class="hljs-comment">//time小时，str是红蓝的名字，city是city的编号</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dragon::yell</span><span class="hljs-params">(<span class="hljs-type">int</span> time, <span class="hljs-type">int</span> city)</span></span><br><span class="hljs-function"></span>&#123;<br>	std::cout &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; time;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:40 %s dragon %d yelled in city %d\n&quot;</span>, colorname.<span class="hljs-built_in">c_str</span>(), seria, city);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">warrior::gaming</span><span class="hljs-params">(<span class="hljs-type">int</span> times, <span class="hljs-type">int</span> &amp;t)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">auto</span> x = weapons[times];<br>	<span class="hljs-keyword">auto</span> p = x-&gt;<span class="hljs-built_in">using_weapon</span>(<span class="hljs-number">0</span>);<br>	<span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_use_bomb</span>())<br>		life -= p.second;<br>	<span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">is_bad</span>())<br>	&#123;<br>		--WeaponsNum[x-&gt;<span class="hljs-built_in">get_seria</span>()];<br>		--t;<br>		<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x0 : weapons)<br>		&#123;<br>			<span class="hljs-keyword">if</span> (x0 == x)<br>			&#123;<br>				weapons.<span class="hljs-built_in">erase</span>(weapons.<span class="hljs-built_in">begin</span>() + k);<br>				<span class="hljs-keyword">break</span>;<br>			&#125;<br>			k++;<br>		&#125;<br>		<span class="hljs-keyword">delete</span> x;<br>	&#125;<br>	<span class="hljs-keyword">return</span> p.first;<br>&#125;<br>dragon::<span class="hljs-built_in">dragon</span>(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> d, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> p) :<br>	<span class="hljs-built_in">warrior</span>(l, s, d, L, r, p)<br>&#123;<br>	name = <span class="hljs-string">&quot;dragon&quot;</span>;<br>	factorial::<span class="hljs-built_in">creator_weapon</span>(d, s, <span class="hljs-number">1</span>, weapons, WeaponsNum);<br>&#125;<br>ninja::<span class="hljs-built_in">ninja</span>(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> d, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> p) :<br>	<span class="hljs-built_in">warrior</span>(l, s, d, L, r, p)<br>&#123;<br>	name = <span class="hljs-string">&quot;ninja&quot;</span>;<br>	factorial::<span class="hljs-built_in">creator_weapon</span>(d, s, <span class="hljs-number">2</span>, weapons, WeaponsNum);<br>&#125;<br>iceman::<span class="hljs-built_in">iceman</span>(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> d, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> p) :<br>	<span class="hljs-built_in">warrior</span>(l, s, d, L, r, p)<br>&#123;<br>	name = <span class="hljs-string">&quot;iceman&quot;</span>;<br>	factorial::<span class="hljs-built_in">creator_weapon</span>(d, s, <span class="hljs-number">1</span>, weapons, WeaponsNum);<br>&#125;<br>lion::<span class="hljs-built_in">lion</span>(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> d, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> k) :<br>	<span class="hljs-built_in">warrior</span>(l, s, d, L, r, p), <span class="hljs-built_in">K</span>(k)<br>&#123;<br>	name = <span class="hljs-string">&quot;lion&quot;</span>;<br>	loyalty = r;<br>	factorial::<span class="hljs-built_in">creator_weapon</span>(d, s, <span class="hljs-number">1</span>, weapons, WeaponsNum);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">warrior::rob_weapon</span><span class="hljs-params">(warrior* enermy)</span>			<span class="hljs-comment">//抢劫武器</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> min = INT_MAX;<br>	<span class="hljs-keyword">if</span> (weapons.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">10</span>)<br>	&#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : enermy-&gt;<span class="hljs-built_in">get_weapons</span>())<br>			<span class="hljs-keyword">delete</span> x;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	<span class="hljs-built_in">sort</span>(enermy-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">begin</span>(), enermy-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">end</span>(), cmp1);<br>	<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">while</span> (weapons.<span class="hljs-built_in">size</span>() != <span class="hljs-number">10</span> &amp;&amp; t &lt; enermy-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>())<br>	&#123;<br>		weapons.<span class="hljs-built_in">push_back</span>(enermy-&gt;<span class="hljs-built_in">get_weapons</span>()[t]);<br>		enermy-&gt;<span class="hljs-built_in">get_weapons</span>()[t]-&gt;<span class="hljs-built_in">change_damege</span>(<span class="hljs-built_in">get_attack</span>());<br>		++WeaponsNum[enermy-&gt;<span class="hljs-built_in">get_weapons</span>()[t]-&gt;<span class="hljs-built_in">get_seria</span>()];<br>		++t;<br>	&#125;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = t; k &lt; enermy-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>(); k++)<br>		<span class="hljs-keyword">delete</span> enermy-&gt;<span class="hljs-built_in">get_weapons</span>()[k];<br>&#125;<br><span class="hljs-comment">//wolf的抢劫不删除剩余的武器</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">wolf::wolf_rob</span><span class="hljs-params">(warrior* enermy, <span class="hljs-type">int</span> NowTime, <span class="hljs-type">int</span> City)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (weapons.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">10</span> || enermy-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<br>		<span class="hljs-keyword">return</span>;<br>	<span class="hljs-type">int</span> min = INT_MAX;<br>	std::vector&lt;weapon*&gt; temp;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : enermy-&gt;<span class="hljs-built_in">get_weapons</span>())<br>	&#123;<br>		min = min &lt; x-&gt;<span class="hljs-built_in">get_seria</span>() ? min : x-&gt;<span class="hljs-built_in">get_seria</span>();<br>	&#125;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : enermy-&gt;<span class="hljs-built_in">get_weapons</span>())<br>	&#123;<br>		<span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">get_seria</span>() == min)<br>		&#123;<br>			temp.<span class="hljs-built_in">push_back</span>(x);<br>		&#125;<br>	&#125;<br>	<span class="hljs-comment">//把武器排好序</span><br>	std::<span class="hljs-built_in">sort</span>(temp.<span class="hljs-built_in">begin</span>(), temp.<span class="hljs-built_in">end</span>(), cmp1);<br>	<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>	<span class="hljs-comment">//把要缴获的武器放进，容器里</span><br>	<span class="hljs-keyword">while</span> (weapons.<span class="hljs-built_in">size</span>() != <span class="hljs-number">10</span> &amp;&amp; t &lt; temp.<span class="hljs-built_in">size</span>())<br>	&#123;<br>		weapons.<span class="hljs-built_in">push_back</span>(temp[t]);<br>		temp[t]-&gt;<span class="hljs-built_in">change_damege</span>(<span class="hljs-built_in">get_attack</span>());<br>		++WeaponsNum[temp[t]-&gt;<span class="hljs-built_in">get_seria</span>()];<br>		<span class="hljs-comment">//把敌人的武器erase但不用delete;这里的erase只要一直begin就好！！</span><br>		enermy-&gt;<span class="hljs-built_in">change_weaponnum</span>(min);<br>		enermy-&gt;<span class="hljs-built_in">Delete_weapon</span>(temp[t]);<br>		++t;<br>	&#125;<br>	std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; NowTime;<br>	std::string s1;<br>	<span class="hljs-keyword">if</span> (min == <span class="hljs-number">0</span>)<br>		s1 = <span class="hljs-string">&quot;sword&quot;</span>;<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (min == <span class="hljs-number">1</span>)<br>		s1 = <span class="hljs-string">&quot;bomb&quot;</span>;<br>	<span class="hljs-keyword">else</span><br>		s1 = <span class="hljs-string">&quot;arrow&quot;</span>;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:35 %s %s %d took %d %s from %s %s %d in city %d\n&quot;</span>, colorname.<span class="hljs-built_in">c_str</span>(),<br>		<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">get_seria</span>(), t, s1.<span class="hljs-built_in">c_str</span>(), enermy-&gt;<span class="hljs-built_in">get_color</span>().<span class="hljs-built_in">c_str</span>(),<br>		enermy-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), enermy-&gt;<span class="hljs-built_in">get_seria</span>(), City);<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> NUM = <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_CITY = <span class="hljs-number">22</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(warrior *x, headquarter &amp;a, headquarter &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">get_color</span>() == a.<span class="hljs-built_in">get_name</span>())<br>		a.<span class="hljs-built_in">delete_warrior</span>(x);<br>	<span class="hljs-keyword">else</span><br>		b.<span class="hljs-built_in">delete_warrior</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> red[] = &#123; <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;		<span class="hljs-comment">//红色司令部制造武士的顺序</span><br>	<span class="hljs-type">int</span> blue[] = &#123; <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span> &#125;;		<span class="hljs-comment">//蓝色司令部制造武士的顺序</span><br>	<span class="hljs-type">int</span> lifearr[<span class="hljs-number">5</span>];<br>	<span class="hljs-type">int</span> attackarr[<span class="hljs-number">5</span>];<br>	<span class="hljs-type">int</span> TestNum, M, N, K, T, count = <span class="hljs-number">1</span>;				<span class="hljs-comment">//M生命元，N城市数量，K lion的忠诚消耗，T总时间</span><br>	std::cin &gt;&gt; TestNum;<br>	<span class="hljs-keyword">while</span> (TestNum--)<br>	&#123;<br>		std::cin &gt;&gt; M &gt;&gt; N &gt;&gt; K &gt;&gt; T;<br>		city *CityArr[MAX_CITY];<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">1</span>; t &lt;= N; t++)<br>			CityArr[t] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">city</span>(t);<br><br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d:\n&quot;</span>, count);<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b = <span class="hljs-number">0</span>; b &lt; NUM; b++)<br>			std::cin &gt;&gt; lifearr[b];<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b = <span class="hljs-number">0</span>; b &lt; NUM; b++)<br>			std::cin &gt;&gt; attackarr[b];<br>		<span class="hljs-function">headquarter <span class="hljs-title">a</span><span class="hljs-params">(M, red, <span class="hljs-number">0</span>, N, lifearr, attackarr, K)</span></span>;<br>		<span class="hljs-function">headquarter <span class="hljs-title">b</span><span class="hljs-params">(M, blue, <span class="hljs-number">1</span>, N, lifearr, attackarr, K)</span></span>;<br>		CityArr[<span class="hljs-number">0</span>] = &amp;a;<br>		CityArr[N + <span class="hljs-number">1</span>] = &amp;b;<br>		<span class="hljs-function">Time <span class="hljs-title">temp</span><span class="hljs-params">(T)</span></span>;<br>		<span class="hljs-keyword">while</span> (a.<span class="hljs-built_in">is_continue</span>() &amp;&amp; b.<span class="hljs-built_in">is_continue</span>())<br>		&#123;<br>			temp.<span class="hljs-built_in">create_event</span>(a, b);<br>			<span class="hljs-keyword">if</span> (temp.<span class="hljs-built_in">get_nowtime</span>() * <span class="hljs-number">60</span> &gt;= T)<br>				<span class="hljs-keyword">break</span>;<br>			temp.<span class="hljs-built_in">escape_event</span>(a, b);<br>			<span class="hljs-keyword">if</span> (temp.<span class="hljs-built_in">get_nowtime</span>() * <span class="hljs-number">60</span> + <span class="hljs-number">5</span> &gt;= T)<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">1</span>; t &lt;= N; t++)<br>				CityArr[t]-&gt;<span class="hljs-built_in">show_qwarriors</span>().<span class="hljs-built_in">clear</span>();<br>			temp.forward_event(a, b, CityArr);<br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt;= N + <span class="hljs-number">1</span>; t++)<br>			&#123;<br>				<span class="hljs-keyword">if</span> (CityArr[t]-&gt;<span class="hljs-built_in">show_qwarriors</span>().<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">0</span>)<br>				&#123;<br>					<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : CityArr[t]-&gt;<span class="hljs-built_in">show_qwarriors</span>())<br>					&#123;<br>						std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; temp.<span class="hljs-built_in">get_nowtime</span>();<br>						<span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">get_loc</span>() != b.<span class="hljs-built_in">get_location</span>() &amp;&amp; x-&gt;<span class="hljs-built_in">get_loc</span>() != a.<span class="hljs-built_in">get_location</span>())<br>						&#123;<br>							<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:10 %s %s %d marched to city %d with %d elements and force %d\n&quot;</span>,<br>								x-&gt;<span class="hljs-built_in">get_color</span>().<span class="hljs-built_in">c_str</span>(), x-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), x-&gt;<span class="hljs-built_in">get_seria</span>(), x-&gt;<span class="hljs-built_in">get_loc</span>(),<br>								x-&gt;<span class="hljs-built_in">get_life</span>(), x-&gt;<span class="hljs-built_in">get_attack</span>());<br>						&#125;<br>						<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">get_loc</span>() == a.<span class="hljs-built_in">get_location</span>())<br>						&#123;<br>							<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:10 %s %s %d reached %s headquarter with %d elements and force %d\n&quot;</span>,<br>								b.<span class="hljs-built_in">get_name</span>(), x-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), x-&gt;<span class="hljs-built_in">get_seria</span>(), a.<span class="hljs-built_in">get_name</span>(),<br>								x-&gt;<span class="hljs-built_in">get_life</span>(), x-&gt;<span class="hljs-built_in">get_attack</span>());<br>							std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; temp.<span class="hljs-built_in">get_nowtime</span>();<br>							<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:10 %s headquarter was taken\n&quot;</span>, a.<span class="hljs-built_in">get_name</span>());<br>							a.<span class="hljs-built_in">Been_Token</span>();<br>						&#125;<br>						<span class="hljs-keyword">else</span><br>						&#123;<br>							<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:10 %s %s %d reached %s headquarter with %d elements and force %d\n&quot;</span>,<br>								a.<span class="hljs-built_in">get_name</span>(), x-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), x-&gt;<span class="hljs-built_in">get_seria</span>(), b.<span class="hljs-built_in">get_name</span>(),<br>								x-&gt;<span class="hljs-built_in">get_life</span>(), x-&gt;<span class="hljs-built_in">get_attack</span>());<br>							std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; temp.<span class="hljs-built_in">get_nowtime</span>();<br>							<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:10 %s headquarter was taken\n&quot;</span>, b.<span class="hljs-built_in">get_name</span>());<br>							b.<span class="hljs-built_in">Been_Token</span>();<br>						&#125;<br>					&#125;<br>				&#125;<br>			&#125;<br>			<span class="hljs-keyword">if</span> (!a.<span class="hljs-built_in">is_continue</span>() || !b.<span class="hljs-built_in">is_continue</span>())<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">if</span> (temp.<span class="hljs-built_in">get_nowtime</span>() * <span class="hljs-number">60</span> + <span class="hljs-number">10</span> &gt;= T)<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">1</span>; t &lt;= N; t++)<br>			&#123;<br>				<span class="hljs-keyword">if</span> (CityArr[t]-&gt;<span class="hljs-built_in">show_qwarriors</span>().<span class="hljs-built_in">size</span>() == <span class="hljs-number">2</span>)<br>				&#123;<br>					<span class="hljs-keyword">auto</span> x = CityArr[t]-&gt;<span class="hljs-built_in">show_qwarriors</span>();<br>					<span class="hljs-keyword">auto</span> x1 = x[<span class="hljs-number">0</span>];<br>					<span class="hljs-keyword">auto</span> x2 = x[<span class="hljs-number">1</span>];<br>					temp.<span class="hljs-built_in">rob_event</span>(x1, x2, t);<br>				&#125;<br>			&#125;<br>			<span class="hljs-keyword">if</span> (temp.<span class="hljs-built_in">get_nowtime</span>() * <span class="hljs-number">60</span> + <span class="hljs-number">35</span> &gt;= T)<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">auto</span> redheadquarterwarriors = a.<span class="hljs-built_in">get_warrios</span>();<br>			<span class="hljs-keyword">auto</span> blueheadquarterwarriors = b.<span class="hljs-built_in">get_warrios</span>();<br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">1</span>; t &lt;= N; t++)<br>			&#123;<br>				<span class="hljs-comment">//奇数红色先攻击，偶数蓝色先攻击</span><br>				<span class="hljs-keyword">if</span> (CityArr[t]-&gt;<span class="hljs-built_in">show_qwarriors</span>().<span class="hljs-built_in">size</span>() == <span class="hljs-number">2</span>)<br>				&#123;<br>					<span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>					<span class="hljs-keyword">auto</span> x = CityArr[t]-&gt;<span class="hljs-built_in">show_qwarriors</span>();<br>					<span class="hljs-keyword">auto</span> x1 = x[<span class="hljs-number">0</span>];<br>					<span class="hljs-keyword">auto</span> x2 = x[<span class="hljs-number">1</span>];<br>					<span class="hljs-comment">//让x1为红，x2为蓝</span><br>					<span class="hljs-keyword">if</span> (t % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>					&#123;<br>						<span class="hljs-keyword">if</span> (x1-&gt;<span class="hljs-built_in">get_color</span>() == <span class="hljs-string">&quot;blue&quot;</span>)<br>						&#123;<br>							std::<span class="hljs-built_in">swap</span>(x1, x2);<br>						&#125;<br>					&#125;<br>					<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>					&#123;<br>						<span class="hljs-keyword">if</span> (x1-&gt;<span class="hljs-built_in">get_color</span>() == <span class="hljs-string">&quot;red&quot;</span>)<br>						&#123;<br>							std::<span class="hljs-built_in">swap</span>(x1, x2);<br>						&#125;<br>					&#125;<br>					<span class="hljs-type">int</span> result = temp.<span class="hljs-built_in">fight_event</span>(x1, x2, t);<br>					<span class="hljs-keyword">if</span> (result == <span class="hljs-number">1</span>)	<span class="hljs-comment">//blue赢</span><br>					&#123;<br>						<span class="hljs-keyword">if</span> (x1-&gt;<span class="hljs-built_in">get_color</span>() == <span class="hljs-string">&quot;red&quot;</span>)	<span class="hljs-comment">//没交换</span><br>						&#123;<br>							<span class="hljs-built_in">Delete</span>(x1, a, b);<br>							CityArr[t]-&gt;<span class="hljs-built_in">city_delete</span>(x1);<br>							<span class="hljs-keyword">delete</span> x1;<br>						&#125;<br>						<span class="hljs-keyword">else</span><br>						&#123;<br>							<span class="hljs-built_in">Delete</span>(x2, a, b);<br>							CityArr[t]-&gt;<span class="hljs-built_in">city_delete</span>(x2);<br>							<span class="hljs-keyword">delete</span> x2;<br>						&#125;<br>					&#125;<br>					<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result == <span class="hljs-number">-1</span>)<br>					&#123;<br>						<span class="hljs-keyword">if</span> (x1-&gt;<span class="hljs-built_in">get_color</span>() == <span class="hljs-string">&quot;blue&quot;</span>)<br>						&#123;<br>							<span class="hljs-built_in">Delete</span>(x1, a, b);<br>							CityArr[t]-&gt;<span class="hljs-built_in">city_delete</span>(x1);<br>							<span class="hljs-keyword">delete</span> x1;<br>						&#125;<br>						<span class="hljs-keyword">else</span><br>						&#123;<br>							<span class="hljs-built_in">Delete</span>(x2, a, b);<br>							CityArr[t]-&gt;<span class="hljs-built_in">city_delete</span>(x2);<br>							<span class="hljs-keyword">delete</span> x2;<br>						&#125;<br>					&#125;<br>					<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result == <span class="hljs-number">2</span>)<br>					&#123;<br>						<span class="hljs-keyword">if</span> (x1-&gt;<span class="hljs-built_in">get_color</span>() == <span class="hljs-string">&quot;red&quot;</span>)<br>						&#123;<br>							a.<span class="hljs-built_in">delete_warrior</span>(x1);<br>							b.<span class="hljs-built_in">delete_warrior</span>(x2);<br>						&#125;<br>						<span class="hljs-keyword">else</span><br>						&#123;<br>							a.<span class="hljs-built_in">delete_warrior</span>(x2);<br>							b.<span class="hljs-built_in">delete_warrior</span>(x1);<br>						&#125;<br>						CityArr[t]-&gt;<span class="hljs-built_in">city_delete</span>(x1);<br>						CityArr[t]-&gt;<span class="hljs-built_in">city_delete</span>(x2);<br>						<span class="hljs-keyword">delete</span> x[<span class="hljs-number">1</span>];<br>						<span class="hljs-keyword">delete</span> x[<span class="hljs-number">0</span>];<br>					&#125;<br>				&#125;<br>			&#125;<br>			<span class="hljs-keyword">if</span> (temp.<span class="hljs-built_in">get_nowtime</span>() * <span class="hljs-number">60</span> + <span class="hljs-number">40</span> &gt;= T)<br>				<span class="hljs-keyword">break</span>;<br>			temp.<span class="hljs-built_in">headquarte_report</span>(a);<br>			temp.<span class="hljs-built_in">headquarte_report</span>(b);<br>			<span class="hljs-keyword">if</span> (temp.<span class="hljs-built_in">get_nowtime</span>() * <span class="hljs-number">60</span> + <span class="hljs-number">50</span> &gt;= T)<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-comment">//temp.warrior_report(a, b);</span><br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt;= N + <span class="hljs-number">1</span>; t++)<br>			&#123;<br>				<span class="hljs-keyword">auto</span> x = CityArr[t]-&gt;<span class="hljs-built_in">show_qwarriors</span>();<br>				<span class="hljs-keyword">if</span> (x.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>)<br>				&#123;<br>					temp.<span class="hljs-built_in">warriors_report</span>(x[<span class="hljs-number">0</span>]);<br>				&#125;<br>				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x.<span class="hljs-built_in">size</span>() == <span class="hljs-number">2</span>)<br>				&#123;<br>					<span class="hljs-keyword">if</span> (x[<span class="hljs-number">0</span>]-&gt;<span class="hljs-built_in">get_color</span>() == <span class="hljs-string">&quot;red&quot;</span>)<br>					&#123;<br>						temp.<span class="hljs-built_in">warriors_report</span>(x[<span class="hljs-number">0</span>]);<br>						temp.<span class="hljs-built_in">warriors_report</span>(x[<span class="hljs-number">1</span>]);<br>					&#125;<br>					<span class="hljs-keyword">else</span><br>					&#123;<br>						temp.<span class="hljs-built_in">warriors_report</span>(x[<span class="hljs-number">1</span>]);<br>						temp.<span class="hljs-built_in">warriors_report</span>(x[<span class="hljs-number">0</span>]);<br>					&#125;<br>				&#125;<br>			&#125;<br>			<span class="hljs-keyword">if</span> (temp.<span class="hljs-built_in">get_nowtime</span>() * <span class="hljs-number">60</span> + <span class="hljs-number">55</span> &gt;= T)<br>				<span class="hljs-keyword">break</span>;<br>			temp.<span class="hljs-built_in">add_nowtime</span>();<br>		&#125;<br>		++count;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>离散数学复习</title>
    <url>/2021/01/22/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h3><ul>
<li><p>零图：$E = ∅$，即只有顶点，没有边的图。</p>
</li>
<li><p>平凡图：只有一个顶点（也称$1$阶图）的零图。</p>
</li>
<li><p>悬挂顶点：度数为$1$的顶点；悬挂边：与悬挂顶点关联的边。</p>
</li>
<li><p>在无向图中，图的最大度：$∆(G)={d(v)|v\in V}$，其中$V$表示顶点集，$d(v)$表示顶点的度数，记住用$\Delta(G)$去表示最大度；同理图的最小度的定义易得，注意的是我们用$\delta(G)$表示图的最小度。另外无向图用$(v_n,v_m)$表示边。</p>
</li>
<li><p>在有向图中，$v$的入度$d^+(v)$，$v$的出度$d^-(v)$，$v$的度数$d(v) = d^+(v)+d^-(v)$，同时有向图还定义了出度、入度的最大度和最小度。有向图用$\langle v_n,v_m \rangle$表示边。</p>
</li>
<li><p>握手定理：图的所有顶点的度数之和等于边数的$2$倍，因为每条边都提供$2$度，所以度数之和一定是偶数。</p>
</li>
<li><p>度数列：$V={v_1,v_2,…v_n}$，$G$的度数列：$d(v_1),d(v_2),…,d(v_n)$。</p>
</li>
<li><p>简单图：既无平行边也无环的图称为简单图。其中平行边的条数称为重数。</p>
</li>
<li><p>完全图和正则图：无向完全图，记作$K_n$，边数为$n(n-1)/2$，有向完全图，边数为$n(n-1)$；$k-$正则图：每个顶点的度数均为$k$的无向简单图。</p>
</li>
<li><p>子图：生成子图：$V’ = V$且$G’\subseteq G$；$V’$的导出子图，以两端点都在$V’$中所有的边集的子图，记作$G[V’]$；$E’$的导出子图：以$E’$所以关联的顶点为顶点集的子图，记作$G[E’]$。</p>
</li>
<li><p>通路：$Γ = v_0e_1v_1e_2…e_lv_l$ ，称$Γ$为$v_0$到$v_l$的通路，$l$为通路的长度，若$v_0=v_l$则称$Γ $为回路。若通路（回路）中所有顶点（对于回路，$v_0=v_l$）各异，称此通路<strong>初级通路（回路）</strong>；若通路中所有的边各异，则称为简单通路。初级通路是简单通路，反之不然。</p>
</li>
<li><p>$Γ$的表示方法 ：用顶点和边交替序列、用边序列、简单图中用顶点序列。</p>
</li>
<li><p>连通分支：设$R$是$G$中顶点之间的连通关系，按$R$可将$V(G)$划分为$k$个等价类，记作$V_1,V_2,…,V_k$，由他们的导出子图$G[V_1],G[V_2],…,G[V_k]$称为$G$的连通分支。令$p(G)=k$表示$G$的连通分支数为$k$。</p>
</li>
<li><p>点割集与边割集：若$V’ \subset V$，$p(V-V’)&gt;p(V)$，且$\forall V’’ \subset V$，$p(V-V’’) = V$，则称$V’$为$G$的点割集，若点割集只有一个点，则称此顶点为割点；同理可以得到边割集的定义，若边割集只有一条边则称此边为割边或桥。</p>
</li>
<li><p>点连通度和边连通度：记$min{|V’| \space | V’$是$G$的点割集$}=\kappa(G)$，称为$G$的点连通度；记$min{|E’| \space|E’$是$G$的边割集$} = \lambda(G)$，称为$G$的边连通度。对于任意的无向图有$\kappa(G)\leq \lambda(G)\leq \delta(G)$ 。</p>
</li>
<li><p>二部图判别定理：无向图$G=\langle V,E\rangle$是二部图当且仅当$G$中无奇数长度的回路，记作$\langle V_1,V_2,E\rangle$。二部图还有一个非常重要的匹配问题，匹配就是$E’ \subseteq E$，且$E’$中的边互补相邻，注意极大匹配，最大匹配，完备匹配，完美匹配等问题。</p>
<span id="more"></span>
</li>
<li><p>完备匹配判定定理$(|V_1|\leq|V_2|) $：(Hall定理)，存在$V_1,V_2$的完备匹配当且仅当$V_1$中任意$k(1\leq k\leq |V_1|)$个顶点至少与$V_2$中$k$个顶点相邻；（t条件）：如果存在正整数$t$，使得$V_1$中每个顶点至少关联$t$条边，而$V_2$中的顶点至多关联$t$条边，则$G$中存在$V_1$到$V_2$的完备匹配。</p>
</li>
<li><p>无向图关联矩阵：$m<em>{ij}$为$v_i$与$e_j$的关联次数；无环有向图关联矩阵：$m</em>{ij}=-1,0,1$，$1$代表是起点，$-1$代表是终点；关联矩阵记为$M$。<br>有向图的邻接矩阵：$a<em>{i,j}$为以$v_i$为起点，$v_j$为终点的边的条数，记为$A$。$A^l$中元素表示长度为$l$的边的条数。<br>可达矩阵：$p</em>{ij} = 0,1$，$1$表示可达。</p>
</li>
<li><p>欧拉通路：经过所有顶点且每条边恰好且经过一次的通路。无向图具有欧拉回路当且仅当$G$是连通的且无奇度顶点，无向图具有欧拉通路当且仅当图是连通的且只有两个奇度顶点。有向图具有欧拉回路当且仅当$G$是连通的且每个顶点的出度等于入度，具有欧拉通路当且图中有一个顶点$d^—d^+ = 1$，有一个顶点$d^+-d^-=1$，其他顶点的出度等于入度。</p>
</li>
<li><p>哈密顿通路：经过图中所有顶点一次且仅一次的通路。<br>必要条件：若无向图是哈密顿图，则对于$V$的任意非空真子集$V’$，均有$p(V-V’)&lt;|V’|$,推论，有割点的图不是哈密顿图。<br>充分条件：若$G$是$n$阶无向图，$d(u)+d(v)\geq n-1$，$u,v$为$G$中任意不相邻点，则$G$中存在哈密顿通路；若$d(u)+d(v)\geq n$则$G$中存在哈密顿回路。</p>
</li>
<li><p>基本回路系统：设$T$是$n$阶$m$条边的无向连通图$G$的一棵生成树，设$e<em>1,e_2,…,e</em>{n-m+1}$为$T$的弦，$C<em>r(r=1,2,…,m-n+1)$为$T$添加弦$e_r$产生的$G$中由弦$e_r$和树枝构成的圈，称$C_r$为$G$的对应弦$e_r$基本回路或基本图，称${C_1.C_2,…,C</em>{m-n+1}}$为$G$对应$T$的基本回路系统，称$m-n+1$为$G$的圈秩，记作$ξ(G)$。</p>
</li>
<li><p>基本割集系统：设$T$是$n$阶的无向连通图$G$的一棵生成树，设$e<em>1,e_2,…,e</em>{n-1}$为$T$的树枝，$S<em>i(i=1,2,..,n-1)$为由树枝$e_i$和弦构成的割集。称${S_1,S_2,…,S</em>{n-1}}$为$G$对应$T$的基本割集系统，称$n-1$为$G$的割集秩，记作$η(G)$。</p>
</li>
<li><p>平面图与平面嵌入：如果能将图$G$中除顶点外边不相交地画在平面上，则称$G$是平面图，由这个图画出的无边相交的图称为$G$的平面嵌入，没有平面嵌入的图称为非平面图。</p>
</li>
<li><p>平面图的一些概念：无限面，用$R_0$表示，有限面，用$R_1, R_2, …, R_k$表示，面$R_i$的次数，$R$边界的长度，用$deg(R_i)$表示。<br>平面图各面的次数之和等于边数的$2$倍，一条边或者是$2$个面的公共边界，或者在一个面中出现两次，特别要注意的是这种出现两次的情况，这种边应该只会在无限面中出现，所以在写无限面的边界时也应该注意，这条边要写两次。</p>
</li>
<li><p>极大平面图：在简单平面中任意不相邻的顶点之间加一条新边所得的图为非平面图。极大平面是连通的，且设$G$为$n(\geq3)$阶简单平面图，$G$为极大平面图的充分必要条件是，$G$的每个面次数均为$3$。</p>
</li>
<li><p>欧拉公式：设$G$为$n$阶$m$条边$r$个面的连通平面图，则$n-m+r=2$。<br>欧拉公式的推论：设平面$G$中有$p(p\geq 2)$连通分支，则$n-m+r=p+1$</p>
</li>
<li><p>同胚与收缩：$G<em>1$与$G_2$同构，或经过反复插入或消去$2$度顶点后，称为同胚。收缩边称为收缩。<br>库拉图斯基定理：一个图是平面图当且仅当它既不包含与$K_5$同胚的<strong>子图</strong>，也不含与$K</em>{3,3}$同胚的子图，一个图是平面图当且仅当它既无可收缩为$K<em>5$的子图，也无可收缩为$K</em>{3,3}$的子图。</p>
</li>
<li><p>对偶图的性质：设$G^<em>$是连通图$G$的对偶图，$n^</em>,m^<em>,r^</em>$和$n,m,r$分别为$G^<em>,G$的顶点数，边数，面数，有$n^</em>=r,m<em>=m,r^</em>=n$，设$G^<em>$的顶点$v^</em>_i$位于$G$的面$R_i$中，则$d(v^*_i)=deg(R_i)$。</p>
</li>
</ul>
<h3 id="代数结构"><a href="#代数结构" class="headerlink" title="代数结构"></a>代数结构</h3><ul>
<li>积代数：设$V_1 = \langle S_1, \circ \rangle, V_2 =\langle S_2, <em>\rangle$，$V_1$与$V_2$的积代数$V=\langle S_1\times S_2,\cdot\rangle$，$\langle x_1, y_1 \rangle,\langle x_2,y_2\rangle \in S_1\times S_2$。$\langle x_1, y_1 \rangle\cdot \langle x_2,y_2\rangle$<br>$=&lt;x_1\circ x_2, y_1</em>y_2&gt;$。</li>
<li>设$G=<a>$是$n$阶循环群，则对$n$的每个正因子$d$，$G$恰好有一个$d$阶的子群。</li>
<li>设$G=<a>$是循环群，若$G$是无限循环群，则$G$只有两个生成元，即$a$和$a^{-1}$。若$G$是$n$阶循环群，则$G$有$\phi(n)$个生成元，对于任意小于$n$且与$n$互素的自然数$r$，$a^r$是$G$的生成元。</li>
<li>子环判别定理：设$R$是环，$S$是$R$得非空子集，若$\forall a, b \in S$，$a-b\in S$且$\forall a,b \in S，ab\in S$，则$S$是$R$的子环。</li>
<li>如果$R$既是交换环、含幺环、无零因子环，则称$R$是整环。</li>
<li>域：若$R$是整环，则对$R$中的每个元素(${0}$除外)，都有逆元，则称$R$是域。</li>
<li>格的定义：利用偏序集$\langle S, \preccurlyeq \rangle$，如果$\forall x, y \in S, {x,y}$都有最小上界和最大下界，则称$S$关于偏序$\preccurlyeq$做出一个格。$x$和$y$有$\vee, \wedge$两个运算，其中$\vee$表示最小上界，$\wedge$表示最大下届。其中运算$\vee, \wedge$还要满足交换律，结合律，幂等律，吸收律$a(a\vee b) = a,a(a\wedge b)=a$。</li>
<li>格的等价定义：设$\langle L,<em>,\cdot \rangle$是具有两个二元运算的代数系统，如果$</em>,\cdot$满足交换律，结合律，幂等律，吸收率，则称$\langle L,*,\cdot \rangle$是格。</li>
<li>判断一个偏序集是否构成格：可以判断每两个元素的最小上界跟最大下界是否唯一，如果不唯一则不构成格。</li>
<li>分配格：$L$是分配格当且仅当$L$不含与砖石格或者五角格同构的子格。或者当且仅当$\forall a,b,c \in L$有$(a\vee b = a\vee c 且a\wedge b=a\wedge c)$$\rightarrow (b=c)$。特别的小于$5$元的格，链都是分配格。</li>
<li>设$\langle L, \wedge,\vee,0,1\rangle$是有界格，$a\in L$, 若存在$b\in L$使得$a\vee b =1$和$a\wedge b=0$成立则称$b$是$a$的补元。若$L$是有界分配格，则若$L$中的元素存在补元，则只存在唯一的补元。若$L$中所有的元素都存在补元，则称$L$为有补格。</li>
<li>如果一个格是有补分配格，则称它为布尔格或者布尔代数，记作$\langle L, \wedge,\vee,0,1,’\rangle$，任何有限布尔代数的元素的个数都是$2^n$。有$(a’)’=a$，还有德摩根律。</li>
</ul>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
  </entry>
</search>
