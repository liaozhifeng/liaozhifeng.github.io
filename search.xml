<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>csapp实验一总结</title>
    <url>/2021/03/15/csapp%E5%AE%9E%E9%AA%8C%E4%B8%80%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>最近在看csapp，也做了一些实验，怕以后又忘记了，就记录一下，也能巩固知识。</p>
<p>实验一主要是关于位运算跟补码和浮点数的表示的。</p>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="整数部分"><a href="#整数部分" class="headerlink" title="整数部分"></a>整数部分</h4><ul>
<li><p><strong>biXor</strong>（用~和&amp;两个位运算去表示异或运算）</p>
<p>因为异或就是两位不同的为1，相同的为0嘛，所以我们可以先找出都是0和都为1的位，找出都为1的位可以直接用<code>x &amp; y</code>，找出都为0的位可以使用<code>~x &amp; ~y</code>，最后把这两个结果分别取反再<code>&amp;</code>一次就得到最后的结果。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * bitXor - x^y using only ~ and &amp; </span><br><span class="hljs-comment"> *   Example: bitXor(4, 5) = 1</span><br><span class="hljs-comment"> *   Legal ops: ~ &amp;</span><br><span class="hljs-comment"> *   Max ops: 14</span><br><span class="hljs-comment"> *   Rating: 1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bitXor</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-type">int</span> _x = ~x;<br>  <span class="hljs-type">int</span> _y = ~y;<br>  <span class="hljs-type">int</span> temp = _x &amp; _y;<br>  <span class="hljs-type">int</span> ans = ~temp &amp; (~(x &amp; y));<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>tmin</strong>（返回用补码表示的最小数）<br>我们知道补码的范围为$2^{n-1} … 2^{n-1}-1$，且$2^{n-1}$为最高位为1，其他都为$0$，所以我们只需要把$1$左移$3$1位，就能得到min。</p>
</li>
</ul>
  <span id="more"></span>
<p>  代码</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * tmin - return minimum two&#x27;s complement integer </span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 4</span><br><span class="hljs-comment"> *   Rating: 1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">tmin</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br><br>  <span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> ans = x &lt;&lt; <span class="hljs-number">31</span>;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
<ul>
<li><p><strong>isTmax</strong>（判断一个数是否为补码表示的最大值）<br>因为补码表示的最大值的二进制形式为$0x7fffffff$，它加$1$恰好为<strong>tmin</strong>，所以我们只需把<strong>tmin</strong>减一，就能得到<strong>max</strong>，然后再用$max-x$再取反，就能得到最后结果。这个题也解释了我当时大一刚学编程的困惑，而且学计组的时候我好像也没有注意到这个细节，我有问题哈哈。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span><br><span class="hljs-comment"> *     and 0 otherwise </span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | +</span><br><span class="hljs-comment"> *   Max ops: 10</span><br><span class="hljs-comment"> *   Rating: 1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isTmax</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> _x = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> ans = _x &lt;&lt; <span class="hljs-number">31</span>;<br>  <span class="hljs-type">int</span> _MAX = ans + (~_x + <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> !(_MAX - x);<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>allOddBits</strong>（所以奇数位的数字都为1）<br>首先先构造奇数位都为1，偶数位都为0的数字，我是用$0xaa$不断左移再加$0xaa$构造的，得到这个数后，用<code>x&amp;</code>这个数，加减去这个数，如果不为0，就说明奇数位不是全为0.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span><br><span class="hljs-comment"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span><br><span class="hljs-comment"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 12</span><br><span class="hljs-comment"> *   Rating: 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">allOddBits</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> per = <span class="hljs-number">0xaa</span>, ans = <span class="hljs-number">0xaa</span>;<br>  ans &lt;&lt;= <span class="hljs-number">8</span>;<br>  ans += per;<br>  ans &lt;&lt;= <span class="hljs-number">8</span>;<br>  ans += per;<br>  ans &lt;&lt;= <span class="hljs-number">8</span>;<br>  ans += per;<br>  <span class="hljs-keyword">return</span> !((ans &amp; x) - ans);<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>negate</strong>（返回一个数的相反数）<br>这个算是里面最简单的把，取反加1就能得到了。另外csapp里提到的，补码实际上是阿贝尔群，每个元素的逆元都是取反加1。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * negate - return -x </span><br><span class="hljs-comment"> *   Example: negate(1) = -1.</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 5</span><br><span class="hljs-comment"> *   Rating: 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">negate</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ans = ~x + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>isAsciiDigit</strong>（判断一个x是否满足$0x30 \leq x \leq 0x39$）<br>我的思路是先表示$0x30$和$0x39$，判断$x-0x30$的符号位为$0$且$0x39-x$的符号为$0$，如果满足就为真，否则为假。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//3</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#x27;0&#x27; to &#x27;9&#x27;)</span><br><span class="hljs-comment"> *   Example: isAsciiDigit(0x35) = 1.</span><br><span class="hljs-comment"> *            isAsciiDigit(0x3a) = 0.</span><br><span class="hljs-comment"> *            isAsciiDigit(0x05) = 0.</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 15</span><br><span class="hljs-comment"> *   Rating: 3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isAsciiDigit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> _min = <span class="hljs-number">0x30</span>;<br>  <span class="hljs-type">int</span> _max = <span class="hljs-number">0x39</span>;<br>  <span class="hljs-type">int</span> _x = ~_min + <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> ans1 = !((_x + x) &gt;&gt; <span class="hljs-number">31</span>);<br>  <span class="hljs-type">int</span> __x = ~x + <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> ans2 = !((__x + _max) &gt;&gt; <span class="hljs-number">31</span>);<br>  <span class="hljs-type">int</span> ans = ans1 &amp; ans2;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>conditional</strong>（实现三目运算符$ x\space? \space y:z$）<br>如果$x$非$0$就把$x$转换成$0xffffffff$，转换的方法可以借助对$x$取两次非，再取它的相反数；$x=0$时，也采用上述方法，$x$结果还是$0$，然后利用$~ 0xffffffff = 0x00000000$，就可以实现了。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * conditional - same as x ? y : z </span><br><span class="hljs-comment"> *   Example: conditional(2,4,5) = 4</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 16</span><br><span class="hljs-comment"> *   Rating: 3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">conditional</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span> </span>&#123;<br>  x = !!x;<br>  x = ~x + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> (x &amp; y) | (~x &amp; z);<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>isLessOrEqual</strong>（判断$x\leq y$是否成立）<br>如果$x$和$y$的符号不同，则判断$y-x$的符号位，如果$x$和$y$的符号位不同，则谁的符号位为$0$则，谁更大。利用<code>x_sign ^ y_sign</code>判断符号为是否相同，另外如果有多种情况的，一般都要用$|$运算符。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span><br><span class="hljs-comment"> *   Example: isLessOrEqual(4,5) = 1.</span><br><span class="hljs-comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 24</span><br><span class="hljs-comment"> *   Rating: 3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isLessOrEqual</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-type">int</span> _x = ~x + <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> ans = _x + y;<br>  <span class="hljs-type">int</span> sign = (ans &gt;&gt; <span class="hljs-number">31</span>) &amp; <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> x_sign = (x &gt;&gt; <span class="hljs-number">31</span>) &amp; <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> y_sign = (y &gt;&gt; <span class="hljs-number">31</span>) &amp; <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> ((x_sign ^ y_sign) &amp; ((!y_sign) &amp; x_sign)) | (!(x_sign ^ y_sign) &amp; (!sign));<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>logicalNeg</strong>（实现$! \space x$）<br>利用$0$的逆元仍为$0$，所以$0$与它的逆元的符号位都是0，而其他的数和它的逆元的符号位至少有一个是$1$。然后把符号位右移$31$位，如果符号位为$1$则为$0xffffffff$，符号位为$0$则为$0x00000000$，然后加$1$就是最终结果。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//4</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * logicalNeg - implement the ! operator, using all of </span><br><span class="hljs-comment"> *              the legal operators except !</span><br><span class="hljs-comment"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span><br><span class="hljs-comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *   Max ops: 12</span><br><span class="hljs-comment"> *   Rating: 4 </span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">logicalNeg</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> ((x | (~x + <span class="hljs-number">1</span>)) &gt;&gt; <span class="hljs-number">31</span>) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>howManyBits</strong>（一个数的补码最少需要几个bits去表示）<br>这个题我不会，主要是搞不懂为什么表示$-1$为什么只需要$1$位，这里有个代码来自，<a href="https://zhuanlan.zhihu.com/p/59534845">知乎用户</a>，可以参考下，如果有哪位朋友知道$-1$为什么只需一位可以联系我。</p>
<p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* howManyBits - return the minimum number of bits required to represent x in</span><br><span class="hljs-comment"> *             two&#x27;s compblement</span><br><span class="hljs-comment"> *  Examples: howManyBits(12) = 5</span><br><span class="hljs-comment"> *            howManyBits(298) = 10</span><br><span class="hljs-comment"> *            howManyBits(-5) = 4</span><br><span class="hljs-comment"> *            howManyBits(0)  = 1</span><br><span class="hljs-comment"> *            howManyBits(-1) = 1</span><br><span class="hljs-comment"> *            howManyBits(0x80000000) = 32</span><br><span class="hljs-comment"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="hljs-comment"> *  Max ops: 90</span><br><span class="hljs-comment"> *  Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">howManyBits</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> b16,b8,b4,b2,b1,b0;<br>  <span class="hljs-type">int</span> sign=x&gt;&gt;<span class="hljs-number">31</span>;<br>  x = (sign&amp;~x)|(~sign&amp;x);<span class="hljs-comment">//如果x为正则不变，否则按位取反（这样好找最高位为1的，原来是最高位为0的，这样也将符号位去掉了）</span><br><br><br><span class="hljs-comment">// 不断缩小范围</span><br>  b16 = !!(x&gt;&gt;<span class="hljs-number">16</span>)&lt;&lt;<span class="hljs-number">4</span>;<span class="hljs-comment">//高十六位是否有1</span><br>  x = x&gt;&gt;b16;<span class="hljs-comment">//如果有（至少需要16位），则将原数右移16位</span><br>  b8 = !!(x&gt;&gt;<span class="hljs-number">8</span>)&lt;&lt;<span class="hljs-number">3</span>;<span class="hljs-comment">//剩余位高8位是否有1</span><br>  x = x&gt;&gt;b8;<span class="hljs-comment">//如果有（至少需要16+8=24位），则右移8位</span><br>  b4 = !!(x&gt;&gt;<span class="hljs-number">4</span>)&lt;&lt;<span class="hljs-number">2</span>;<span class="hljs-comment">//同理</span><br>  x = x&gt;&gt;b4;<br>  b2 = !!(x&gt;&gt;<span class="hljs-number">2</span>)&lt;&lt;<span class="hljs-number">1</span>;<br>  x = x&gt;&gt;b2;<br>  b1 = !!(x&gt;&gt;<span class="hljs-number">1</span>);<br>  x = x&gt;&gt;b1;<br>  b0 = x;<br>  <span class="hljs-keyword">return</span> b16+b8+b4+b2+b1+b0+<span class="hljs-number">1</span>;<span class="hljs-comment">//+1表示加上符号位</span><br>&#125;<br></code></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="浮点数部分"><a href="#浮点数部分" class="headerlink" title="浮点数部分"></a>浮点数部分</h4><p>在说题目之前我想先来写一些浮点数表示的方法，以及一些注意事项。<br>现在计算机基本上都采用了IEEE754标准来表示浮点数，改标准把浮点数的表示为$V = (-1)^s <em> M </em> 2^E$这种形式，其中$s$称为符号位，$M$称为尾数，$E$称为阶码，对于单精度浮点数，它们在各自所在的位置以及位数为<br><img src="https://i.loli.net/2021/03/14/gkbXuMNx91pilHD.png" alt="image-20210314220405589"></p>
<p>这里我们也就只讨论单精度。<br>浮点数的表示分为4种情况，<img src="https://i.loli.net/2021/03/14/5pWPtB4Zcx8Akwv.png" alt="image-20210314220858815"></p>
<p>如果$exp \neq 0\space \&amp; \space exp \neq 255$ , 称为规格化，$E = exp - 127$，$M = 1.f$。<br>如果$exp==0$，这情况称为为规格化(Denormalized)，$E = -127(bias)，M = 0.f$，这里的处理与规格化处理是不同的，这种处理也是为了从非规格化处理到规格化处理转变的更加平滑，这里举个$exp$位数为$3$，$fraction$位数为$2$的转变例子。<br><img src="https://i.loli.net/2021/03/14/b7z41W39MvYle5t.png" alt="image-20210314233514394"></p>
<p>可以看到从最大的非规格化数$(\frac{7}{8})$过渡到最小的规格化数$\frac{8}{8}$是非常平滑的，这个特点在<strong>floatScale</strong>会利用到的。</p>
<ul>
<li><p><strong>floatScale</strong>（求$2*uf$）</p>
<p>先说一下简单的思路，因为$uf= (-1)^s<em> M </em>2^E$，所以要得到$2<em>uf$，最直白的做法是直接让$E = E + 1$，因为要使$M = 2</em>M$，不是那么简单的。<br>先提取出$exp$，如果$exp == 255$则会使为$NaN$，按照题目要求返回$uf$，<br>否则，再提取出$f$的符号位$sign$，如果$exp == 0$，表示这个数是未规格化的，$E = 1-bias$，$M = 0.f$，这个情况就是让$M = 2<em>M$，如果$M$有进位，$exp == 1$，$E = 1-bias$，$M = 1.f’$，此时$exp == exp$，且易证$2</em>0,f  = 1.f’$，所以实现了功能。<br>如果$exp$不是上面那两种情况，则我们可以用最简单的思路去解决，$exp = exp + 1$，如果$exp == 255$，所以溢出了，变成$infinity$，返回$infinity$，注意符号。如果不等于$255$则直接先把$uf$的$exp$置为$0$，然后再把新的$exp \space |$进去。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//float</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span><br><span class="hljs-comment"> *   floating point argument f.</span><br><span class="hljs-comment"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span><br><span class="hljs-comment"> *   they are to be interpreted as the bit-level representation of</span><br><span class="hljs-comment"> *   single-precision floating point values.</span><br><span class="hljs-comment"> *   When argument is NaN, return argument</span><br><span class="hljs-comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span><br><span class="hljs-comment"> *   Max ops: 30</span><br><span class="hljs-comment"> *   Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-title">floatScale2</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> uf)</span> </span>&#123;<br>  <span class="hljs-type">int</span> exp = (uf &amp; <span class="hljs-number">0x7f800000</span>) &gt;&gt; <span class="hljs-number">23</span>;<br>  <span class="hljs-type">int</span> sign = uf &amp; (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">31</span>);<br>  <span class="hljs-keyword">if</span>(exp == <span class="hljs-number">255</span>)  <span class="hljs-keyword">return</span> uf;<br>  <span class="hljs-keyword">if</span>(exp == <span class="hljs-number">0</span>)  <span class="hljs-keyword">return</span> (uf&lt;&lt;<span class="hljs-number">1</span>) | sign;<br>  exp++;<br>  <span class="hljs-keyword">if</span>(exp == <span class="hljs-number">255</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">0x7f800000</span> | sign;<br>  <span class="hljs-keyword">else</span>  <span class="hljs-built_in">return</span> (uf &amp; <span class="hljs-number">0x807fffff</span>) | (exp &lt;&lt; <span class="hljs-number">23</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>floatFloat2Int</strong>（实现把<code>float</code>转换成<code>int</code>)</p>
<p>首先要先提取出<code>float</code>的<code>exp</code>和<code>frac</code>的值，注意这里的<code>frac</code>要在前面添上$1$，因为对于<code>int_32</code>，其表示范围为$-2^{32} … 2^{32} -1$，所以如果$exp - 127 &gt;31$，则说明会发生溢出，根据题目要求返回$infinity$，如果$exp - 127&lt;0 \space | \ exp_frac ==0$返回$0$。<br>否则对根据$exp$对$frac$进行左移或者右移，再判断$frac$的符号是否与原来的<code>float</code>相同，相同返回$frac$，如果发生了正溢出（原来为正的，变成负的了）则返回$infinity$，如果发生负溢出，则返回相反数，两种溢出的处理方式不同，主要是因为，发生正溢出，说明<code>int</code>有一位被当成符号位了，也就是说这个<code>int</code>的真值部分就需要$32$位，所以超过了表示的范围。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * floatFloat2Int - Return bit-level equivalent of expression (int) f</span><br><span class="hljs-comment"> *   for floating point argument f.</span><br><span class="hljs-comment"> *   Argument is passed as unsigned int, but</span><br><span class="hljs-comment"> *   it is to be interpreted as the bit-level representation of a</span><br><span class="hljs-comment"> *   single-precision floating point value.</span><br><span class="hljs-comment"> *   Anything out of range (including NaN and infinity) should return</span><br><span class="hljs-comment"> *   0x80000000u.</span><br><span class="hljs-comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span><br><span class="hljs-comment"> *   Max ops: 30</span><br><span class="hljs-comment"> *   Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">floatFloat2Int</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> uf)</span> </span>&#123;<br>  <span class="hljs-type">int</span> exp = ((uf &amp; <span class="hljs-number">0x7f800000</span>) &gt;&gt; <span class="hljs-number">23</span> )- <span class="hljs-number">127</span>;<br>  <span class="hljs-type">int</span> frac = (uf &amp; <span class="hljs-number">0x007fffff</span>) | <span class="hljs-number">0x00800000</span>;<br><br>  <span class="hljs-keyword">if</span> (!(uf &amp; <span class="hljs-number">0x7fffffff</span>))  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (exp &gt; <span class="hljs-number">31</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">0x80000000</span>;<br>  <span class="hljs-keyword">if</span>(exp &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span>(exp &lt; <span class="hljs-number">23</span>)<br>    frac = frac &gt;&gt; (<span class="hljs-number">23</span> - exp);<br>  <span class="hljs-keyword">else</span>  frac = frac &lt;&lt; (exp - <span class="hljs-number">23</span>);<br><br>  <span class="hljs-type">int</span> sign = uf &gt;&gt; <span class="hljs-number">31</span>;<br>  <span class="hljs-keyword">if</span>(!((frac&gt;&gt;<span class="hljs-number">31</span>) ^ sign))  <span class="hljs-keyword">return</span> frac;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(frac&gt;&gt;<span class="hljs-number">31</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">0x80000000</span>;<br>  <span class="hljs-keyword">else</span>  <span class="hljs-keyword">return</span> ~frac + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>floatPower2</strong>（返回$2.0^x$）<br>因为$V=(-1)^{sign}<em>M</em>2^E$，要得到$2.0^x$我们只需要改变$E$的值，也就是改变$exp$的值，而$M=0$，如果$exp\geq255$，返回$+infinity(0x7f800000)$，如果$exp\leq0$返回$0$，否则返回$exp&lt;&lt;23$。<br>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</span><br><span class="hljs-comment"> *   (2.0 raised to the power x) for any 32-bit integer x.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   The unsigned value that is returned should have the identical bit</span><br><span class="hljs-comment"> *   representation as the single-precision floating-point number 2.0^x.</span><br><span class="hljs-comment"> *   If the result is too small to be represented as a denorm, return</span><br><span class="hljs-comment"> *   0. If too large, return +INF.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while </span><br><span class="hljs-comment"> *   Max ops: 30 </span><br><span class="hljs-comment"> *   Rating: 4</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-title">floatPower2</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> exp = x + <span class="hljs-number">127</span>;<br>  <span class="hljs-type">int</span> INF = <span class="hljs-number">0xff</span>&lt;&lt;<span class="hljs-number">23</span>;<br>  <span class="hljs-keyword">if</span>(exp &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span>(exp &gt;= <span class="hljs-number">255</span>)  <span class="hljs-keyword">return</span> INF;   <br>  <span class="hljs-keyword">return</span> exp &lt;&lt; <span class="hljs-number">23</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>java解耦合的学习记录</title>
    <url>/2021/05/29/java%E8%A7%A3%E8%80%A6%E5%90%88%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>程序的耦合主要有类之间的依赖和程序间的依赖，以jdbc的使用做为一个例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.注册驱动</span><br>DriverManager.registerDriver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.mysql.cj.jdbc.Driver());<br><span class="hljs-comment">//2.获取连接</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/eesy?		                 serverTimezone=GMT&amp;useSSL=false&quot;</span>,<br>                <span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br><span class="hljs-comment">//3.获取操作数据库的预处理对象</span><br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(<span class="hljs-string">&quot;select * from account&quot;</span>);<br><span class="hljs-comment">//4.执行SQL,得到结果集</span><br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> preparedStatement.executeQuery();<br><span class="hljs-comment">//5.遍历结果集</span><br><span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>    System.out.println(resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>));<br>&#125;<br><span class="hljs-comment">//6.释放资源</span><br>resultSet.close();<br>preparedStatement.close();<br>connection.close();<br></code></pre></td></tr></table></figure>
<p>这里<code>Driver()</code>使用的是mysql，这段代码高度高度依赖于<code>com.mysql.cj.jdbc.Driver</code>，如果将来<code>com.mysql.cj.jdbc.Driver</code>出现了问题，那么这段代码就发生错误，或者当我们需要更改需求时，比如如果程序间的耦合度太高，要改的代码也就更多。</p>
<p>解耦的目的是降低程序间的依赖关系，主要是程序尽量模块化，使程序尽量做到编译期不依赖，运行时才依赖。</p>
<p>解耦的一种思路：第一步，使用反射来创建对象，而不是new；第二步，通过读取配置文件来获取要创建的对象全限定类名，也就是采用工厂设计模式。举一个service层和dao层的例子，采用工厂模式前</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xinyu.dao;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 账户的持久层接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IAccountDao</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAccount</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.xinyu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.xinyu.dao.IAccountDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAccountDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAccount</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;保存了账户&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.xinyu.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IAccountService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAccount</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.xinyu.service.impl;<br><br><span class="hljs-keyword">import</span> com.xinyu.dao.IAccountDao;<br><span class="hljs-keyword">import</span> com.xinyu.dao.impl.AccountDaoImpl;<br><span class="hljs-keyword">import</span> com.xinyu.factory.BeanFactory;<br><span class="hljs-keyword">import</span> com.xinyu.service.IAccountService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 账户业务层实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAccountService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">IAccountDao</span> <span class="hljs-variable">accountDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountDaoImpl</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAccount</span><span class="hljs-params">()</span> &#123;<br>        accountDao.saveAccount();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>可以看到我们在AccoutServiceImpl直接new了一个AccoutDaoImpl对象，也就是说AccountServiceImpl会高度依赖于AccoutDaoImpl，它们之间耦合度很高。所以我们编写一个工厂类<code>BeanFactory</code>在类里利用反射创建对象，并创建一个配置文件，在里面配置对象名与全限定类名的映射关系。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xinyu.factory;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanFactory</span> &#123;<br>    <span class="hljs-comment">//定义一个Properties对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Properties properties;<br>    <span class="hljs-comment">//使用静态代码块为Properties对象赋值</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//实例化对象</span><br>            properties = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            <span class="hljs-comment">//获取properties文件的流对象</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> BeanFactory.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;bean.properties&quot;</span>);<br>            properties.load(in);<br>         &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionInInitializerError</span>(<span class="hljs-string">&quot;初始化properties失败&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据bean的名称获取bean对象，这种方式获取的bean是多例的，既同一个类型的多个bean是不同的</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beanName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String beanName)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">beanPath</span> <span class="hljs-operator">=</span> properties.getProperty(beanName);<br>            <span class="hljs-comment">//使用了反射</span><br>            bean = Class.forName(beanPath).getDeclaredConstructor().newInstance();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>bean.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">accountDao</span> = <span class="hljs-string">com.xinyu.dao.impl.AccountDaoImpl</span><br></code></pre></td></tr></table></figure>
<p>然后我们就可以把<code>AccountServiceImpl</code>的代码改为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xinyu.service.impl;<br><br><span class="hljs-keyword">import</span> com.xinyu.dao.IAccountDao;<br><span class="hljs-keyword">import</span> com.xinyu.dao.impl.AccountDaoImpl;<br><span class="hljs-keyword">import</span> com.xinyu.factory.BeanFactory;<br><span class="hljs-keyword">import</span> com.xinyu.service.IAccountService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 账户业务层实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAccountService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">IAccountDao</span> <span class="hljs-variable">accountDao</span> <span class="hljs-operator">=</span> (IAccountDao) BeanFactory.getBean(<span class="hljs-string">&quot;accountDao&quot;</span>);<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAccount</span><span class="hljs-params">()</span> &#123;<br>        accountDao.saveAccount();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>但是以这种方式创建工厂也会带来一点问题，因为我们在<code>getBean</code>方法中采用了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">bean = Class.forName(beanPath).getDeclaredConstructor().newInstance();<br></code></pre></td></tr></table></figure>
<p>去创建bean，所以假设我们在<code>AccountServiceImpl</code>里需要多个<code>IAccountDao</code>，那么这多个<code>IAccountDao</code>也是不同的（多例模式），如果我们想要提高利用率，也就是用单例模式，这时就需要容器这个概念了。我们可以在<code>BeanFactory</code>中定义一个Map，用来存储bean, 并在static执行时，就通过读取.properties里的所有映射关系，将bean初始化后存入Map中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xinyu.factory;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanFactory</span> &#123;<br>    <span class="hljs-comment">//定义一个Properties对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Properties properties;<br>    <span class="hljs-comment">//bean容器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; beans;<br>    <span class="hljs-comment">//使用静态代码块为Properties对象赋值</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//实例化对象</span><br>            properties = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            <span class="hljs-comment">//获取properties文件的流对象</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> BeanFactory.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;bean.properties&quot;</span>);<br>            properties.load(in);<br><br>            <span class="hljs-comment">//在static中一开始就对所有的bean初始化，并存放在map中，然后获取bean时就直接返回这里初始化的对象就好</span><br>            <span class="hljs-comment">//这种方式是单例模式，既同个类型的多个对象是同一个</span><br>            beans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            Enumeration&lt;Object&gt; keys = properties.keys();<br>            <span class="hljs-keyword">while</span> (keys.hasMoreElements()) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keys.nextElement().toString();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">beanPath</span> <span class="hljs-operator">=</span> properties.getProperty(key);<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Class.forName(beanPath).getConstructor().newInstance();<br>                beans.put(key, value);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionInInitializerError</span>(<span class="hljs-string">&quot;初始化properties失败&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据bean的名称获取bean对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beanName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String beanName)</span> &#123;<br>        <span class="hljs-keyword">return</span> beans.get(beanName);<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure>
<p>通过这种方式就能使创建的bean是单例的了。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>最近的一些事情与想法</title>
    <url>/2020/10/17/some-puzzles-in-these-day/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7735b879e25e91fa00e0d0bb92df24d495e9a22ec5a770a63eb92e78c000f93c">dc539cac4ab894d5e83acb08e14db5a37910aac42c87a9297688307e645ec0e274a1b13d452ed1c0aaff93a9c74375ec43518e548ec4917cf8d1d53f02418d9e82afd5d81d55eeb85260fd8eb0a4d9c8af608ec3c690c59a2e357bf2eb84afc2afd7f7bcee0c9faedacba14f62ae6633573c46981a964260763ca38544a3c69e5cfd1f8fa62aa84c846d2837dbcfdf8a73d9c0f1fc1b4e0c9d6cea1deb28c3617fee88fe3b50aecb4bd349ff7b4f5d4a533959d972981fecec0391e0487599faf8361ee1c535b8d2076dc3562a2c7cf5525e38e8227a44d3859a26e5663abb9d833bc2881f84a8665a39a79b127efb0939d76d3c85175728d19c5d78638a6ca58dc4285fee2a40c4198360e9611987315065c5ab9805c97251ce6bf468da8d37244cd8eb313f60e5c28cb441080f4cdb02b99f15bf8231335b557e36e38c9535e48011bcf187a29b811af1ff18c17acfc7c25dd492dc8dfb3f6b9762508c4ecd52ab4a2dc1090c1849a9cb347bb947fdea7b35f887f3f7299d06170caf7d29787bfd283839db158869c6184bb67b4c6e75fad7a611354487039c222dba5515e73127354c7ac54072b80d1d6b001ff584fa9ac6f36d003ce7474f7179579687cd3916cbb670c5c30c47d40007aa2f4ca7adcf410fd09c287cef8cc092144da83d70ccd40860291c39f2658751d4666e53de2f6faa1b855dca14c13086662ed22a774856da6792fb56214704089a582bceb000cec867453aee98bcb6f55d4ce6b5d179c75acf7fb9077c4777d6d3dd79a979df9c3aeaa4416abe5a7443efef36eed9b1b0dfbcf99fccb1e4102c77b1459c3b30eefc1c56521ba73ba48d2e46120da95d809282ffefa63cd9b493e7c90178b9039a9a4391b66429eda1b95eedb45baee30be0789d57cecf8fd6fd618e1d32a4dbe9c4872b0d6f6514db41cc5b72bdcbdf4394eee0f9bc132af46e384f64300b23cfcc1390a95bd2569621c2a4f54a11a8981ed7e73ae01c7e9be6f25450afb41607dd39bd2e3d5f033ee2b9cb86a0ef8b506bf17c6573417b8c76fa577b8d24d1cb7198f4e5542ddd5c12be733293406e33a31939c63e2447dc2978980050d20d09a982787e90fd9aa1e45459b894b84c622ce9fd8fe7e7d08bcd22f4cff85222ba4e6f38a08c80c212b8b01af83b912a27d6d1014d4cc9f14d1afcd76722d38815e37d5a1f22a781a466e307b03a9cd03f135e5224be8e8920767e1a6ebdb3d85c2ed025b022c29f7ca301ff2a0a10edf5b3aee5f1eaf60131d23f8d37e9e7b9bbcba1863b424a662ec73b910444d5fec961c2af5b222d3ac485cb9010668ba5a9be47a6951c97b8e107570460314f16ee4c51cdd72f35f557189d1b5b2d7419a47071c4e5f8cc21a67a5682c242caa7a845030fa54c515800ab67819acafe83f197678eea6a54c06ac555905cd07955e11cad5bb0d4d0cff593940c2783504f8ce19f91ec830496b3ec935803612f1743f3e57e40efb8a5fb6f918fc0835ed73e52b88c5a2d1ebfab0830ac46099b3d2053448d97cd778036cd9f78e7a7ece96af301e5385650c3a4b08993ba51b6e681993971682ed504393335bc8625c47340589c765a47aeb1fa5635f02ba3f8c059ac29e801529ab966e384be6bc77f953e699fab01b68bacc57eecb12805510fe0e1198475b8c20dcac8752e68a41a26be891eb2465b15aa06eb4670a125cb6e571cadcef3cea8f035d8dd07134ae76fb70ee09cb948b0613a23626cf481d8e53cf801ee51e27916e6aa158327d01fd0fdb9107d5a480bb6fa520184bc39170049cbe84a7fa7db16b5cd1f692ccca05ce6547e556aad37ae06ec45fd85a4e3d0465fe84f03cfc9da04fed3777031fdb303b3e6eeca1ec7ccdf3e2803cf42825b45b59053e6a730cbd748672f6832306e88088de6dabfc82c8d351fe203b4e060031e93448a3ef5aa10b80ebde1335cbf46463a530603afc474737964cddc69f01c93d4e8a35e6daeb2f3132ac2968ac0c8e315661fb864875215fcdc65966430f4ed7a184be97d6900d477b808d9127a8e68c30e6814a209da78b3180f84517a72b8e5a4b6929dbd2f92018f7c4e46407a0b35084920c1f962514abaf8ec49b3dbc8055a7380b8eca7721aff1d745e060e2e11ecde97da02838067ce046e51d471e0f59c781528e78346ad2824f8d2db27d97b47b9762246af7ff4978b650db89023ae7a00c54d5a5c96590bee272e9464e9dcbb5782414955ed130aa8269b9a2b73fabf81aa6dd7a26fa5280cc09a4082b4ad7564ffee87558c8a9007dc4dbd55ddc173975c20ec7ea81f9db7b76e862ac9e0e6d2feee9e7163a94e7ece8c23868e9f72ad1080b427b7e5698b9c912c63c0b527d1fda20bda21c104e35a9fbe7d71f36e03f34ff58b00039b48d68cb10c55dc40459c70bf83e63bd1e29a2d23bcbb4dcdb75943aea73a4588c3922f41c6705ea9c0521cc356ecc8ac0204</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>杂想</category>
      </categories>
  </entry>
  <entry>
    <title>一些想法</title>
    <url>/2020/08/16/%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0134af86ff2626fa2c8c7851022654ef3765261824fa0410bf45a8b7568cb5dc">dc539cac4ab894d5e83acb08e14db5a30e8a3c95e06d6034ba80ad782b33a51886cad32a6f8a1dfa1e4a6bc34c9d4018abd7e32e330cd7be6be92fa8b78f82393b5a7b007dc491206f3a6ca368ac1cffa1ca1ab665448488bd8436916c59f9bb79eba4fc3332a4cd09e6fac0bcbe97af4a67dcd1492b4030970c9901dbe525881726cdc7e317f4ad5a5fbdfd49d0667be07f6962d306e5711713b5410a45d3fb23c2eedeefbfd95ba85a2966dc71b40be4ce1c332da796f4157b7827ec0da797bfdd1ff73514fd933e35cd8fc027af85d52a79553f56b392e392c44506ad997b27c1c1a706cc8a1d6de376dbad56801a6a2a74c20c58d3fdd5078cf1b102d0ab1dfed6845747c47eecec1ddb00a56a591978bd6f9979934c8cfc899ffe8064e768b3c2c687d99bf87b7c3e2abbd30b4bf43a0361eddb84c0c8dccfbc0cae53e83d2ec843adcde77f902ba6386a84da38b93f7c628b412ef2e24e206eb6cc2c42c8dc5640f7bc167a6d70b2f8a9dd3a1b251f3524a00994f0327947637ff61e861d596574804475a380798133162fce58d06a8041db7418ca551db20d87de994eb1ca9a8be8d9a8a4b8665a3c7a483bb058c6103aa6253ed8df6b7b835404a1b83e767934ca35c18b475f7fd318b7b9b971f8ba041662c67f3ebf6cb7344f4976275c3b1e8d27ae8781647e54a32ed1e69001efdf3334d2c1f6b452bfae3c5e2f124f8eb90f39f8e78b585c1130c68a63190799ef0ec2853caaa5cba60672e88f344b3799a983718d569fb883728d2ee961f0a9e20764ddddf17b38a10174b64044e827275aa30b9279876c696f1724dd3a230e8f9e56ec3107414e03809145533d7b21b54b33ed6b86343c1fbaf17dbc233e41c1003dc3cd454a5f4122b547bfd8d1289487f1f8146d946de356774c7e1cde185d19a56ec5be526e1f18f7c0022ee1588357124943ecc8102eefd3449f61f6a8360ee8968945bbc5810602c83358e197aa4355a3735b254a8c02fa8a9074367e24d165584a9ff9a118eaa5ce20c48ff875519265a101fc357421608f91316bb509b954298aa6016b45d4913ba9d4076ed550ce367421efc0b3d8611af53e010283b06331eacd3b218d966147a24d891cc08219f546a5c3fcfa1b0598b6bb13a85d9776ecee618d43165eca1fa3a3ea2fd22ac07ab09856ce23139afc8fc19aec1a7f3b188323261cef6e7a972adb4c5fbcaa6248c0855f07acb6f292a415b7bc7bcda4466343c23795afe8a179cc22f13cd606ed5485154661ced1c8fec3a668e66703638fbd6fee2dd2c7bb4ebfb9b883576d6859f7a804ea09bef00eb3332721cc2acb3b6bb06be8d5421db9ea98b833207a572932891367a51688c27967dec3a76dabd22df3f1d3d9652f998de9c817c602f5877005c8f43f706f2353f60beffbb2458bc7762378ac1b595eea34c15ce7e37c6de4e38a3237879742ea524d90da7713cc274e0bfc40ae200abec1388735a137763c0ee217626742df368ae9667733915e74431efe986f0b09d250ab06b08f910b962b094ccdc281f0dd26fb93b8d46f03d4d99fffadca53956fd95a3589d80b2c7c15990087ac7e63907cfb22ceb7ed858278a6a6035070fe28ab1cd66806fc69edb55fc99b5715b702deeb33402fe6beb8342d26cf644317764094461c49ab289fcdeb7baf57942df8f7cbb2fac18d04877557f679fb94bf75bd25515f9f8037b6b24d1a0315cc05695204e1786f5bd99d478a6d10bf26d12de18f19c1f4aa432cd69befbf412cc0d4e86d42c35d41e26dd14e85a947f96e51a50a7f7e1af358963e6cb6df85aa32e2bb810d508f0d6728b40422e88ef6cf6732e25fd68b24bea2e12b498a54a671da4b528dd07505b729e92c730f629356f1238cd7e4c83fa12d6114848b9df8a7a78fb043014224e5f1f0277a525219b1b764385c037c44b142cab802eb557085f40bee600096fea097e6b97886b70313623a4bc2a0425bcbc847e23ad32290f99800f940420ad7ef215eed434af542f8bc7ec6fb8beed4c448e61be911d1e6e2ecc45b3bfbbabee1ba1153ef0f0cea3a12912a3a5a804f505643ca0f09660fc8de37dac4e508660f33dce2033f8de19febb4766d05d4092df3fa374af41bb89396ad38bb9ebfec6269c913d235061fe1d3979d2d09f8ec167c85581c44d657c3e88c44744099aec3c4df5c645b7a4ddf1ee776aedf851b4ec1b2dc6824e010092c4dc598373cb88e668df5f65daf4d8dfabdabc798cacf30b9359afaf1579b9a92b6090de8ab140618bbb42cd4933a0de9f9779bd3d55b01163ff7b3df60c989774e27d2da166f822a3693af255a4cb7c997fac7b56d018929aca59f02a5a3b8d368678f8cd89c2dcb2b439f54dc81c6604cd0b7b10c83ddc3f1f71891cedca345addc7a7d7f3f4fc05912daff4bcf0bdd55c481ea20f5ac45ff9421ff43f82b1631f648cde6ebf3dfcfa219f9e19134654603824ff73c86ddeb2a02c72b74c53dd86668e70f8ddd02b081c5ad765761dab692b6fee266c0f64d27916d61ac7f0927b8fb21720187469ae70fd5d8ea3c57149cf9e4a5601cec0164bdb765feec31e2ad5e130fe0e9f62944239f46a1ee068c453c0569c45e41b50cbc3ec674abbd4ff3480d4b9aeb7572eaef510631fbed94dd0d6dc4deae55245dc14139fe36c26049126bc9fa555faa4401f3e18fe55268ff113f2a971cece037930d13c32b89e7da13ac86e1dbe8871b685b1070446a944b49dace92a64e76ee64be3490422b32d24604f9a41e4996d7e6d4d630d8d45663ad13d1a4a48fc2b000a55dff25e4bad9ce32bbfde3a50664ccbb9808c686587c2bfbfa966ed2280e54ff37ba023d00208cc6e343f9610d8eee460256b2707f5a203d1d8fa86107178e32f99c89e7877f681ea21e7490216c4ef8b7c941143a9ad30dc7c9809ce4ae58a144848e66128fe07673c1722df4a192ce381abf05ed69253a6dcf6c1685c3a937373035c5f6f4503ed898311178fc066558c6bc134e52b1746626c22567b02e4cf59dc860e30b51e5410c74c9a5b0246e21917d5a15249a64232a661cad165527cb69760c0107c760e75abdc8a9587eb38abc60653060b9c897d403397cd802d4d55e96bdd3ceed3d0186056d2854455b3504ccd600008dd86699eb439d567c9d626805c7ad2252e6aca01484615266ec825c378908ce8cbaed3cce855de1549e2ba2a4a0bf13a696e5019f99882337f081b4922dee742b7a7cba6bf85d1749a89faf5e54f4d8479dd9447f64b9c61a101396f98c35d8650b226510f96efbdd48e53cc624f4616daa648daa5a5b00395ec81e2630ae6d4dad515be6ba2961e8182f3f2f88405d07cc30148ed2f21ed78fcd8f1cd9ccb126a7d7712760530e4af709f73b79bc7535117c0b023baeeb3392934d6a79b8bbe43d23b748417f79520de42f3319d8c2a9117e6826e4393be0ca6c28fbe21c5e87b221022a7f5bda4962bc41b7fc76dd657c9b45999d0f85581dec4e115d1b17247c64e6f96e1bd38e28c5a5fc3b685f7f61beb290ac3e8ad6fb559667a4b2701e0be313acc2db91758c997e1161e6b9e39cfeca1b42f80eeb574dd55ee2134c1c3a790b4781ce960af29daaa85f7b71970ae6ad9b9c7c0640b57ae6d129ec548c656a9af7267700309be8e426847117ce52fea86668f7ecc499b91182f1aa5034f6fbbb60c8c94409d952333dfed728779ccfa0b7472f338930de10c36e8665330e0f1d59af17c16a4d5e60e1b5d5e33dbf5da5867f5afbe9f05189c17f6b90539399a9105f5006f9fe4bddfac894f40ae1d7802ede8a6bfe715bfcb5b356bfae8ecc4bb7ba852468d56dd15afd7ee0f3aecbb99676f99475b6d065b5d8efdec94571ca8bb796b97afc517c1fc6497e2399f3678dc13ff7ae4eceba4adafbe2ae6fdfb5fe23650f66eef4255fd37665b2f2f76900bd5f473442202fa5e8d11ce99e481c18e9633d613202916966d259a6f103f83480fd4a2ffb9a5f85e9735ce5edf70758d6074e2e9cb65fa1c3c8eb85c029a8d4cc3d9b356a8a375f3ebb596c6d3858f0d877cad4588692ea31b67283dc5a8011644d49e90e3202a8c5bfec8048c709ce3b887befdc6d72807ee954d587e6e4d485a5d00a7c22bbc1398436640d43ba14e9fd320f951d83fcf63dc2ca678bc4905b0f8e7e8aac530eeb942a371fc052e57b32f928eee99f458fa44a5c0d32f3fe303608e7aa03c2fafbae4ce6149d616926856b8bbaa73e986f2e5326076463479cd2d1c9d3620f02ec307790f2a3d5a9e31c127b24e362d5990b618af55d890e7e92623a74261e75532512f0717571777f9ffb009c31a363a214148eeecc79709ec332908d74aac2948202513f1e9cd71a81078736d142df8aabb605b3f2b36f988c8fb75fdb8a1d393fa28f8b8da83119799afd92163244436fdadc6de466c8eb6837ed58e2273936cb5d3b91c3fe7d7b422f2194e73f9813d0cb3eac7d6f2c478dcd46152d5d5850271615c95f8043589ce5d02f1054933f96c857f8c384333bda9d51365104cf957ed4f63969eb1e0320200c7cadfe46ab358f581dfca24849ff9138b9424e784d746949aa4d70ef38145a45182b802da0e697eef7d26c6a56097be8a2e1d82a66abd2639a7e8177cefa0f8604cf2fda5e2a947d7f1b1bfb9ad7e88dacdff44be45a1424e0c37fa8013dc0f02820f97c01dadfce9aed05609c741eb64b4653276dd0fb9c60756ae7a0dc81cbd2549ffa75dc1ace8340a644005aa9623cafe785d0debb3b59eaff3ef6b9d22a85f41d7915bd6b0da0474cad8ad4a703bd340c67c05691cc18bea4b33e892d796127652ee392531c8dff21d2f2598b3d7e9e0b2da0811ae83b00e3c8d747bab35fe3d1ed6d82b43a6b89b2fb9c483916cd31cfb00eab97a5f6331751d0115a2d12077c61d46a36eda704152c414c7c8996153c3f994fc260f5e842e802a259efb9ec321981feb0cb542dea37446e4bda1bd9903e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>杂想</category>
      </categories>
  </entry>
  <entry>
    <title>大一总结以及未来的规划</title>
    <url>/2020/07/20/%E5%A4%A7%E4%B8%80%E6%80%BB%E7%BB%93%E4%BB%A5%E5%8F%8A%E6%9C%AA%E6%9D%A5%E7%9A%84%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p>时间过的真是很快，特别是在家混了一个学期，大一就这样过去了，也是很久没有写博客了，趁着最近心情不是很好 <del>打游戏总是输</del> ，就写一下大一学了什么吧。</p>
<span id="more"></span>
<h3 id="入学"><a href="#入学" class="headerlink" title="入学"></a>入学</h3><p>暑期时，我有看了<strong>一点</strong>翁恺老师的c语言教程，入学时还算有点基础吧（只是看到for循环好像）。军训结束后<del>想起来军训过的还是很开心的，虽然太阳很大</del>，我们学院的王立斌老师来介绍他组织的图灵班。第一节课去的时候，讲的是输出格式化，这个还算听的懂吧。结果第二节课就直接讲起了指针和二级指针，听得我一头雾水，交作业也要求要用函数<del>那时候我连什么是函数都不知道</del>，后面还是退出了，只要是因为我学得太慢了吧。</p>
<h3 id="大一上的一些课程"><a href="#大一上的一些课程" class="headerlink" title="大一上的一些课程"></a>大一上的一些课程</h3><p>大一上学期最难的应该是线代吧，我直到期末才有点懂得线代的用处，结果现在又忘了，以后再找机会二刷吧。编程方面主要就学了c语言吧，看的是谭浩强的书<del>这书真的不行</del>，而且我要吐槽一下，我们学院教的也太慢了吧，练指针都还没教，没有那种逼着我们跑的感觉，所以我学的也很慢，不过我倒是自己看了一部分的数据结构，那时候对指针理解不够，所以看到二叉树的遍历就看不下了，现在好多也忘了，学了就忘是真的烦😥。上学期算学的很少吧，参加了很多比赛也都没有拿奖，真的挺伤心的，感觉我主要的原因是很难静下心来，学着学着就想跑出去玩，所以上学期坐了几百块的地铁，而且什么都想学，又只学了一点点，就搁置了，因为又有其他的事情需要去做。比如上学期参加了ctf新生赛，算是一个人参加的吧，忙活了几天后，没有拿奖，真的那时候我什么都不懂，然后比赛结束后，我也没有继续学习了，就把本来通过这次比赛学的<strong>一点点</strong>知识也扔掉了，害！我感觉这是一个很致命的问题，学习一个知识后，应该继续深入学习，然后再与现阶段学习的内容贯通，最后能够做点东西出来，才算有用吧。</p>
<h3 id="寒假"><a href="#寒假" class="headerlink" title="寒假"></a>寒假</h3><p>寒假时，刷了很多acm的题，接触了挺多算法的，已经能熟悉的用深搜了，也开始学习动态规划了，但是后面一开学，我又开始搁置了<del>接受不了.jpg</del> 。现在算是又忘的差不多了吧，老毛病了，感觉要每天都做一些才能不忘记，不然真的挺容易不想继续，就慢慢搁了，因为每天都会有各种各样的事，而且我也挺懒的哈。寒假还学了一下小程序，也是学得差不多就搁置了，不过我找到了一个<a href="https://www.bilibili.com/video/BV1sx411z77P?from=search&amp;seid=6116369401220262130">非常好的教程</a>，算把小程序的怎么开发讲得非常好了，结合微信开发文档，如果以后要开发我还是很有信心做好的。</p>
<h3 id="大一下"><a href="#大一下" class="headerlink" title="大一下"></a>大一下</h3><p>这学期算学了很多内容吧，高数下比上难了好多，学了C++面向对象，也做了一个很多行的大作业，C++算学的还可以，只是对C++11还不是很掌握，本来打算暑假继续学习C++的，现在也不知道要往什么方向学习，害。这学期算学得不多吧，还在一个打基础的阶段，等离散跟概率论都学完，我就会加快步伐的。</p>
<h3 id="接下来的安排"><a href="#接下来的安排" class="headerlink" title="接下来的安排"></a>接下来的安排</h3><ul>
<li>准备数学建模</li>
<li>继续学习《算法导论》</li>
<li>c#图像识别入门（申请的项目要求的）</li>
<li>下学期可能会申请当兼助，做点有意义的事</li>
</ul>
<p>下次再来写写最近的感悟，不涉及技术方面的。</p>
]]></content>
      <categories>
        <category>杂想</category>
      </categories>
  </entry>
  <entry>
    <title>魔兽世界3备战</title>
    <url>/2020/05/13/%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<p>这个题目，我花了差不多4天才全部做出来的，一开始也没很好的设计，就是看见有什么功能，就写一个函数的声明，然后写另一个类的时候，发现我要用到前面写的类的函数时，才去定义相应的函数，所以可能会很混乱。我写这篇文章一是为了重新理一下思路，也希望能给后面设计的人一个想法吧。</p>
<span id="more"></span>
<p>首先我大体上设置了5个类吧，不包括相应的子类，分别是factorial（工厂类）、headquarter（司令部类，其实叫做城市类更好）、time（时间类，用来管理时间和大部分的输出的）、warrior（武士类，这道题中最重要的类）、weapon（武器类）。先从最重要的开始吧。</p>
<ul>
<li><p>warrior</p>
<p>武士有生命值(life)、编号（serial 注意这个编号是从1开始算的，每制造一个武士编号就相应的加一，而且并不会因为删除前面的武士而改变）、攻击力（damage，由司令部决定，但具体的规则不同，可以由不同的子类传进去）、位置（location，用来记录武士现在所在的位置，用于打架与移动）、武器的数量数组（WeaponNum，静态数组用来储存不同武器的数量），名字（用来存储子类不同的名字）colorname（隶属司令部的颜色）、武器（这里使用一个vector数组，放武士拥有的武器）。武士有两个重要的方法一个是抢武器，一个是用武器。</p>
</li>
<li><p>weapon</p>
<p>武器有攻击力，武器的编号，剩余的使用次数，还有使用string存储它的名字。武器最终要的是ninja武士使用bomb不会自残，我的做法是使用一个使用武器的方法，并把武士作为形参传进来。</p>
</li>
<li><p>factorial</p>
<p>这个类听从了hhy老师的建议，使用了了静态函数负责制造武士和制造武器，但是我现在的工厂类没有任何数据成员，所以我还是不知道为什么不使用普通的函数，或许可以给工厂多一些功能，比如一个静态成员去记录现在的武士武器编号？？</p>
</li>
<li><p>time</p>
<p>用于对于处理各种事件并输出，主要要总的输出时间和现在的时间，可以包括小时与分钟，也可以只包括小时。这个类的方法大致于题目不同时刻的事件相同，有制造武士，武士逃跑，武士前进，同一个城市的武士抢武器，打架，司令部报告，武士报告。对于武士我的处理方法是先按司令部全部遍历都前进一步，在根据城市的顺序从左到右输出，或许可以全部由城市来负责。</p>
</li>
<li><p>headquarters</p>
<p>司令部是继承普通的city类来着，司令部有总的生命值，制造武士的顺序，各个武士的攻击力和所需要的生命（或许这两个就可以放置在factorial类中作为静态成员），还需要一个vector用来记录司令部的士兵。</p>
</li>
</ul>
<p>类的介绍就差不多是这样了，删除武士删除武器的操作，或许都可以由factorial来实现，把功能给对应的类吧，不过这样好像要写成模板函数了。</p>
<hr>
<p>最后再说一下可能会遇到的一些坑吧。</p>
<p>武士打架时，在奇数城市红方先攻击，偶数城市蓝方先攻击  </p>
<p>武器的攻击力会随使用者的改变而发生改变，<strong>所以在抢夺武器时记得要给一个接口去改变武器的攻击力</strong></p>
<p>Wolf的抢夺武器与打赢后抢夺武器是不一样的，wolf只抢劫一种（编号最小的武器），而打赢之后进行的抢劫，所有的武器都能抢。</p>
<p>关于删除武器，武士的erase，erase最好写一个函数，参数传递要删除的对应指针（容器里面放的是指针嘛），erase的参数都是迭代器，推荐使用for循环找到要删除指针对应的迭代器。</p>
<p> 注意iceman前进一步损失10%的生命值，表示的方式是<script type="math/tex">life-life*10%</script>,而不是<script type="math/tex">life*90%</script></p>
<p>移动的输出顺序是按目的地从西向东的，我的做法是先全部移动，再按city输出相应的信息</p>
<p>如果武士用一个数组去存储武器的数量，另外还有如果wolf抢劫了敌人的武器记得把敌人数组的数量减掉，武士的数组加相应的值。</p>
<p>还有一个非常坑的点，在打架时，假如两个都剩余一件sword的攻击力为0，或者有一个没有武器，都会进行入死循环。但是其他两种武器是有使用次数的就每关系。</p>
<p>耳聋咆哮是活下来就要的，不是赢了才。</p>
<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//最后附上代码，可能有很多功能没有分离好，导致接口写的太多了</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;climits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">factorial</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Time</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">headquarter</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">city</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">warrior</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">weapon</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">factorial</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-comment">//l表示武士的生命，L表示武士的位置，s表示武士的标号，choice确定选择哪一个武士</span><br>	<span class="hljs-comment">//需要的变量哪一个武士,武士的各种信息</span><br>	<span class="hljs-function"><span class="hljs-type">static</span> warrior* <span class="hljs-title">creator_warrior</span><span class="hljs-params">(<span class="hljs-type">int</span> choice, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> life, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> total, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>*, <span class="hljs-type">int</span>)</span></span>;<br>	<span class="hljs-comment">//</span><br>	<span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">creator_weapon</span><span class="hljs-params">(<span class="hljs-type">int</span> attack, <span class="hljs-type">int</span> seria, <span class="hljs-type">int</span> num, std::vector&lt;weapon*&gt;&amp;d, <span class="hljs-type">int</span> *)</span></span>;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">warrior</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">city</span><br>&#123;<br><span class="hljs-keyword">protected</span>:<br>	<span class="hljs-type">int</span> location;<br>	std::vector&lt;warrior*&gt; qwarriors;	<span class="hljs-comment">//用来占领存放武士的容器</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">city</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>) :<span class="hljs-built_in">location</span>(l)<br>	&#123;<br><br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_qwarriors</span><span class="hljs-params">(warrior *)</span></span>;<br>	<span class="hljs-function">std::vector&lt;warrior*&gt; &amp;<span class="hljs-title">show_qwarriors</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> qwarriors;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">city_delete</span><span class="hljs-params">(warrior *)</span></span>;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">headquarter</span> :<span class="hljs-keyword">public</span> city<br>&#123;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-type">int</span> TotalLife;					<span class="hljs-comment">//司令部总的生命元</span><br>	<span class="hljs-type">char</span> name[<span class="hljs-number">7</span>];					<span class="hljs-comment">//司令部的名字</span><br>	<span class="hljs-type">int</span> makeseq[<span class="hljs-number">5</span>];					<span class="hljs-comment">//制造武士的顺序</span><br>	<span class="hljs-type">int</span> LifeNeed[<span class="hljs-number">5</span>];				<span class="hljs-comment">//把制造武士所需的生命元也放在类里</span><br>	<span class="hljs-type">int</span> WarriorAttack[<span class="hljs-number">5</span>];<br>	std::vector&lt;warrior*&gt; warriors;	<span class="hljs-comment">//用来存放武士的容器</span><br>	<span class="hljs-type">bool</span> WheatherCreate = <span class="hljs-literal">true</span>;			<span class="hljs-comment">//是否可以制造武士</span><br>	<span class="hljs-type">bool</span> IsContinue = <span class="hljs-literal">true</span>;<br>	<span class="hljs-type">int</span> WarriorSeria = <span class="hljs-number">0</span>;<br>	<span class="hljs-type">int</span> lionloyalty;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-comment">//t是司令部的生命元，arr是制造武士的顺序，N城市的数量 A是武士攻击力数组</span><br>	<span class="hljs-comment">//L是武士的生命值数组</span><br>	<span class="hljs-built_in">headquarter</span>(<span class="hljs-type">int</span> t, <span class="hljs-type">int</span> *arr, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> N, <span class="hljs-type">int</span> *L, <span class="hljs-type">int</span> *A, <span class="hljs-type">int</span> Ly) :<span class="hljs-built_in">TotalLife</span>(t),<br>		<span class="hljs-built_in">lionloyalty</span>(Ly)<br>	&#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = <span class="hljs-number">0</span>; n &lt; <span class="hljs-number">5</span>; n++)<br>		&#123;<br>			makeseq[n] = arr[n];<br>			LifeNeed[n] = L[n];<br>			WarriorAttack[n] = A[n];<br>		&#125;<br>		<span class="hljs-keyword">if</span> (m == <span class="hljs-number">0</span>)<br>		&#123;<br>			name[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;r&#x27;</span>;<br>			name[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;e&#x27;</span>;<br>			name[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;d&#x27;</span>;<br>			name[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>			location = <span class="hljs-number">0</span>;<br>		&#125;<br>		<span class="hljs-keyword">if</span> (m == <span class="hljs-number">1</span>)<br>		&#123;<br>			name[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;b&#x27;</span>;<br>			name[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;l&#x27;</span>;<br>			name[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;u&#x27;</span>;<br>			name[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;e&#x27;</span>;<br>			name[<span class="hljs-number">4</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>			location = N + <span class="hljs-number">1</span>;<br>		&#125;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">getnextMakeValidWarriorKind</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">if</span> (TotalLife &gt;= LifeNeed[makeseq[warriors.<span class="hljs-built_in">size</span>() % <span class="hljs-number">5</span>]])<span class="hljs-comment">//</span><br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>		<span class="hljs-keyword">else</span><br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">delete_warrior</span><span class="hljs-params">(warrior *)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">produce</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_continue</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> IsContinue;<br>	&#125;<br>	<span class="hljs-function">std::vector&lt;warrior*&gt;&amp;  <span class="hljs-title">get_warrios</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> warriors;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_totalife</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> TotalLife;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_location</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> location;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">char</span> *<span class="hljs-title">get_name</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> name;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Been_Token</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		IsContinue = <span class="hljs-literal">false</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Time</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-type">int</span> TotalTime;<br>	<span class="hljs-type">bool</span> is_continue = <span class="hljs-literal">true</span>;<br>	<span class="hljs-type">int</span> NowTime = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">Time</span>(<span class="hljs-type">int</span> t) :<span class="hljs-built_in">TotalTime</span>(t)<br>	&#123;<br><br>	&#125;<br>	<span class="hljs-comment">//如果是武士的行为就需要引用司令部，武器的行为需要引用武士</span><br>	<span class="hljs-comment">//因为一个司令部有很多武士，一个武士有很多武器</span><br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">create_event</span><span class="hljs-params">(headquarter &amp;a, headquarter &amp;b)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">escape_event</span><span class="hljs-params">(headquarter &amp;a, headquarter &amp;b)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">forward_event</span><span class="hljs-params">(headquarter &amp;a, headquarter &amp;b, city **)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rob_event</span><span class="hljs-params">(warrior *a, warrior *b, <span class="hljs-type">int</span>)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fight_event</span><span class="hljs-params">(warrior *a, warrior *b, <span class="hljs-type">int</span>)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">headquarte_report</span><span class="hljs-params">(headquarter &amp;a)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_nowtime</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		++NowTime;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_nowtime</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> NowTime;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">warriors_report</span><span class="hljs-params">(warrior *a)</span></span>;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">weapon</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">warrior</span><br>&#123;<br><span class="hljs-keyword">protected</span>:<br>	<span class="hljs-type">int</span> life;						<span class="hljs-comment">//武士的生命</span><br>	<span class="hljs-type">int</span> seria;						<span class="hljs-comment">//武士的编号</span><br>	<span class="hljs-type">int</span> damage;						<span class="hljs-comment">//武士的攻击力</span><br>	std::vector&lt;weapon *&gt;weapons;	<span class="hljs-comment">//用来存放武器的优先队列</span><br>	<span class="hljs-type">int</span> location;					<span class="hljs-comment">//现在的位置</span><br>	<span class="hljs-type">int</span> WeaponsNum[<span class="hljs-number">3</span>] = &#123;&#125;;<br>	std::string name;<br>	<span class="hljs-type">int</span> HqtName;					<span class="hljs-comment">//所属司令部的名字,0表示red,1表示blue</span><br>	std::string colorname;			<span class="hljs-comment">//没办法了，真的需要这个</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">warrior</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> d = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> L = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>) :<span class="hljs-built_in">life</span>(l),<br>		<span class="hljs-built_in">seria</span>(s), <span class="hljs-built_in">damage</span>(d), <span class="hljs-built_in">location</span>(L), <span class="hljs-built_in">HqtName</span>(p)<br>	&#123;<br>		name = <span class="hljs-string">&quot;warrior&quot;</span>;<br>		<span class="hljs-keyword">if</span> (p == <span class="hljs-number">0</span>)<br>			colorname = <span class="hljs-string">&quot;red&quot;</span>;<br>		<span class="hljs-keyword">else</span><br>			colorname = <span class="hljs-string">&quot;blue&quot;</span>;<br>	&#125;<br>	<span class="hljs-function">std::vector&lt;weapon*&gt; &amp; <span class="hljs-title">get_weapons</span><span class="hljs-params">()</span>			<span class="hljs-comment">//返回武士的武器，记得使用引用</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> weapons;<br>	&#125;<br>	<span class="hljs-function">std::string <span class="hljs-title">get_name</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> name;<br>	&#125;<br>	<span class="hljs-function">std::string <span class="hljs-title">get_color</span><span class="hljs-params">()</span><span class="hljs-type">const</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> colorname;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_hqt</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> HqtName;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_life</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> life;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_attack</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> damage;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change_life</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">	</span>&#123;<br>		life -= n;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_loc</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> location;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_seria</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> seria;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">report</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_die</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br><br>		<span class="hljs-keyword">if</span> (life &lt;= <span class="hljs-number">0</span>)<br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>		<span class="hljs-keyword">else</span><br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rob_weapon</span><span class="hljs-params">(warrior* enermy)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete_weapon</span><span class="hljs-params">(weapon *)</span></span>;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">bool</span> <span class="hljs-title">is_use_bomb</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gaming</span><span class="hljs-params">(<span class="hljs-type">int</span> times, <span class="hljs-type">int</span> &amp;)</span></span>;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change_weaponnum</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span><br><span class="hljs-function">	</span>&#123;<br>		--WeaponsNum[s];<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort_weapons</span><span class="hljs-params">()</span></span>;<br>	<span class="hljs-comment">//第10分时的移动，每一次在headquarters的warriors都用一次</span><br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> warrior*  <span class="hljs-title">forward</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">	</span>&#123;<br>		location += n;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">before_game</span><span class="hljs-params">(warrior* enermy, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>		<span class="hljs-comment">//为了wolf的偷武器而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">after_game</span><span class="hljs-params">(<span class="hljs-type">int</span> time, <span class="hljs-type">int</span> city)</span>	<span class="hljs-comment">//为了dragon的yell而设置的</span></span><br><span class="hljs-function">	</span>&#123;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">bool</span> <span class="hljs-title">is_escape</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dragon</span> :<span class="hljs-keyword">public</span> warrior<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">dragon</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> d = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> L = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>);<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">yell</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br>	<span class="hljs-function">warrior* <span class="hljs-title">forward</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">	</span>&#123;<br>		location += n;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">before_game</span><span class="hljs-params">(warrior* enermy, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>		       <span class="hljs-comment">//为了wolf的偷武器而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">after_game</span><span class="hljs-params">(<span class="hljs-type">int</span> time, <span class="hljs-type">int</span> city)</span> <span class="hljs-comment">//为了dragon的yell而设置的</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">yell</span>(time, city);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_escape</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_use_bomb</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ninja</span> :<span class="hljs-keyword">public</span> warrior<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">ninja</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> d = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> L = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>);<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_use_bomb</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-function">warrior* <span class="hljs-title">forward</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">	</span>&#123;<br>		location += n;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">before_game</span><span class="hljs-params">(warrior* enermy, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>		<span class="hljs-comment">//为了wolf的偷武器而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">after_game</span><span class="hljs-params">(<span class="hljs-type">int</span> time, <span class="hljs-type">int</span> city)</span>	<span class="hljs-comment">//为了dragon的yell而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_escape</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">iceman</span> :<span class="hljs-keyword">public</span> warrior<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">iceman</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> d = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> L = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>);<br>	<span class="hljs-function">warrior* <span class="hljs-title">forward</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">	</span>&#123;<br>		location += n;<br>		life -= life * <span class="hljs-number">1</span> / <span class="hljs-number">10</span>;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">before_game</span><span class="hljs-params">(warrior* enermy, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>		<span class="hljs-comment">//为了wolf的偷武器而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">after_game</span><span class="hljs-params">(<span class="hljs-type">int</span> time, <span class="hljs-type">int</span> city)</span>	<span class="hljs-comment">//为了dragon的yell而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_escape</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_use_bomb</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">lion</span> :<span class="hljs-keyword">public</span> warrior<br>&#123;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-type">int</span> loyalty;<br>	<span class="hljs-type">int</span> K;				<span class="hljs-comment">//每一次行走消耗的忠诚度，命名逐渐暴躁</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">lion</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> d = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> L = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>);<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_escape</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">if</span> (loyalty &lt;= <span class="hljs-number">0</span>)<br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>		<span class="hljs-keyword">else</span><br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-function">warrior* <span class="hljs-title">forward</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">	</span>&#123;<br>		loyalty -= K;<br>		location += n;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br><br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">before_game</span><span class="hljs-params">(warrior* enermy, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>		<span class="hljs-comment">//为了wolf的偷武器而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">after_game</span><span class="hljs-params">(<span class="hljs-type">int</span> time, <span class="hljs-type">int</span> city)</span>	<span class="hljs-comment">//为了dragon的yell而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_use_bomb</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">wolf</span> :<span class="hljs-keyword">public</span> warrior<br>&#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">wolf</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> d = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> L = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>) :<br>		<span class="hljs-built_in">warrior</span>(l, s, d, L, r, p)<br>	&#123;<br>		name = <span class="hljs-string">&quot;wolf&quot;</span>;<br>	&#125;<br>	<span class="hljs-function">warrior* <span class="hljs-title">forward</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">	</span>&#123;<br>		location += n;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">before_game</span><span class="hljs-params">(warrior* enermy, <span class="hljs-type">int</span> NoWtime, <span class="hljs-type">int</span> City)</span>		<span class="hljs-comment">//为了wolf的偷武器而设置的</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-built_in">wolf_rob</span>(enermy, NoWtime, City);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">after_game</span><span class="hljs-params">(<span class="hljs-type">int</span> time, <span class="hljs-type">int</span> city)</span>	<span class="hljs-comment">//为了dragon的yell而设置的</span></span><br><span class="hljs-function">	</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_escape</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_use_bomb</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">wolf_rob</span><span class="hljs-params">(warrior *, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Pair</span><br>&#123;<br>	<span class="hljs-type">int</span> first;<br>	<span class="hljs-type">int</span> second;<br>	<span class="hljs-built_in">Pair</span>(<span class="hljs-type">int</span> f, <span class="hljs-type">int</span> s) :<span class="hljs-built_in">first</span>(f), <span class="hljs-built_in">second</span>(s) &#123;&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">weapon</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-type">int</span> WeaponDamage;		<span class="hljs-comment">//武器的攻击力</span><br>	<span class="hljs-type">int</span> WeaponSeria;		<span class="hljs-comment">//武器的编号，用于后面排序</span><br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">weapon</span>(<span class="hljs-type">int</span> d, <span class="hljs-type">int</span> w) :<span class="hljs-built_in">WeaponDamage</span>(d), <span class="hljs-built_in">WeaponSeria</span>(w) &#123;&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> Pair <span class="hljs-title">using_weapon</span><span class="hljs-params">(<span class="hljs-type">int</span> MyDamage)</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-built_in">Pair</span>(WeaponDamage, MyDamage);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_seria</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> WeaponSeria;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">change_damege</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function">	</span>&#123;<br>		WeaponDamage = t;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_damage</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> WeaponDamage;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">get_use_times</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">bool</span> <span class="hljs-title">is_bad</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;	<span class="hljs-comment">//每次使用武器后就调用这个函数</span><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sword</span> :<span class="hljs-keyword">public</span> weapon<br>&#123;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-type">int</span> Availbleuse = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">sword</span>(<span class="hljs-type">int</span> d = <span class="hljs-number">0</span>) :<span class="hljs-built_in">weapon</span>(d * <span class="hljs-number">2</span> / <span class="hljs-number">10</span>, <span class="hljs-number">0</span>) &#123;&#125;<br>	<span class="hljs-function">Pair <span class="hljs-title">using_weapon</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span> </span>&#123; <span class="hljs-keyword">return</span> weapon::<span class="hljs-built_in">using_weapon</span>(<span class="hljs-number">0</span>); &#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_use_times</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_bad</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change_damege</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function">	</span>&#123;<br>		weapon::<span class="hljs-built_in">change_damege</span>(t * <span class="hljs-number">2</span> / <span class="hljs-number">10</span>);<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">bomb</span> :<span class="hljs-keyword">public</span> weapon<br>&#123;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-type">int</span> AvailbleUse = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">bomb</span>(<span class="hljs-type">int</span> d = <span class="hljs-number">0</span>) :<span class="hljs-built_in">weapon</span>(d * <span class="hljs-number">4</span> / <span class="hljs-number">10</span>, <span class="hljs-number">1</span>) &#123;&#125;<br>	<span class="hljs-function">Pair <span class="hljs-title">using_weapon</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span><br><span class="hljs-function">	</span>&#123;<br>		--AvailbleUse;<br>		<span class="hljs-keyword">return</span> weapon::<span class="hljs-built_in">using_weapon</span>(<span class="hljs-built_in">get_damage</span>() / <span class="hljs-number">2</span>);<br>	&#125;<span class="hljs-comment">//</span><br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_use_times</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> AvailbleUse;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_bad</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; &#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change_damege</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function">	</span>&#123;<br>		weapon::<span class="hljs-built_in">change_damege</span>(t * <span class="hljs-number">4</span> / <span class="hljs-number">10</span>);<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">arrow</span> :<span class="hljs-keyword">public</span> weapon<br>&#123;<br><span class="hljs-keyword">private</span>:<br>	<span class="hljs-type">int</span> AvailbleUse = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">arrow</span>(<span class="hljs-type">int</span> d = <span class="hljs-number">0</span>) :<span class="hljs-built_in">weapon</span>(d * <span class="hljs-number">3</span> / <span class="hljs-number">10</span>, <span class="hljs-number">2</span>) &#123;&#125;<br>	<span class="hljs-function">Pair <span class="hljs-title">using_weapon</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span><br><span class="hljs-function">	</span>&#123;<br>		--AvailbleUse;<br>		<span class="hljs-keyword">return</span> weapon::<span class="hljs-built_in">using_weapon</span>(<span class="hljs-number">0</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_bad</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">if</span> (AvailbleUse == <span class="hljs-number">0</span>)<br>		&#123;<br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>		&#125;<br>		<span class="hljs-keyword">else</span><br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_use_times</span><span class="hljs-params">()</span></span><br><span class="hljs-function">	</span>&#123;<br>		<span class="hljs-keyword">return</span> AvailbleUse;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change_damege</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function">	</span>&#123;<br>		weapon::<span class="hljs-built_in">change_damege</span>(t * <span class="hljs-number">3</span> / <span class="hljs-number">10</span>);<br>	&#125;<br>&#125;;<br><span class="hljs-comment">//life表示武士的生命，L表示武士的位置，s表示武士的标号，可以用choice确定使用哪一个武士</span><br><span class="hljs-function">warrior* <span class="hljs-title">factorial::creator_warrior</span><span class="hljs-params">(<span class="hljs-type">int</span> choice, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> life, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> total, <span class="hljs-type">int</span> N, <span class="hljs-type">int</span> *WarriorAttack,</span></span><br><span class="hljs-params"><span class="hljs-function">	<span class="hljs-type">int</span> K)</span></span><br><span class="hljs-function"></span>&#123;<br>	warrior *ptemp;<br>	<span class="hljs-keyword">if</span> (choice == <span class="hljs-number">0</span>)<br>		ptemp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">dragon</span>(life, s, WarriorAttack[choice], L, total, N);<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">1</span>)<br>		ptemp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ninja</span>(life, s, WarriorAttack[choice], L, total, N);<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">2</span>)<br>		ptemp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">iceman</span>(life, s, WarriorAttack[choice], L, total, N);<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">3</span>)<br>		ptemp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">lion</span>(life, s, WarriorAttack[choice], L, total, N, K);<br>	<span class="hljs-keyword">else</span><br>		ptemp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">wolf</span>(life, s, WarriorAttack[choice], L, total, N);<br>	<span class="hljs-keyword">return</span> ptemp;<br>&#125;<br><span class="hljs-comment">//N是武士存放武器的数组</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">factorial::creator_weapon</span><span class="hljs-params">(<span class="hljs-type">int</span> attack, <span class="hljs-type">int</span> seria, <span class="hljs-type">int</span> num, std::vector&lt;weapon*&gt; &amp;d,</span></span><br><span class="hljs-params"><span class="hljs-function">	<span class="hljs-type">int</span> *N)</span></span><br><span class="hljs-function"></span>&#123;<br>	weapon * ptemp1;<br>	weapon *ptemp2;<br>	<span class="hljs-keyword">if</span> (seria % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)<br>		ptemp1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">sword</span>(attack);<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (seria % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>)<br>		ptemp1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">bomb</span>(attack);<br>	<span class="hljs-keyword">else</span><br>		ptemp1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">arrow</span>(attack);<br>	<span class="hljs-keyword">if</span> ((seria + <span class="hljs-number">1</span>) % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)<br>		ptemp2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">sword</span>(attack);<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((seria + <span class="hljs-number">1</span>) % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>)<br>		ptemp2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">bomb</span>(attack);<br>	<span class="hljs-keyword">else</span><br>		ptemp2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">arrow</span>(attack);<br>	<span class="hljs-keyword">if</span> (num == <span class="hljs-number">1</span>)<br>	&#123;<br>		d.<span class="hljs-built_in">push_back</span>(ptemp1);<br>		++N[seria % <span class="hljs-number">3</span>];<br>		<span class="hljs-comment">//在函数里申请空间而不delete也是不会回收的，所以这里要delete ptemp2</span><br>		<span class="hljs-keyword">delete</span> ptemp2;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		d.<span class="hljs-built_in">push_back</span>(ptemp1);<br>		++N[seria % <span class="hljs-number">3</span>];<br>		d.<span class="hljs-built_in">push_back</span>(ptemp2);<br>		++N[(seria + <span class="hljs-number">1</span>) % <span class="hljs-number">3</span>];<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">city::city_delete</span><span class="hljs-params">(warrior *temp)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt; qwarriors.<span class="hljs-built_in">size</span>(); t++)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (qwarriors[t] == temp)<br>		&#123;<br>			qwarriors.<span class="hljs-built_in">erase</span>(qwarriors.<span class="hljs-built_in">begin</span>() + t);<br>			<span class="hljs-keyword">break</span>;<br>		&#125;<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">city::add_qwarriors</span><span class="hljs-params">(warrior *w)</span></span><br><span class="hljs-function"></span>&#123;<br>	qwarriors.<span class="hljs-built_in">push_back</span>(w);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">headquarter::produce</span><span class="hljs-params">(<span class="hljs-type">int</span> time)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (WheatherCreate == <span class="hljs-literal">false</span>)<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	<span class="hljs-keyword">if</span> (!<span class="hljs-built_in">getnextMakeValidWarriorKind</span>())<br>	&#123;<br>		WheatherCreate = <span class="hljs-literal">false</span>;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-type">int</span> N = std::<span class="hljs-built_in">strlen</span>(<span class="hljs-built_in">get_name</span>()) - <span class="hljs-number">3</span>;<br>		TotalLife -= LifeNeed[makeseq[WarriorSeria % <span class="hljs-number">5</span>]];<br>		warrior *ptemp = factorial::<span class="hljs-built_in">creator_warrior</span>(makeseq[WarriorSeria % <span class="hljs-number">5</span>], WarriorSeria + <span class="hljs-number">1</span>,<br>			LifeNeed[makeseq[WarriorSeria % <span class="hljs-number">5</span>]], location, TotalLife, N, WarriorAttack, lionloyalty);<br>		warriors.<span class="hljs-built_in">push_back</span>(ptemp);<br>		std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; time;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:00 %s %s %d born\n&quot;</span>, name, ptemp-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), WarriorSeria + <span class="hljs-number">1</span>);<br>		<span class="hljs-keyword">if</span> (ptemp-&gt;<span class="hljs-built_in">get_name</span>() == <span class="hljs-string">&quot;lion&quot;</span>)<br>			<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Its loyalty is %d\n&quot;</span>, TotalLife);<br>		++WarriorSeria;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">headquarter::delete_warrior</span><span class="hljs-params">(warrior *temp)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt; warriors.<span class="hljs-built_in">size</span>(); t++)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (warriors[t] == temp)<br>		&#123;<br>			warriors.<span class="hljs-built_in">erase</span>(warriors.<span class="hljs-built_in">begin</span>() + t);<br>			<span class="hljs-keyword">break</span>;<br>		&#125;<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Time::create_event</span><span class="hljs-params">(headquarter &amp;a, headquarter &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (NowTime * <span class="hljs-number">60</span> &gt; TotalTime)<br>	&#123;<br>		is_continue = <span class="hljs-literal">false</span>;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	a.<span class="hljs-built_in">produce</span>(NowTime);<br>	b.<span class="hljs-built_in">produce</span>(NowTime);<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Time::escape_event</span><span class="hljs-params">(headquarter &amp;a, headquarter &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">auto</span> &amp;x1 = a.<span class="hljs-built_in">get_warrios</span>();<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt; x1.<span class="hljs-built_in">size</span>(); t++)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (x1[t]-&gt;<span class="hljs-built_in">get_name</span>() == <span class="hljs-string">&quot;lion&quot;</span>)<br>		&#123;<br>			<span class="hljs-keyword">if</span> (x1[t]-&gt;<span class="hljs-built_in">is_escape</span>())<br>			&#123;<br>				std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; NowTime;<br>				<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:05 %s %s %d ran away\n&quot;</span>, a.<span class="hljs-built_in">get_name</span>(),<br>					x1[t]-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), t + <span class="hljs-number">1</span>);<br>				x1.<span class="hljs-built_in">erase</span>(x1.<span class="hljs-built_in">begin</span>() + t);<br>			&#125;<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">auto</span> &amp;x2 = b.<span class="hljs-built_in">get_warrios</span>();<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt; x2.<span class="hljs-built_in">size</span>(); t++)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (x2[t]-&gt;<span class="hljs-built_in">get_name</span>() == <span class="hljs-string">&quot;lion&quot;</span>)<br>		&#123;<br>			<span class="hljs-keyword">if</span> (x2[t]-&gt;<span class="hljs-built_in">is_escape</span>())<br>			&#123;<br>				std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; NowTime;<br>				<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:05 %s %s %d ran away\n&quot;</span>, b.<span class="hljs-built_in">get_name</span>(),<br>					x2[t]-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), t + <span class="hljs-number">1</span>);<br>				x2.<span class="hljs-built_in">erase</span>(x2.<span class="hljs-built_in">begin</span>() + t);<br>			&#125;<br>		&#125;<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Time::forward_event</span><span class="hljs-params">(headquarter &amp;a, headquarter &amp;b, city **arr)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">auto</span> &amp;x1 = a.<span class="hljs-built_in">get_warrios</span>();<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt; x1.<span class="hljs-built_in">size</span>(); t++)<br>	&#123;<br>		<span class="hljs-keyword">auto</span> ptemp = x1[t]-&gt;forward(<span class="hljs-number">1</span>);<br>		arr[ptemp-&gt;<span class="hljs-built_in">get_loc</span>()]-&gt;<span class="hljs-built_in">add_qwarriors</span>(ptemp);<br>	&#125;<br>	<span class="hljs-keyword">auto</span> &amp;x2 = b.<span class="hljs-built_in">get_warrios</span>();<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt; x2.<span class="hljs-built_in">size</span>(); t++)<br>	&#123;<br>		<span class="hljs-keyword">auto</span> ptemp = x2[t]-&gt;forward(<span class="hljs-number">-1</span>);<br>		arr[ptemp-&gt;<span class="hljs-built_in">get_loc</span>()]-&gt;<span class="hljs-built_in">add_qwarriors</span>(ptemp);<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Time::rob_event</span><span class="hljs-params">(warrior *a, warrior *b, <span class="hljs-type">int</span> City)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">get_name</span>() == <span class="hljs-string">&quot;wolf&quot;</span>&amp;&amp;b-&gt;<span class="hljs-built_in">get_name</span>() != <span class="hljs-string">&quot;wolf&quot;</span>)<br>		a-&gt;<span class="hljs-built_in">before_game</span>(b, NowTime, City);<br>	<span class="hljs-keyword">if</span> (b-&gt;<span class="hljs-built_in">get_name</span>() == <span class="hljs-string">&quot;wolf&quot;</span>&amp;&amp;a-&gt;<span class="hljs-built_in">get_name</span>() != <span class="hljs-string">&quot;wolf&quot;</span>)<br>		b-&gt;<span class="hljs-built_in">before_game</span>(a, NowTime, City);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Time::fight_event</span><span class="hljs-params">(warrior *a, warrior *b, <span class="hljs-type">int</span> choose)</span><span class="hljs-comment">//choose是city的编号</span></span><br><span class="hljs-function"></span>&#123;<br>	a-&gt;<span class="hljs-built_in">sort_weapons</span>();<br>	b-&gt;<span class="hljs-built_in">sort_weapons</span>();<br>	<span class="hljs-type">int</span> t1 = <span class="hljs-number">0</span>;<br>	<span class="hljs-type">int</span> t2 = <span class="hljs-number">0</span>;<br>	<span class="hljs-type">int</span> flag = <span class="hljs-number">2</span>;				<span class="hljs-comment">//-1表示a赢，0表示打和，1表示b赢,2表示都死了</span><br>	<span class="hljs-keyword">while</span> (!a-&gt;<span class="hljs-built_in">is_die</span>() &amp;&amp; !b-&gt;<span class="hljs-built_in">is_die</span>())<br>	&#123;<br>		<span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span> &amp;&amp; b-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<br>		&#123;<br>			<span class="hljs-type">int</span> s = <span class="hljs-number">1</span>;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : b-&gt;<span class="hljs-built_in">get_weapons</span>())<br>			&#123;<br>				<span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">get_damage</span>() != <span class="hljs-number">0</span>)<br>				&#123;<br>					s = <span class="hljs-number">0</span>;<br>				&#125;<br><br>				<span class="hljs-comment">//攻击力为0的arrow,和攻击力为0的sword</span><br>				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">get_damage</span>() == <span class="hljs-number">0</span> &amp;&amp; x-&gt;<span class="hljs-built_in">get_use_times</span>() != <span class="hljs-number">0</span>)<br>					s = <span class="hljs-number">0</span>;<br>			&#125;<br>			<span class="hljs-keyword">if</span> (s == <span class="hljs-number">1</span>)<br>				<span class="hljs-keyword">break</span>;<br>		&#125;<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<br>		&#123;<br>			<span class="hljs-type">int</span> s = <span class="hljs-number">1</span>;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : a-&gt;<span class="hljs-built_in">get_weapons</span>())<br>			&#123;<br>				<span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">get_damage</span>() != <span class="hljs-number">0</span>)<br>				&#123;<br>					s = <span class="hljs-number">0</span>;<br>				&#125;<br>				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">get_damage</span>() == <span class="hljs-number">0</span> &amp;&amp; x-&gt;<span class="hljs-built_in">get_use_times</span>() != <span class="hljs-number">0</span>)<br>					s = <span class="hljs-number">0</span>;<br>			&#125;<br>			<span class="hljs-keyword">if</span> (s == <span class="hljs-number">1</span>)<br>				<span class="hljs-keyword">break</span>;<br>		&#125;<br>		<span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>() != <span class="hljs-number">0</span>)<br>		&#123;<br>			<span class="hljs-type">int</span> dmg = a-&gt;<span class="hljs-built_in">gaming</span>(t1%a-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>(), t1);<br>			b-&gt;<span class="hljs-built_in">change_life</span>(dmg);<br>			<span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">is_die</span>())<br>				<span class="hljs-keyword">break</span>;<br>		&#125;<br>		<span class="hljs-keyword">if</span> (b-&gt;<span class="hljs-built_in">is_die</span>())<br>		&#123;<br>			<span class="hljs-keyword">break</span>;<br>		&#125;<br>		<span class="hljs-keyword">if</span> (b-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>() != <span class="hljs-number">0</span>)<br>		&#123;<br>			<span class="hljs-type">int</span> dmg = b-&gt;<span class="hljs-built_in">gaming</span>(t2%b-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>(), t2);<br>			a-&gt;<span class="hljs-built_in">change_life</span>(dmg);<br>			<span class="hljs-keyword">if</span> (b-&gt;<span class="hljs-built_in">is_die</span>())<br>				<span class="hljs-keyword">break</span>;<br>		&#125;<br>		++t1;<br>		++t2;<br>	&#125;<br>	<span class="hljs-comment">//让a是红，这里交换指针指向的值并不会影响实际的值</span><br>	std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; NowTime;<br>	<span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">get_color</span>() == <span class="hljs-string">&quot;blue&quot;</span>)<br>	&#123;<br>		<span class="hljs-keyword">auto</span> temp = a;<br>		a = b;<br>		b = temp;<br>	&#125;<br>	<span class="hljs-keyword">if</span> (!a-&gt;<span class="hljs-built_in">is_die</span>() &amp;&amp; !b-&gt;<span class="hljs-built_in">is_die</span>())<br>	&#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:40 both red %s %d and blue %s %d were alive in city %d\n&quot;</span>,<br>			a-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), a-&gt;<span class="hljs-built_in">get_seria</span>(), b-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), b-&gt;<span class="hljs-built_in">get_seria</span>(),<br>			choose);<br>		a-&gt;<span class="hljs-built_in">after_game</span>(NowTime, choose);<br>		b-&gt;<span class="hljs-built_in">after_game</span>(NowTime, choose);<br>		flag = <span class="hljs-number">0</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">is_die</span>() &amp;&amp; b-&gt;<span class="hljs-built_in">is_die</span>())<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:40 both red %s %d and blue %s %d died in city %d\n&quot;</span>,<br>			a-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), a-&gt;<span class="hljs-built_in">get_seria</span>(), b-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), b-&gt;<span class="hljs-built_in">get_seria</span>(),<br>			choose);<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">is_die</span>())<br>	&#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:40 blue %s %d killed red %s %d in city %d remaining %d elements\n&quot;</span>,<br>			b-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), b-&gt;<span class="hljs-built_in">get_seria</span>(), a-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), a-&gt;<span class="hljs-built_in">get_seria</span>(), choose,<br>			b-&gt;<span class="hljs-built_in">get_life</span>());<br>		b-&gt;<span class="hljs-built_in">rob_weapon</span>(a);<br>		b-&gt;<span class="hljs-built_in">after_game</span>(NowTime, choose);<br>		flag = <span class="hljs-number">1</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b-&gt;<span class="hljs-built_in">is_die</span>())<br>	&#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:40 red %s %d killed blue %s %d in city %d remaining %d elements\n&quot;</span>,<br>			a-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), a-&gt;<span class="hljs-built_in">get_seria</span>(), b-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), b-&gt;<span class="hljs-built_in">get_seria</span>(), choose,<br>			a-&gt;<span class="hljs-built_in">get_life</span>());<br>		flag = <span class="hljs-number">-1</span>;<br>		a-&gt;<span class="hljs-built_in">rob_weapon</span>(b);<br>		a-&gt;<span class="hljs-built_in">after_game</span>(NowTime, choose);<br>	&#125;<br>	<span class="hljs-keyword">return</span> flag;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Time::headquarte_report</span><span class="hljs-params">(headquarter &amp;a)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> n = a.<span class="hljs-built_in">get_totalife</span>();<br>	std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; NowTime;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:50 %d elements in %s headquarter\n&quot;</span>, n, a.<span class="hljs-built_in">get_name</span>());<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Time::warriors_report</span><span class="hljs-params">(warrior *a)</span></span><br><span class="hljs-function"></span>&#123;<br>	a-&gt;<span class="hljs-built_in">report</span>(NowTime, a-&gt;<span class="hljs-built_in">get_color</span>().<span class="hljs-built_in">c_str</span>());<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(weapon *a, weapon *b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">get_seria</span>() == b-&gt;<span class="hljs-built_in">get_seria</span>())<br>		<span class="hljs-keyword">return</span> a-&gt;<span class="hljs-built_in">get_use_times</span>() &lt; b-&gt;<span class="hljs-built_in">get_use_times</span>();<br>	<span class="hljs-keyword">else</span><br>		<span class="hljs-keyword">return</span> a-&gt;<span class="hljs-built_in">get_seria</span>() &lt; b-&gt;<span class="hljs-built_in">get_seria</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp1</span><span class="hljs-params">(weapon *a, weapon *b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (a-&gt;<span class="hljs-built_in">get_seria</span>() == b-&gt;<span class="hljs-built_in">get_seria</span>())<br>		<span class="hljs-keyword">return</span> a-&gt;<span class="hljs-built_in">get_use_times</span>() &gt; b-&gt;<span class="hljs-built_in">get_use_times</span>();<br>	<span class="hljs-keyword">else</span><br>		<span class="hljs-keyword">return</span> a-&gt;<span class="hljs-built_in">get_seria</span>() &lt; b-&gt;<span class="hljs-built_in">get_seria</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">warrior::Delete_weapon</span><span class="hljs-params">(weapon* w)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : weapons)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (x == w)<br>		&#123;<br>			weapons.<span class="hljs-built_in">erase</span>(weapons.<span class="hljs-built_in">begin</span>() + t);<br>			<span class="hljs-keyword">break</span>;<br>		&#125;<br>		++t;<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">warrior::sort_weapons</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">sort</span>(weapons.<span class="hljs-built_in">begin</span>(), weapons.<span class="hljs-built_in">end</span>(), cmp);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">warrior::report</span><span class="hljs-params">(<span class="hljs-type">int</span> t, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *N)</span></span><br><span class="hljs-function"></span>&#123;<br>	std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; t;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:55 %s %s %d has %d sword %d bomb %d arrow and %d elements\n&quot;</span>,<br>		N, name.<span class="hljs-built_in">c_str</span>(), seria, WeaponsNum[<span class="hljs-number">0</span>], WeaponsNum[<span class="hljs-number">1</span>], WeaponsNum[<span class="hljs-number">2</span>], life);<br>&#125;<br><span class="hljs-comment">//time小时，str是红蓝的名字，city是city的编号</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dragon::yell</span><span class="hljs-params">(<span class="hljs-type">int</span> time, <span class="hljs-type">int</span> city)</span></span><br><span class="hljs-function"></span>&#123;<br>	std::cout &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; time;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:40 %s dragon %d yelled in city %d\n&quot;</span>, colorname.<span class="hljs-built_in">c_str</span>(), seria, city);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">warrior::gaming</span><span class="hljs-params">(<span class="hljs-type">int</span> times, <span class="hljs-type">int</span> &amp;t)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">auto</span> x = weapons[times];<br>	<span class="hljs-keyword">auto</span> p = x-&gt;<span class="hljs-built_in">using_weapon</span>(<span class="hljs-number">0</span>);<br>	<span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_use_bomb</span>())<br>		life -= p.second;<br>	<span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">is_bad</span>())<br>	&#123;<br>		--WeaponsNum[x-&gt;<span class="hljs-built_in">get_seria</span>()];<br>		--t;<br>		<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x0 : weapons)<br>		&#123;<br>			<span class="hljs-keyword">if</span> (x0 == x)<br>			&#123;<br>				weapons.<span class="hljs-built_in">erase</span>(weapons.<span class="hljs-built_in">begin</span>() + k);<br>				<span class="hljs-keyword">break</span>;<br>			&#125;<br>			k++;<br>		&#125;<br>		<span class="hljs-keyword">delete</span> x;<br>	&#125;<br>	<span class="hljs-keyword">return</span> p.first;<br>&#125;<br>dragon::<span class="hljs-built_in">dragon</span>(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> d, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> p) :<br>	<span class="hljs-built_in">warrior</span>(l, s, d, L, r, p)<br>&#123;<br>	name = <span class="hljs-string">&quot;dragon&quot;</span>;<br>	factorial::<span class="hljs-built_in">creator_weapon</span>(d, s, <span class="hljs-number">1</span>, weapons, WeaponsNum);<br>&#125;<br>ninja::<span class="hljs-built_in">ninja</span>(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> d, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> p) :<br>	<span class="hljs-built_in">warrior</span>(l, s, d, L, r, p)<br>&#123;<br>	name = <span class="hljs-string">&quot;ninja&quot;</span>;<br>	factorial::<span class="hljs-built_in">creator_weapon</span>(d, s, <span class="hljs-number">2</span>, weapons, WeaponsNum);<br>&#125;<br>iceman::<span class="hljs-built_in">iceman</span>(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> d, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> p) :<br>	<span class="hljs-built_in">warrior</span>(l, s, d, L, r, p)<br>&#123;<br>	name = <span class="hljs-string">&quot;iceman&quot;</span>;<br>	factorial::<span class="hljs-built_in">creator_weapon</span>(d, s, <span class="hljs-number">1</span>, weapons, WeaponsNum);<br>&#125;<br>lion::<span class="hljs-built_in">lion</span>(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> d, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> k) :<br>	<span class="hljs-built_in">warrior</span>(l, s, d, L, r, p), <span class="hljs-built_in">K</span>(k)<br>&#123;<br>	name = <span class="hljs-string">&quot;lion&quot;</span>;<br>	loyalty = r;<br>	factorial::<span class="hljs-built_in">creator_weapon</span>(d, s, <span class="hljs-number">1</span>, weapons, WeaponsNum);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">warrior::rob_weapon</span><span class="hljs-params">(warrior* enermy)</span>			<span class="hljs-comment">//抢劫武器</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> min = INT_MAX;<br>	<span class="hljs-keyword">if</span> (weapons.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">10</span>)<br>	&#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : enermy-&gt;<span class="hljs-built_in">get_weapons</span>())<br>			<span class="hljs-keyword">delete</span> x;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	<span class="hljs-built_in">sort</span>(enermy-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">begin</span>(), enermy-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">end</span>(), cmp1);<br>	<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">while</span> (weapons.<span class="hljs-built_in">size</span>() != <span class="hljs-number">10</span> &amp;&amp; t &lt; enermy-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>())<br>	&#123;<br>		weapons.<span class="hljs-built_in">push_back</span>(enermy-&gt;<span class="hljs-built_in">get_weapons</span>()[t]);<br>		enermy-&gt;<span class="hljs-built_in">get_weapons</span>()[t]-&gt;<span class="hljs-built_in">change_damege</span>(<span class="hljs-built_in">get_attack</span>());<br>		++WeaponsNum[enermy-&gt;<span class="hljs-built_in">get_weapons</span>()[t]-&gt;<span class="hljs-built_in">get_seria</span>()];<br>		++t;<br>	&#125;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = t; k &lt; enermy-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>(); k++)<br>		<span class="hljs-keyword">delete</span> enermy-&gt;<span class="hljs-built_in">get_weapons</span>()[k];<br>&#125;<br><span class="hljs-comment">//wolf的抢劫不删除剩余的武器</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">wolf::wolf_rob</span><span class="hljs-params">(warrior* enermy, <span class="hljs-type">int</span> NowTime, <span class="hljs-type">int</span> City)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (weapons.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">10</span> || enermy-&gt;<span class="hljs-built_in">get_weapons</span>().<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<br>		<span class="hljs-keyword">return</span>;<br>	<span class="hljs-type">int</span> min = INT_MAX;<br>	std::vector&lt;weapon*&gt; temp;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : enermy-&gt;<span class="hljs-built_in">get_weapons</span>())<br>	&#123;<br>		min = min &lt; x-&gt;<span class="hljs-built_in">get_seria</span>() ? min : x-&gt;<span class="hljs-built_in">get_seria</span>();<br>	&#125;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : enermy-&gt;<span class="hljs-built_in">get_weapons</span>())<br>	&#123;<br>		<span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">get_seria</span>() == min)<br>		&#123;<br>			temp.<span class="hljs-built_in">push_back</span>(x);<br>		&#125;<br>	&#125;<br>	<span class="hljs-comment">//把武器排好序</span><br>	std::<span class="hljs-built_in">sort</span>(temp.<span class="hljs-built_in">begin</span>(), temp.<span class="hljs-built_in">end</span>(), cmp1);<br>	<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>	<span class="hljs-comment">//把要缴获的武器放进，容器里</span><br>	<span class="hljs-keyword">while</span> (weapons.<span class="hljs-built_in">size</span>() != <span class="hljs-number">10</span> &amp;&amp; t &lt; temp.<span class="hljs-built_in">size</span>())<br>	&#123;<br>		weapons.<span class="hljs-built_in">push_back</span>(temp[t]);<br>		temp[t]-&gt;<span class="hljs-built_in">change_damege</span>(<span class="hljs-built_in">get_attack</span>());<br>		++WeaponsNum[temp[t]-&gt;<span class="hljs-built_in">get_seria</span>()];<br>		<span class="hljs-comment">//把敌人的武器erase但不用delete;这里的erase只要一直begin就好！！</span><br>		enermy-&gt;<span class="hljs-built_in">change_weaponnum</span>(min);<br>		enermy-&gt;<span class="hljs-built_in">Delete_weapon</span>(temp[t]);<br>		++t;<br>	&#125;<br>	std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; NowTime;<br>	std::string s1;<br>	<span class="hljs-keyword">if</span> (min == <span class="hljs-number">0</span>)<br>		s1 = <span class="hljs-string">&quot;sword&quot;</span>;<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (min == <span class="hljs-number">1</span>)<br>		s1 = <span class="hljs-string">&quot;bomb&quot;</span>;<br>	<span class="hljs-keyword">else</span><br>		s1 = <span class="hljs-string">&quot;arrow&quot;</span>;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:35 %s %s %d took %d %s from %s %s %d in city %d\n&quot;</span>, colorname.<span class="hljs-built_in">c_str</span>(),<br>		<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">get_seria</span>(), t, s1.<span class="hljs-built_in">c_str</span>(), enermy-&gt;<span class="hljs-built_in">get_color</span>().<span class="hljs-built_in">c_str</span>(),<br>		enermy-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), enermy-&gt;<span class="hljs-built_in">get_seria</span>(), City);<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> NUM = <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_CITY = <span class="hljs-number">22</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(warrior *x, headquarter &amp;a, headquarter &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">get_color</span>() == a.<span class="hljs-built_in">get_name</span>())<br>		a.<span class="hljs-built_in">delete_warrior</span>(x);<br>	<span class="hljs-keyword">else</span><br>		b.<span class="hljs-built_in">delete_warrior</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> red[] = &#123; <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;		<span class="hljs-comment">//红色司令部制造武士的顺序</span><br>	<span class="hljs-type">int</span> blue[] = &#123; <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span> &#125;;		<span class="hljs-comment">//蓝色司令部制造武士的顺序</span><br>	<span class="hljs-type">int</span> lifearr[<span class="hljs-number">5</span>];<br>	<span class="hljs-type">int</span> attackarr[<span class="hljs-number">5</span>];<br>	<span class="hljs-type">int</span> TestNum, M, N, K, T, count = <span class="hljs-number">1</span>;				<span class="hljs-comment">//M生命元，N城市数量，K lion的忠诚消耗，T总时间</span><br>	std::cin &gt;&gt; TestNum;<br>	<span class="hljs-keyword">while</span> (TestNum--)<br>	&#123;<br>		std::cin &gt;&gt; M &gt;&gt; N &gt;&gt; K &gt;&gt; T;<br>		city *CityArr[MAX_CITY];<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">1</span>; t &lt;= N; t++)<br>			CityArr[t] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">city</span>(t);<br><br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d:\n&quot;</span>, count);<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b = <span class="hljs-number">0</span>; b &lt; NUM; b++)<br>			std::cin &gt;&gt; lifearr[b];<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b = <span class="hljs-number">0</span>; b &lt; NUM; b++)<br>			std::cin &gt;&gt; attackarr[b];<br>		<span class="hljs-function">headquarter <span class="hljs-title">a</span><span class="hljs-params">(M, red, <span class="hljs-number">0</span>, N, lifearr, attackarr, K)</span></span>;<br>		<span class="hljs-function">headquarter <span class="hljs-title">b</span><span class="hljs-params">(M, blue, <span class="hljs-number">1</span>, N, lifearr, attackarr, K)</span></span>;<br>		CityArr[<span class="hljs-number">0</span>] = &amp;a;<br>		CityArr[N + <span class="hljs-number">1</span>] = &amp;b;<br>		<span class="hljs-function">Time <span class="hljs-title">temp</span><span class="hljs-params">(T)</span></span>;<br>		<span class="hljs-keyword">while</span> (a.<span class="hljs-built_in">is_continue</span>() &amp;&amp; b.<span class="hljs-built_in">is_continue</span>())<br>		&#123;<br>			temp.<span class="hljs-built_in">create_event</span>(a, b);<br>			<span class="hljs-keyword">if</span> (temp.<span class="hljs-built_in">get_nowtime</span>() * <span class="hljs-number">60</span> &gt;= T)<br>				<span class="hljs-keyword">break</span>;<br>			temp.<span class="hljs-built_in">escape_event</span>(a, b);<br>			<span class="hljs-keyword">if</span> (temp.<span class="hljs-built_in">get_nowtime</span>() * <span class="hljs-number">60</span> + <span class="hljs-number">5</span> &gt;= T)<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">1</span>; t &lt;= N; t++)<br>				CityArr[t]-&gt;<span class="hljs-built_in">show_qwarriors</span>().<span class="hljs-built_in">clear</span>();<br>			temp.forward_event(a, b, CityArr);<br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt;= N + <span class="hljs-number">1</span>; t++)<br>			&#123;<br>				<span class="hljs-keyword">if</span> (CityArr[t]-&gt;<span class="hljs-built_in">show_qwarriors</span>().<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">0</span>)<br>				&#123;<br>					<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : CityArr[t]-&gt;<span class="hljs-built_in">show_qwarriors</span>())<br>					&#123;<br>						std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; temp.<span class="hljs-built_in">get_nowtime</span>();<br>						<span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">get_loc</span>() != b.<span class="hljs-built_in">get_location</span>() &amp;&amp; x-&gt;<span class="hljs-built_in">get_loc</span>() != a.<span class="hljs-built_in">get_location</span>())<br>						&#123;<br>							<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:10 %s %s %d marched to city %d with %d elements and force %d\n&quot;</span>,<br>								x-&gt;<span class="hljs-built_in">get_color</span>().<span class="hljs-built_in">c_str</span>(), x-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), x-&gt;<span class="hljs-built_in">get_seria</span>(), x-&gt;<span class="hljs-built_in">get_loc</span>(),<br>								x-&gt;<span class="hljs-built_in">get_life</span>(), x-&gt;<span class="hljs-built_in">get_attack</span>());<br>						&#125;<br>						<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x-&gt;<span class="hljs-built_in">get_loc</span>() == a.<span class="hljs-built_in">get_location</span>())<br>						&#123;<br>							<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:10 %s %s %d reached %s headquarter with %d elements and force %d\n&quot;</span>,<br>								b.<span class="hljs-built_in">get_name</span>(), x-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), x-&gt;<span class="hljs-built_in">get_seria</span>(), a.<span class="hljs-built_in">get_name</span>(),<br>								x-&gt;<span class="hljs-built_in">get_life</span>(), x-&gt;<span class="hljs-built_in">get_attack</span>());<br>							std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; temp.<span class="hljs-built_in">get_nowtime</span>();<br>							<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:10 %s headquarter was taken\n&quot;</span>, a.<span class="hljs-built_in">get_name</span>());<br>							a.<span class="hljs-built_in">Been_Token</span>();<br>						&#125;<br>						<span class="hljs-keyword">else</span><br>						&#123;<br>							<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:10 %s %s %d reached %s headquarter with %d elements and force %d\n&quot;</span>,<br>								a.<span class="hljs-built_in">get_name</span>(), x-&gt;<span class="hljs-built_in">get_name</span>().<span class="hljs-built_in">c_str</span>(), x-&gt;<span class="hljs-built_in">get_seria</span>(), b.<span class="hljs-built_in">get_name</span>(),<br>								x-&gt;<span class="hljs-built_in">get_life</span>(), x-&gt;<span class="hljs-built_in">get_attack</span>());<br>							std::cout &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; temp.<span class="hljs-built_in">get_nowtime</span>();<br>							<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;:10 %s headquarter was taken\n&quot;</span>, b.<span class="hljs-built_in">get_name</span>());<br>							b.<span class="hljs-built_in">Been_Token</span>();<br>						&#125;<br>					&#125;<br>				&#125;<br>			&#125;<br>			<span class="hljs-keyword">if</span> (!a.<span class="hljs-built_in">is_continue</span>() || !b.<span class="hljs-built_in">is_continue</span>())<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">if</span> (temp.<span class="hljs-built_in">get_nowtime</span>() * <span class="hljs-number">60</span> + <span class="hljs-number">10</span> &gt;= T)<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">1</span>; t &lt;= N; t++)<br>			&#123;<br>				<span class="hljs-keyword">if</span> (CityArr[t]-&gt;<span class="hljs-built_in">show_qwarriors</span>().<span class="hljs-built_in">size</span>() == <span class="hljs-number">2</span>)<br>				&#123;<br>					<span class="hljs-keyword">auto</span> x = CityArr[t]-&gt;<span class="hljs-built_in">show_qwarriors</span>();<br>					<span class="hljs-keyword">auto</span> x1 = x[<span class="hljs-number">0</span>];<br>					<span class="hljs-keyword">auto</span> x2 = x[<span class="hljs-number">1</span>];<br>					temp.<span class="hljs-built_in">rob_event</span>(x1, x2, t);<br>				&#125;<br>			&#125;<br>			<span class="hljs-keyword">if</span> (temp.<span class="hljs-built_in">get_nowtime</span>() * <span class="hljs-number">60</span> + <span class="hljs-number">35</span> &gt;= T)<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">auto</span> redheadquarterwarriors = a.<span class="hljs-built_in">get_warrios</span>();<br>			<span class="hljs-keyword">auto</span> blueheadquarterwarriors = b.<span class="hljs-built_in">get_warrios</span>();<br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">1</span>; t &lt;= N; t++)<br>			&#123;<br>				<span class="hljs-comment">//奇数红色先攻击，偶数蓝色先攻击</span><br>				<span class="hljs-keyword">if</span> (CityArr[t]-&gt;<span class="hljs-built_in">show_qwarriors</span>().<span class="hljs-built_in">size</span>() == <span class="hljs-number">2</span>)<br>				&#123;<br>					<span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>					<span class="hljs-keyword">auto</span> x = CityArr[t]-&gt;<span class="hljs-built_in">show_qwarriors</span>();<br>					<span class="hljs-keyword">auto</span> x1 = x[<span class="hljs-number">0</span>];<br>					<span class="hljs-keyword">auto</span> x2 = x[<span class="hljs-number">1</span>];<br>					<span class="hljs-comment">//让x1为红，x2为蓝</span><br>					<span class="hljs-keyword">if</span> (t % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>					&#123;<br>						<span class="hljs-keyword">if</span> (x1-&gt;<span class="hljs-built_in">get_color</span>() == <span class="hljs-string">&quot;blue&quot;</span>)<br>						&#123;<br>							std::<span class="hljs-built_in">swap</span>(x1, x2);<br>						&#125;<br>					&#125;<br>					<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>					&#123;<br>						<span class="hljs-keyword">if</span> (x1-&gt;<span class="hljs-built_in">get_color</span>() == <span class="hljs-string">&quot;red&quot;</span>)<br>						&#123;<br>							std::<span class="hljs-built_in">swap</span>(x1, x2);<br>						&#125;<br>					&#125;<br>					<span class="hljs-type">int</span> result = temp.<span class="hljs-built_in">fight_event</span>(x1, x2, t);<br>					<span class="hljs-keyword">if</span> (result == <span class="hljs-number">1</span>)	<span class="hljs-comment">//blue赢</span><br>					&#123;<br>						<span class="hljs-keyword">if</span> (x1-&gt;<span class="hljs-built_in">get_color</span>() == <span class="hljs-string">&quot;red&quot;</span>)	<span class="hljs-comment">//没交换</span><br>						&#123;<br>							<span class="hljs-built_in">Delete</span>(x1, a, b);<br>							CityArr[t]-&gt;<span class="hljs-built_in">city_delete</span>(x1);<br>							<span class="hljs-keyword">delete</span> x1;<br>						&#125;<br>						<span class="hljs-keyword">else</span><br>						&#123;<br>							<span class="hljs-built_in">Delete</span>(x2, a, b);<br>							CityArr[t]-&gt;<span class="hljs-built_in">city_delete</span>(x2);<br>							<span class="hljs-keyword">delete</span> x2;<br>						&#125;<br>					&#125;<br>					<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result == <span class="hljs-number">-1</span>)<br>					&#123;<br>						<span class="hljs-keyword">if</span> (x1-&gt;<span class="hljs-built_in">get_color</span>() == <span class="hljs-string">&quot;blue&quot;</span>)<br>						&#123;<br>							<span class="hljs-built_in">Delete</span>(x1, a, b);<br>							CityArr[t]-&gt;<span class="hljs-built_in">city_delete</span>(x1);<br>							<span class="hljs-keyword">delete</span> x1;<br>						&#125;<br>						<span class="hljs-keyword">else</span><br>						&#123;<br>							<span class="hljs-built_in">Delete</span>(x2, a, b);<br>							CityArr[t]-&gt;<span class="hljs-built_in">city_delete</span>(x2);<br>							<span class="hljs-keyword">delete</span> x2;<br>						&#125;<br>					&#125;<br>					<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result == <span class="hljs-number">2</span>)<br>					&#123;<br>						<span class="hljs-keyword">if</span> (x1-&gt;<span class="hljs-built_in">get_color</span>() == <span class="hljs-string">&quot;red&quot;</span>)<br>						&#123;<br>							a.<span class="hljs-built_in">delete_warrior</span>(x1);<br>							b.<span class="hljs-built_in">delete_warrior</span>(x2);<br>						&#125;<br>						<span class="hljs-keyword">else</span><br>						&#123;<br>							a.<span class="hljs-built_in">delete_warrior</span>(x2);<br>							b.<span class="hljs-built_in">delete_warrior</span>(x1);<br>						&#125;<br>						CityArr[t]-&gt;<span class="hljs-built_in">city_delete</span>(x1);<br>						CityArr[t]-&gt;<span class="hljs-built_in">city_delete</span>(x2);<br>						<span class="hljs-keyword">delete</span> x[<span class="hljs-number">1</span>];<br>						<span class="hljs-keyword">delete</span> x[<span class="hljs-number">0</span>];<br>					&#125;<br>				&#125;<br>			&#125;<br>			<span class="hljs-keyword">if</span> (temp.<span class="hljs-built_in">get_nowtime</span>() * <span class="hljs-number">60</span> + <span class="hljs-number">40</span> &gt;= T)<br>				<span class="hljs-keyword">break</span>;<br>			temp.<span class="hljs-built_in">headquarte_report</span>(a);<br>			temp.<span class="hljs-built_in">headquarte_report</span>(b);<br>			<span class="hljs-keyword">if</span> (temp.<span class="hljs-built_in">get_nowtime</span>() * <span class="hljs-number">60</span> + <span class="hljs-number">50</span> &gt;= T)<br>				<span class="hljs-keyword">break</span>;<br>			<span class="hljs-comment">//temp.warrior_report(a, b);</span><br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t = <span class="hljs-number">0</span>; t &lt;= N + <span class="hljs-number">1</span>; t++)<br>			&#123;<br>				<span class="hljs-keyword">auto</span> x = CityArr[t]-&gt;<span class="hljs-built_in">show_qwarriors</span>();<br>				<span class="hljs-keyword">if</span> (x.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>)<br>				&#123;<br>					temp.<span class="hljs-built_in">warriors_report</span>(x[<span class="hljs-number">0</span>]);<br>				&#125;<br>				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x.<span class="hljs-built_in">size</span>() == <span class="hljs-number">2</span>)<br>				&#123;<br>					<span class="hljs-keyword">if</span> (x[<span class="hljs-number">0</span>]-&gt;<span class="hljs-built_in">get_color</span>() == <span class="hljs-string">&quot;red&quot;</span>)<br>					&#123;<br>						temp.<span class="hljs-built_in">warriors_report</span>(x[<span class="hljs-number">0</span>]);<br>						temp.<span class="hljs-built_in">warriors_report</span>(x[<span class="hljs-number">1</span>]);<br>					&#125;<br>					<span class="hljs-keyword">else</span><br>					&#123;<br>						temp.<span class="hljs-built_in">warriors_report</span>(x[<span class="hljs-number">1</span>]);<br>						temp.<span class="hljs-built_in">warriors_report</span>(x[<span class="hljs-number">0</span>]);<br>					&#125;<br>				&#125;<br>			&#125;<br>			<span class="hljs-keyword">if</span> (temp.<span class="hljs-built_in">get_nowtime</span>() * <span class="hljs-number">60</span> + <span class="hljs-number">55</span> &gt;= T)<br>				<span class="hljs-keyword">break</span>;<br>			temp.<span class="hljs-built_in">add_nowtime</span>();<br>		&#125;<br>		++count;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>离散数学复习</title>
    <url>/2021/01/22/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h3><ul>
<li><p>零图：$E = ∅$，即只有顶点，没有边的图。</p>
</li>
<li><p>平凡图：只有一个顶点（也称$1$阶图）的零图。</p>
</li>
<li><p>悬挂顶点：度数为$1$的顶点；悬挂边：与悬挂顶点关联的边。</p>
</li>
<li><p>在无向图中，图的最大度：$∆(G)={d(v)|v\in V}$，其中$V$表示顶点集，$d(v)$表示顶点的度数，记住用$\Delta(G)$去表示最大度；同理图的最小度的定义易得，注意的是我们用$\delta(G)$表示图的最小度。另外无向图用$(v_n,v_m)$表示边。</p>
</li>
<li><p>在有向图中，$v$的入度$d^+(v)$，$v$的出度$d^-(v)$，$v$的度数$d(v) = d^+(v)+d^-(v)$，同时有向图还定义了出度、入度的最大度和最小度。有向图用$\langle v_n,v_m \rangle$表示边。</p>
</li>
<li><p>握手定理：图的所有顶点的度数之和等于边数的$2$倍，因为每条边都提供$2$度，所以度数之和一定是偶数。</p>
</li>
<li><p>度数列：$V={v_1,v_2,…v_n}$，$G$的度数列：$d(v_1),d(v_2),…,d(v_n)$。</p>
</li>
<li><p>简单图：既无平行边也无环的图称为简单图。其中平行边的条数称为重数。</p>
</li>
<li><p>完全图和正则图：无向完全图，记作$K_n$，边数为$n(n-1)/2$，有向完全图，边数为$n(n-1)$；$k-$正则图：每个顶点的度数均为$k$的无向简单图。</p>
</li>
<li><p>子图：生成子图：$V’ = V$且$G’\subseteq G$；$V’$的导出子图，以两端点都在$V’$中所有的边集的子图，记作$G[V’]$；$E’$的导出子图：以$E’$所以关联的顶点为顶点集的子图，记作$G[E’]$。</p>
</li>
<li><p>通路：$Γ = v_0e_1v_1e_2…e_lv_l$ ，称$Γ$为$v_0$到$v_l$的通路，$l$为通路的长度，若$v_0=v_l$则称$Γ $为回路。若通路（回路）中所有顶点（对于回路，$v_0=v_l$）各异，称此通路<strong>初级通路（回路）</strong>；若通路中所有的边各异，则称为简单通路。初级通路是简单通路，反之不然。</p>
</li>
<li><p>$Γ$的表示方法 ：用顶点和边交替序列、用边序列、简单图中用顶点序列。</p>
</li>
<li><p>连通分支：设$R$是$G$中顶点之间的连通关系，按$R$可将$V(G)$划分为$k$个等价类，记作$V_1,V_2,…,V_k$，由他们的导出子图$G[V_1],G[V_2],…,G[V_k]$称为$G$的连通分支。令$p(G)=k$表示$G$的连通分支数为$k$。</p>
</li>
<li><p>点割集与边割集：若$V’ \subset V$，$p(V-V’)&gt;p(V)$，且$\forall V’’ \subset V$，$p(V-V’’) = V$，则称$V’$为$G$的点割集，若点割集只有一个点，则称此顶点为割点；同理可以得到边割集的定义，若边割集只有一条边则称此边为割边或桥。</p>
</li>
<li><p>点连通度和边连通度：记$min{|V’| \space | V’$是$G$的点割集$}=\kappa(G)$，称为$G$的点连通度；记$min{|E’| \space|E’$是$G$的边割集$} = \lambda(G)$，称为$G$的边连通度。对于任意的无向图有$\kappa(G)\leq \lambda(G)\leq \delta(G)$ 。</p>
</li>
<li><p>二部图判别定理：无向图$G=\langle V,E\rangle$是二部图当且仅当$G$中无奇数长度的回路，记作$\langle V_1,V_2,E\rangle$。二部图还有一个非常重要的匹配问题，匹配就是$E’ \subseteq E$，且$E’$中的边互补相邻，注意极大匹配，最大匹配，完备匹配，完美匹配等问题。</p>
<span id="more"></span>
</li>
<li><p>完备匹配判定定理$(|V_1|\leq|V_2|) $：(Hall定理)，存在$V_1,V_2$的完备匹配当且仅当$V_1$中任意$k(1\leq k\leq |V_1|)$个顶点至少与$V_2$中$k$个顶点相邻；（t条件）：如果存在正整数$t$，使得$V_1$中每个顶点至少关联$t$条边，而$V_2$中的顶点至多关联$t$条边，则$G$中存在$V_1$到$V_2$的完备匹配。</p>
</li>
<li><p>无向图关联矩阵：$m<em>{ij}$为$v_i$与$e_j$的关联次数；无环有向图关联矩阵：$m</em>{ij}=-1,0,1$，$1$代表是起点，$-1$代表是终点；关联矩阵记为$M$。<br>有向图的邻接矩阵：$a<em>{i,j}$为以$v_i$为起点，$v_j$为终点的边的条数，记为$A$。$A^l$中元素表示长度为$l$的边的条数。<br>可达矩阵：$p</em>{ij} = 0,1$，$1$表示可达。</p>
</li>
<li><p>欧拉通路：经过所有顶点且每条边恰好且经过一次的通路。无向图具有欧拉回路当且仅当$G$是连通的且无奇度顶点，无向图具有欧拉通路当且仅当图是连通的且只有两个奇度顶点。有向图具有欧拉回路当且仅当$G$是连通的且每个顶点的出度等于入度，具有欧拉通路当且图中有一个顶点$d^—d^+ = 1$，有一个顶点$d^+-d^-=1$，其他顶点的出度等于入度。</p>
</li>
<li><p>哈密顿通路：经过图中所有顶点一次且仅一次的通路。<br>必要条件：若无向图是哈密顿图，则对于$V$的任意非空真子集$V’$，均有$p(V-V’)&lt;|V’|$,推论，有割点的图不是哈密顿图。<br>充分条件：若$G$是$n$阶无向图，$d(u)+d(v)\geq n-1$，$u,v$为$G$中任意不相邻点，则$G$中存在哈密顿通路；若$d(u)+d(v)\geq n$则$G$中存在哈密顿回路。</p>
</li>
<li><p>基本回路系统：设$T$是$n$阶$m$条边的无向连通图$G$的一棵生成树，设$e<em>1,e_2,…,e</em>{n-m+1}$为$T$的弦，$C<em>r(r=1,2,…,m-n+1)$为$T$添加弦$e_r$产生的$G$中由弦$e_r$和树枝构成的圈，称$C_r$为$G$的对应弦$e_r$基本回路或基本图，称${C_1.C_2,…,C</em>{m-n+1}}$为$G$对应$T$的基本回路系统，称$m-n+1$为$G$的圈秩，记作$ξ(G)$。</p>
</li>
<li><p>基本割集系统：设$T$是$n$阶的无向连通图$G$的一棵生成树，设$e<em>1,e_2,…,e</em>{n-1}$为$T$的树枝，$S<em>i(i=1,2,..,n-1)$为由树枝$e_i$和弦构成的割集。称${S_1,S_2,…,S</em>{n-1}}$为$G$对应$T$的基本割集系统，称$n-1$为$G$的割集秩，记作$η(G)$。</p>
</li>
<li><p>平面图与平面嵌入：如果能将图$G$中除顶点外边不相交地画在平面上，则称$G$是平面图，由这个图画出的无边相交的图称为$G$的平面嵌入，没有平面嵌入的图称为非平面图。</p>
</li>
<li><p>平面图的一些概念：无限面，用$R_0$表示，有限面，用$R_1, R_2, …, R_k$表示，面$R_i$的次数，$R$边界的长度，用$deg(R_i)$表示。<br>平面图各面的次数之和等于边数的$2$倍，一条边或者是$2$个面的公共边界，或者在一个面中出现两次，特别要注意的是这种出现两次的情况，这种边应该只会在无限面中出现，所以在写无限面的边界时也应该注意，这条边要写两次。</p>
</li>
<li><p>极大平面图：在简单平面中任意不相邻的顶点之间加一条新边所得的图为非平面图。极大平面是连通的，且设$G$为$n(\geq3)$阶简单平面图，$G$为极大平面图的充分必要条件是，$G$的每个面次数均为$3$。</p>
</li>
<li><p>欧拉公式：设$G$为$n$阶$m$条边$r$个面的连通平面图，则$n-m+r=2$。<br>欧拉公式的推论：设平面$G$中有$p(p\geq 2)$连通分支，则$n-m+r=p+1$</p>
</li>
<li><p>同胚与收缩：$G<em>1$与$G_2$同构，或经过反复插入或消去$2$度顶点后，称为同胚。收缩边称为收缩。<br>库拉图斯基定理：一个图是平面图当且仅当它既不包含与$K_5$同胚的<strong>子图</strong>，也不含与$K</em>{3,3}$同胚的子图，一个图是平面图当且仅当它既无可收缩为$K<em>5$的子图，也无可收缩为$K</em>{3,3}$的子图。</p>
</li>
<li><p>对偶图的性质：设$G^<em>$是连通图$G$的对偶图，$n^</em>,m^<em>,r^</em>$和$n,m,r$分别为$G^<em>,G$的顶点数，边数，面数，有$n^</em>=r,m<em>=m,r^</em>=n$，设$G^<em>$的顶点$v^</em>_i$位于$G$的面$R_i$中，则$d(v^*_i)=deg(R_i)$。</p>
</li>
</ul>
<h3 id="代数结构"><a href="#代数结构" class="headerlink" title="代数结构"></a>代数结构</h3><ul>
<li>积代数：设$V_1 = \langle S_1, \circ \rangle, V_2 =\langle S_2, <em>\rangle$，$V_1$与$V_2$的积代数$V=\langle S_1\times S_2,\cdot\rangle$，$\langle x_1, y_1 \rangle,\langle x_2,y_2\rangle \in S_1\times S_2$。$\langle x_1, y_1 \rangle\cdot \langle x_2,y_2\rangle$<br>$=&lt;x_1\circ x_2, y_1</em>y_2&gt;$。</li>
<li>设$G=<a>$是$n$阶循环群，则对$n$的每个正因子$d$，$G$恰好有一个$d$阶的子群。</li>
<li>设$G=<a>$是循环群，若$G$是无限循环群，则$G$只有两个生成元，即$a$和$a^{-1}$。若$G$是$n$阶循环群，则$G$有$\phi(n)$个生成元，对于任意小于$n$且与$n$互素的自然数$r$，$a^r$是$G$的生成元。</li>
<li>子环判别定理：设$R$是环，$S$是$R$得非空子集，若$\forall a, b \in S$，$a-b\in S$且$\forall a,b \in S，ab\in S$，则$S$是$R$的子环。</li>
<li>如果$R$既是交换环、含幺环、无零因子环，则称$R$是整环。</li>
<li>域：若$R$是整环，则对$R$中的每个元素(${0}$除外)，都有逆元，则称$R$是域。</li>
<li>格的定义：利用偏序集$\langle S, \preccurlyeq \rangle$，如果$\forall x, y \in S, {x,y}$都有最小上界和最大下界，则称$S$关于偏序$\preccurlyeq$做出一个格。$x$和$y$有$\vee, \wedge$两个运算，其中$\vee$表示最小上界，$\wedge$表示最大下届。其中运算$\vee, \wedge$还要满足交换律，结合律，幂等律，吸收律$a(a\vee b) = a,a(a\wedge b)=a$。</li>
<li>格的等价定义：设$\langle L,<em>,\cdot \rangle$是具有两个二元运算的代数系统，如果$</em>,\cdot$满足交换律，结合律，幂等律，吸收率，则称$\langle L,*,\cdot \rangle$是格。</li>
<li>判断一个偏序集是否构成格：可以判断每两个元素的最小上界跟最大下界是否唯一，如果不唯一则不构成格。</li>
<li>分配格：$L$是分配格当且仅当$L$不含与砖石格或者五角格同构的子格。或者当且仅当$\forall a,b,c \in L$有$(a\vee b = a\vee c 且a\wedge b=a\wedge c)$$\rightarrow (b=c)$。特别的小于$5$元的格，链都是分配格。</li>
<li>设$\langle L, \wedge,\vee,0,1\rangle$是有界格，$a\in L$, 若存在$b\in L$使得$a\vee b =1$和$a\wedge b=0$成立则称$b$是$a$的补元。若$L$是有界分配格，则若$L$中的元素存在补元，则只存在唯一的补元。若$L$中所有的元素都存在补元，则称$L$为有补格。</li>
<li>如果一个格是有补分配格，则称它为布尔格或者布尔代数，记作$\langle L, \wedge,\vee,0,1,’\rangle$，任何有限布尔代数的元素的个数都是$2^n$。有$(a’)’=a$，还有德摩根律。</li>
</ul>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
  </entry>
  <entry>
    <title>分布式商城学习记录</title>
    <url>/2022/07/04/%E5%88%86%E5%B8%83%E5%BC%8F%E5%95%86%E5%9F%8E%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="分布式商城">分布式商城</h1>
<h2 id="分布式入门">分布式入门</h2>
<h3 id="分布式基础-环境搭建">分布式基础 &amp; 环境搭建</h3>
<h4 id="项目简介">项目简介</h4>
<h4 id="项目背景">1.项目背景</h4>
<h5 id="电商模式">1.1电商模式</h5>
<ul>
<li>B2B 模式</li>
</ul>
<p>​ B2B (Business to Business)， 是指商家与商家建立的商业关系。 如：阿里巴巴</p>
<ul>
<li><p>B2C 模式</p>
<p>B2C (Business to Consumer)， 就是我们经常看到的供应商直接把商品卖给用户，即“商对客” 模式，也就是通常说的商业零售，直接面向消费者销售产品和服务。如：苏宁易购、京东、天猫、小米商城</p></li>
<li><p>C2B 模式</p>
<p>C2B (Customer to Business)，即消费者对企业。先有消费者需求产生而后有企业生产，即先 有消费者提出需求，后有生产企业按需求组织生产</p></li>
<li><p>C2C模式</p>
<p>C2C (Customer to Consumer) ，客户之间自己把东西放上网去卖，如：淘宝，闲鱼</p></li>
<li><p>O2O 模式</p>
<p>O2O 即 Online To Offline，也即将线下商务的机会与互联网结合在了一起，让互联网成为线 下交易的前台。线上快速支付，线下优质服务。如：饿了么，美团，淘票票，京东到家</p></li>
</ul>
<h4 id="项目架构图">2.项目架构图</h4>
<h5 id="项目微服务架构图">2.1 项目微服务架构图</h5>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/202207041533.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<h5 id="微服务划分图">2.2 微服务划分图</h5>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/202207041536.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<h4 id="项目技术-特色">3. 项目技术 &amp; 特色</h4>
<ul>
<li><p>前后分离开发，并开发基于 vue 的后台管理系统</p></li>
<li><p>SpringCloud 全新的解决方案</p></li>
<li><p>应用监控、限流、网关、熔断降级等分布式方案 全方位涉及</p></li>
<li><p>透彻讲解分布式事务、分布式锁等分布式系统的难点</p></li>
<li><p>分析高并发场景的编码方式，线程池，异步编排等使用</p></li>
<li><p>压力测试与性能优化</p></li>
<li><p>各种集群技术的区别以及使用</p></li>
<li><p>CI/CD 使用</p></li>
<li><p>...</p></li>
</ul>
<h4 id="分布式基础概念">分布式基础概念</h4>
<h4 id="微服务">1.微服务</h4>
<p>微服务架构风格，就像是把一个<strong>单独的应用程序</strong>开发为<strong>一套小服务</strong>，每个<strong>小服务</strong>运行在<strong>自</strong></p>
<p><strong>己</strong>的<strong>进程</strong>中，并使用轻量级机制通信，通常是 HTTP API。这些服务围绕业务能力来构建，</p>
<p>并通过完全自动化部署机制来独立部署。这些服务使用不同的编程语言书写，以及不同数据</p>
<p>存储技术，并保持最低限度的集中式管理。</p>
<h4 id="集群-分布式-节点">2.集群 &amp; 分布式 &amp; 节点</h4>
<p>集群是个物理形态，分布式是个工作方式。</p>
<p>只要是一堆机器，就可以叫集群，他们是不是一起协作着干活，这个谁也不知道；</p>
<p><strong>分布式是指将不同的业务分布在不同的地方。</strong></p>
<p><strong>集群指的是将几台服务器集中在一起，实现同一业务。</strong></p>
<p>例如：<strong>京东是一个分布式系统，众多业务运行在不同的机器</strong>，所有业务构成一个大型的<strong>业</strong></p>
<p><strong>务集群</strong>。每一个小的业务，比如用户系统，访问压力大的时候一台服务器是不够的。我们就</p>
<p>应该将用户系统部署到多个服务器，也就是<strong>每一个业务系统也可以做集群化</strong>；</p>
<p>节点：集群中的一个服务器</p>
<h4 id="远程调用">3.远程调用</h4>
<p>在分布式系统中，各个服务可能处于不同主机，但是服务之间不可避免的需要互相调用，我们称为远程调用。</p>
<p>SpringCloud 中使用 HTTP+JSON 的方式完成远程调用</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220524152622.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<h4 id="负载均衡">4.负载均衡</h4>
<p><img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220524152715.png" alt="shadow" style="zoom:60%;" /></p>
<p>分布式系统中，A 服务需要调用 B 服务，B 服务在多台机器中都存在，A 调用任意一个服务器均可完成功能。</p>
<p>为了使每一个服务器都不要太忙或者太闲，我们可以负载均衡的调用每一个服务器，提升网站的健壮性。</p>
<p><strong>常见的负载均衡算法：</strong></p>
<p><strong>轮询：</strong></p>
<p>为第一个请求选择健康池中的第一个后端服务器，然后按顺序往后依次选择，直到最后一个，然后循环。</p>
<p><strong>最小连接：</strong></p>
<p>优先选择连接数最少，也就是压力最小的后端服务器，在会话较长的情况下可以考虑采取这种方式。</p>
<p><strong>散列：</strong></p>
<p>根据请求源的 IP 的散列（hash）来选择要转发的服务器。这种方式可以一定程</p>
<p>度上保证特定用户能连接到相同的服务器。如果你的应用需要处理状态而要求用户能连接到</p>
<p>和之前相同的服务器，可以考虑采取这种方式。</p>
<h4 id="服务注册发现注册中心">5.服务注册/发现&amp;注册中心</h4>
<p>A 服务调用 B 服务，A 服务并不知道 B 服务当前在哪几台服务器有，哪些正常的，哪些服务已经下线。</p>
<p>解决这个问题可以引入注册中心:</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220524152950.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>如果某些服务下线，我们其他人可以实时的感知到其他服务的状态，从而避免调用不可用的服务</p>
<h4 id="配置中心">6.配置中心</h4>
<p>每一个服务最终都有大量的配置，并且每个服务都可能部署在多台机器上。</p>
<p>我们经常需要变更配置，我们可以让每个服务在配置中心获取自己的配置。</p>
<p>配置中心用来集中管理微服务的配置信息</p>
<h4 id="服务熔断-服务降级">7.服务熔断 &amp; 服务降级</h4>
<p>在微服务架构中，微服务之间通过网络进行通信，存在相互依赖，当其中一个服务不可用时,有可能会造成雪崩效应。</p>
<p>要防止这样的情况，必须要有容错机制来保护服务。</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220524153143.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p><strong>服务熔断</strong></p>
<p>设置服务的超时时间, 当被调用的服务经常失败到达某个阈值, 我们可以开启断路保护机制, 后来的请求不再去调用这个服务。本地直接返回默认的数据。</p>
<p><strong>服务降级</strong></p>
<p>在运维期间, 当系统处于高峰期, 系统资源紧张, 我们可以让非核心业务降级运行。</p>
<p>降级：某些服务不处理，或者简单处理【抛异常、返回 NULL、调用 Mock 数据、调用 Fallback 处理逻辑】。</p>
<h4 id="api网关">8.api网关</h4>
<p>在微服务架构中，API Gateway 作为整体架构的重要组件，它<strong><em>抽象了微服务中都需要的公共功能</em></strong>，</p>
<p>同时提供了客户端<strong>负载均衡</strong>，<strong>服务自动熔断</strong>，<strong>灰度发布</strong>，<strong>统一认证</strong>，<strong>限流流控</strong>，<strong>日志统计</strong>等丰富的功能，</p>
<p>帮助我们解决很多 API 管理难题。</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220524153508.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<h4 id="环境搭建">环境搭建</h4>
<p>mysql5.7</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -p 3307:3306 --name mysql \<br>-v /mydata/mysql/log:/var/log/mysql \<br>-v /mydata/mysql/data:/var/lib/mysql \<br>-v /mydata/mysql/conf:/etc/mysql \<br>-e MYSQL_ROOT_PASSWORD=root \<br>-d mysql:5.7<br></code></pre></td></tr></table></figure>
<p>vim /mydata/mysql/conf/my.cnf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">[client]<br>default-character-set=utf8<br>[mysql]<br>default-character-set=utf8<br>[mysqld]<br>init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;<br>init_connect=&#x27;SET NAMES utf8&#x27;<br>character-set-server=utf8<br>collation-server=utf8_unicode_ci<br>skip-character-set-client-handshake<br>skip-name-resolve<br></code></pre></td></tr></table></figure>
<p>redis</p>
<p>创建redis配置文件目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -p 6380:6379 --name redis \<br>-v /mydata/redis/data:/data \<br>-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \<br>-d redis redis-server /etc/redis/redis.conf<br></code></pre></td></tr></table></figure>
<p>配置持久化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;appendonly yes&quot;</span>  &gt;&gt; /mydata/redis/conf/redis.conf<br><br><span class="hljs-comment"># 重启生效</span><br>docker restart redis<br></code></pre></td></tr></table></figure>
<p>容器随docker启动自动运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mysql</span><br>docker update mysql --restart=always<br><br><span class="hljs-comment"># redis</span><br>docker update redis --restart=always<br></code></pre></td></tr></table></figure>
<p><strong>开放端口</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">firewall-cmd --zone=public --add-port=6666/tcp --permanent<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure>
<h4 id="工程创建">工程创建</h4>
<h5 id="项目初始化">项目初始化</h5>
<p>商品服务、仓储服务、订单服务、优惠券服务、用户服务</p>
<p>共同点：</p>
<ol type="1">
<li>依赖 spring web、openfeign</li>
<li>服务包名：com.xinyu</li>
<li>模块名：</li>
</ol>
<ul>
<li><ul>
<li>优惠券服务：mall-coupon</li>
<li>用户服务：mall-member</li>
<li>订单服务：mall-order</li>
<li>商品服务：mall-product</li>
<li>仓储服务：mall-ware</li>
</ul></li>
</ul>
<h5 id="多模块开发">多模块开发</h5>
<p>多模块开发中, 使用父模块对子模块的管理非常方便</p>
<ol type="1">
<li>父模块pom中<code>&lt;properties&gt;</code>属性会被子模块继承</li>
<li>父模块pom中, 使用<code>&lt;dependencyManagement&gt;</code>可以进行子模块依赖的版本管理, 子模块继承父模块之后, 提供作用: 锁定版本+子模块不用写version</li>
<li>此外, 父模块中可以添加依赖作为全局依赖, 子模块自动继承。<code>&lt;dependencyManagement&gt;</code>外的<code>&lt;dependency&gt;</code>中定义全局依赖</li>
</ol>
<h5 id="目录结构">目录结构</h5>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220525191123.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<h5 id="数据库初始化">数据库初始化</h5>
<h4 id="分布式springcloud-环境">分布式SpringCloud 环境</h4>
<h5 id="组件选择">组件选择</h5>
<p>注册中心：SpringCloud Alibaba Nacos</p>
<p>配置中心：SpringCloud Alibaba Nacos</p>
<p>负载均衡：SpringCloud Ribbon</p>
<p>声明式HTTP客户端：SpringCloud Feign ——调用远程服务</p>
<p>负载均衡：SpringCloud Ribbon —— feign中已经整合，无需显示引用</p>
<p>服务容错：SpringCloud Alibaba Sentinel ——限流、降级、熔断</p>
<p>API网关：SpringCloud Gateway ——webflux 编程模式</p>
<p>调用链路监控：SpringCloud Sleuth</p>
<p>分布式事务：SpringCloud Alibaba Seata ——原Fescar</p>
<p>每个微服务创建自己的命名空间, 每个命名空间创建不同的分组来区分不同环境</p>
<p><strong>加载多个配置集</strong></p>
<h3 id="图片上传功能">图片上传功能</h3>
<p>OSS上传流程</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220527222853.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>创建子模块mall-third-party整合阿里云OSS</p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xinyu.mall<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mall-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alicloud-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>    <span class="hljs-attr">alicloud:</span><br>      <span class="hljs-attr">access-key:</span> <br>      <span class="hljs-attr">secret-key:</span> <br>      <span class="hljs-attr">oss:</span><br>        <span class="hljs-attr">endpoint:</span> <span class="hljs-string">oss-cn-guangzhou.aliyuncs.com</span><br>        <span class="hljs-attr">appcode:</span> <span class="hljs-string">63d0b9e0d609434bb0d8fb3c35eb5154</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">mall-third-party</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">30000</span><br></code></pre></td></tr></table></figure>
<p>bootstrap.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">mall-third-party</span><br><span class="hljs-attr">spring.cloud.nacos.config.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br><span class="hljs-attr">spring.cloud.nacos.config.namespace</span>=<span class="hljs-string">00d6ca31-6e71-4383-b71f-7baf5336d7e0</span><br><br><span class="hljs-attr">spring.cloud.nacos.config.extension-configs[0].data-id</span>=<span class="hljs-string">oss.yml</span><br><span class="hljs-attr">spring.cloud.nacos.config.extension-configs[0].group</span>=<span class="hljs-string">DEFAULT_GROUP</span><br><span class="hljs-attr">spring.cloud.nacos.config.extension-configs[0].refresh</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure>
<p>服务端签名接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OssController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OSS client;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.cloud.alicloud.oss.endpoint&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String endpoint;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.cloud.alicloud.access-key&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String accessId;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">bucket</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xinyu-mall&quot;</span>;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/oss/policy&quot;)</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">policy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 填写Host地址，格式为https://bucketname.endpoint。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://&quot;</span> + bucket + <span class="hljs-string">&quot;.&quot;</span> + endpoint;<br>        <span class="hljs-comment">// 设置上传回调URL，即回调服务器地址，用于处理应用服务器与OSS之间的通信。OSS会在文件上传完成后，把文件上传信息通过此回调URL发送给应用服务器。</span><br>        <span class="hljs-comment">// String callbackUrl = &quot;https://192.168.0.0:8888&quot;;</span><br>        <span class="hljs-comment">// 设置上传到OSS文件的前缀，可置空此项。置空后，文件将上传至Bucket的根目录下。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> format + <span class="hljs-string">&quot;/&quot;</span>;<br><br>        Map&lt;String, String&gt; respMap = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">expireEndTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis() + expireTime * <span class="hljs-number">1000</span>;<br>            <span class="hljs-type">Date</span> <span class="hljs-variable">expiration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(expireEndTime);<br>            <span class="hljs-type">PolicyConditions</span> <span class="hljs-variable">policyConds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PolicyConditions</span>();<br>            policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, <span class="hljs-number">0</span>, <span class="hljs-number">1048576000</span>);<br>            policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, dir);<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">postPolicy</span> <span class="hljs-operator">=</span> client.generatePostPolicy(expiration, policyConds);<br>            <span class="hljs-type">byte</span>[] binaryData = postPolicy.getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">encodedPolicy</span> <span class="hljs-operator">=</span> BinaryUtil.toBase64String(binaryData);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">postSignature</span> <span class="hljs-operator">=</span> client.calculatePostSignature(postPolicy);<br><br>            respMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>            respMap.put(<span class="hljs-string">&quot;accessid&quot;</span>, accessId);<br>            respMap.put(<span class="hljs-string">&quot;policy&quot;</span>, encodedPolicy);<br>            respMap.put(<span class="hljs-string">&quot;signature&quot;</span>, postSignature);<br>            respMap.put(<span class="hljs-string">&quot;dir&quot;</span>, dir);<br>            respMap.put(<span class="hljs-string">&quot;host&quot;</span>, host);<br>            respMap.put(<span class="hljs-string">&quot;expire&quot;</span>, String.valueOf(expireEndTime / <span class="hljs-number">1000</span>));<br>            <span class="hljs-comment">// respMap.put(&quot;expire&quot;, formatISO8601Date(expiration));</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// Assert.fail(e.getMessage());</span><br>            System.out.println(e.getMessage());<br>        &#125;<br>        <span class="hljs-keyword">return</span> R.ok().put(<span class="hljs-string">&quot;data&quot;</span>, respMap);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>使用网关服务统一接入</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">mall-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">third_party_route</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://mall-third-party</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/third-party/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">RewritePath=/api/third-party/(?&lt;segment&gt;.*),/$\&#123;segment&#125;</span><br></code></pre></td></tr></table></figure>
<p>单文件上传组件 singleUpload.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-upload<br>      action=&quot;http://gulimall-hello.oss-cn-beijing.aliyuncs.com&quot;<br>      :data=&quot;dataObj&quot;<br>      list-type=&quot;picture&quot;<br>      :multiple=&quot;false&quot; :show-file-list=&quot;showFileList&quot;<br>      :file-list=&quot;fileList&quot;<br>      :before-upload=&quot;beforeUpload&quot;<br>      :on-remove=&quot;handleRemove&quot;<br>      :on-success=&quot;handleUploadSuccess&quot;<br>      :on-preview=&quot;handlePreview&quot;&gt;<br>      &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;&gt;点击上传&lt;/el-button&gt;<br>      &lt;div slot=&quot;tip&quot; class=&quot;el-upload__tip&quot;&gt;只能上传jpg/png文件，且不超过10MB&lt;/div&gt;<br>    &lt;/el-upload&gt;<br>    &lt;el-dialog :visible.sync=&quot;dialogVisible&quot;&gt;<br>      &lt;img width=&quot;100%&quot; :src=&quot;fileList[0].url&quot; alt=&quot;&quot;&gt;<br>    &lt;/el-dialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>   import &#123;policy&#125; from &#x27;./policy&#x27;<br>   import &#123; getUUID &#125; from &#x27;@/utils&#x27;<br><br>  export default &#123;<br>    name: &#x27;singleUpload&#x27;,<br>    props: &#123;<br>      value: String<br>    &#125;,<br>    computed: &#123;<br>      imageUrl() &#123;<br>        return this.value;<br>      &#125;,<br>      imageName() &#123;<br>        if (this.value != null &amp;&amp; this.value !== &#x27;&#x27;) &#123;<br>          return this.value.substr(this.value.lastIndexOf(&quot;/&quot;) + 1);<br>        &#125; else &#123;<br>          return null;<br>        &#125;<br>      &#125;,<br>      fileList() &#123;<br>        return [&#123;<br>          name: this.imageName,<br>          url: this.imageUrl<br>        &#125;]<br>      &#125;,<br>      showFileList: &#123;<br>        get: function () &#123;<br>          return this.value !== null &amp;&amp; this.value !== &#x27;&#x27;&amp;&amp; this.value!==undefined;<br>        &#125;,<br>        set: function (newValue) &#123;<br>        &#125;<br>      &#125;<br>    &#125;,<br>    data() &#123;<br>      return &#123;<br>        dataObj: &#123;<br>          policy: &#x27;&#x27;,<br>          signature: &#x27;&#x27;,<br>          key: &#x27;&#x27;,<br>          ossaccessKeyId: &#x27;&#x27;,<br>          dir: &#x27;&#x27;,<br>          host: &#x27;&#x27;,<br>          // callback:&#x27;&#x27;,<br>        &#125;,<br>        dialogVisible: false<br>      &#125;;<br>    &#125;,<br>    methods: &#123;<br>      emitInput(val) &#123;<br>        this.$emit(&#x27;input&#x27;, val)<br>      &#125;,<br>      handleRemove(file, fileList) &#123;<br>        this.emitInput(&#x27;&#x27;);<br>      &#125;,<br>      handlePreview(file) &#123;<br>        this.dialogVisible = true;<br>      &#125;,<br>      beforeUpload(file) &#123;<br>        let _self = this;<br>        return new Promise((resolve, reject) =&gt; &#123;<br>          policy().then(response =&gt; &#123;<br>            console.log(&quot;响应的数据&quot;,response);<br>            _self.dataObj.policy = response.data.policy;<br>            _self.dataObj.signature = response.data.signature;<br>            _self.dataObj.ossaccessKeyId = response.data.accessid;<br>            _self.dataObj.key = response.data.dir +getUUID()+&#x27;_$&#123;filename&#125;&#x27;;<br>            _self.dataObj.dir = response.data.dir;<br>            _self.dataObj.host = response.data.host;<br>            console.log(&quot;响应的数据222。。。&quot;,_self.dataObj);<br>            resolve(true)<br>          &#125;).catch(err =&gt; &#123;<br>            reject(false)<br>          &#125;)<br>        &#125;)<br>      &#125;,<br>      handleUploadSuccess(res, file) &#123;<br>        console.log(&quot;上传成功...&quot;)<br>        this.showFileList = true;<br>        this.fileList.pop();<br>        this.fileList.push(&#123;name: file.name, url: this.dataObj.host + &#x27;/&#x27; + this.dataObj.key.replace(&quot;$&#123;filename&#125;&quot;,file.name) &#125;);<br>        this.emitInput(this.fileList[0].url);<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>
<p>获取服务端签名 policy.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> http <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/httpRequest.js&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">policy</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">return</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-title function_">http</span>(&#123;<br>            <span class="hljs-attr">url</span>: http.<span class="hljs-title function_">adornUrl</span>(<span class="hljs-string">&quot;/third-party/oss/policy&quot;</span>),<br>            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,<br>            <span class="hljs-attr">params</span>: http.<span class="hljs-title function_">adornParams</span>(&#123;&#125;)<br>        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; data &#125;</span>) =&gt;</span> &#123;<br>            <span class="hljs-title function_">resolve</span>(data);<br>        &#125;)<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>前端上传的流程为, 点击上传, 上传前调用beforeUpload方法, 获取服务端签名, 并设置相应的参数, 设置后完oss发起请求, 带上相应的参数dataObj, 上传成功后回调handleUploadSuccess方法, 存储图片的url</p>
<h3 id="数据校验">数据校验</h3>
<h4 id="基本使用">基本使用</h4>
<p>引入validation依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>给要注解的Bean加上相应的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotNull(message = &quot;执行update操作时, 品牌id必须不为空&quot;)</span><br><span class="hljs-meta">@TableId</span><br><span class="hljs-keyword">private</span> Long brandId;<br></code></pre></td></tr></table></figure>
<p>在controlller的方法参数Bean前加上@Valid注解, 表示这个参数需要开启校验</p>
<h4 id="分组校验">分组校验</h4>
<p>对同一个Entity针对, 不同的情况采用不同的校验规则。比如对于brandId, 在修改时, 我们期望它不为null, 在新增时, 它必须为null, 这种情况就可以使用分组校验</p>
<p>创建两个空的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UpdateGroup</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AddGroup</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在Bean添加注解时, 指定这个注解是针对哪个分组起作用的, 如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotNull(message = &quot;执行update操作时, 品牌id必须不为空&quot;, groups = UpdateGroup.class)</span><br><span class="hljs-meta">@Null(message = &quot;执行add操作时, 品牌id必须为空呢&quot;, groups = AddGroup.class)</span><br><span class="hljs-keyword">private</span> Long brandId;<br></code></pre></td></tr></table></figure>
<p>然后在controller中, 用@Validated加指定group的方式, 如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> R <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@Validated(AddGroup.class)</span> <span class="hljs-meta">@RequestBody</span> BrandEntity brand)</span>&#123;&#125;<br><br><span class="hljs-keyword">public</span> R <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@Validated(value = UpdateGroup.class)</span> <span class="hljs-meta">@RequestBody</span> BrandEntity brand)</span>&#123;&#125;<br></code></pre></td></tr></table></figure>
<p><strong>不过要注意的是, 对Bean没有指定分组的字段, 在分组校验的情况下不生效</strong></p>
<h4 id="自定义校验">自定义校验</h4>
<p>编写一个注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Constraint(validatedBy = &#123; ListValueConstrainValidator.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ListValue &#123;<br><br>    String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&#123;com.xinyu.common.valid.ListValue.message&#125;&quot;</span>;<br><br>    Class&lt;?&gt;[] groups() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Payload</span>&gt;[] payload() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-type">int</span>[] values() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>这个自定义校验@ListValue(values = {...})表示只要值在values范围才校验通过, 且</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&#123;com.xinyu.common.valid.ListValue.message&#125;&quot;</span>;<br></code></pre></td></tr></table></figure>
<p>要求创建校验信息提示配置文件</p>
<p>在resource文件下创建: ValidationMessages.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">com.xinyu.common.valid.ListValue.message</span>=<span class="hljs-string">value must be specified</span><br></code></pre></td></tr></table></figure>
<p>编写校验类ListValueConstrainValidator</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xinyu.common.valid;<br><br><span class="hljs-keyword">import</span> javax.validation.ConstraintValidator;<br><span class="hljs-keyword">import</span> javax.validation.ConstraintValidatorContext;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListValueConstrainValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConstraintValidator</span>&lt;ListValue, Integer&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Set&lt;Integer&gt; values = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(ListValue constraintAnnotation)</span> &#123;<br>        <span class="hljs-type">int</span>[] values = constraintAnnotation.values();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : values) &#123;<br>            <span class="hljs-built_in">this</span>.values.add(value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(Integer value, ConstraintValidatorContext constraintValidatorContext)</span> &#123;<br>        <span class="hljs-keyword">return</span> values.contains(value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在Bean中使用这个注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 显示状态[0-不显示；1-显示]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ListValue(values = &#123;0, 1&#125;, groups = AddGroup.class)</span><br><span class="hljs-keyword">private</span> Integer showStatus;<br></code></pre></td></tr></table></figure>
<p>表示这个字段只支持两个值<span class="math inline">\(0,1\)</span></p>
<h3 id="统一异常处理">统一异常处理</h3>
<p>对于项目中出现的异常, 通常采用ControllerAdvice的方式进行统一处理, 简化代码</p>
<p>编写异常处理类, 使用@ControllerAdvice, 并指定这个处理类处理哪些包或者哪些类下的异常</p>
<p>在处理类中, 编写多个方法, 在方法上利用@ExceptionHandler注解, 表明对哪个异常进行处理, 比如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestControllerAdvice(basePackages = &quot;com.xinyu.mall.product.controller&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MallExceptionControllerAdvice</span> &#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">handleValidException</span><span class="hljs-params">(MethodArgumentNotValidException e)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;Invalid Exception: &quot;</span> + e.getMessage());<br>        <span class="hljs-type">BindingResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> e.getBindingResult();<br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        result.getFieldErrors().forEach((item) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> item.getDefaultMessage();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> item.getField();<br>            map.put(field, message);<br>        &#125;);<br>        <span class="hljs-keyword">return</span> R.error(BizCodeEnum.VALID_EXCEPTION.getCode(),<br>                BizCodeEnum.VALID_EXCEPTION.getMessage()).put(<span class="hljs-string">&quot;data&quot;</span>, map);<br>    &#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(value = Throwable.class)</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">handleException</span><span class="hljs-params">(Throwable throwable)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;exception: &quot;</span> + throwable.getMessage());<br>        <span class="hljs-keyword">return</span> R.error(BizCodeEnum.UNKNOWN_EXCEPTION.getCode(), BizCodeEnum.UNKNOWN_EXCEPTION.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>MethodArgumentNotValidException异常是数据校验错误后抛出的异常</p>
<h3 id="spu和sku概念">SPU和SKU概念</h3>
<h4 id="spu">SPU</h4>
<blockquote>
<p>Standard Product Unit 标准化产品单位: 是商品信息聚合的最小单位, 是一组可复用, 易检索的标准化信息的集合, 该集合描述了一个产品的特性。</p>
</blockquote>
<p>例如: iphone 13就是一个SPU, 与商家, 颜色, 款式, 套餐都无关</p>
<h4 id="sku">SKU</h4>
<blockquote>
<p>Stock Keeping Unit 库存量单位: 即库存进出计量的基本单元, 可以是以件, 盒等为单位。SKU是大型连锁超时DC物流管理的一个必要方法。现在已经被引申为产品统一编号的简称, 每种产品均对应有唯一的SKU号。</p>
</blockquote>
<p>例如: 64G 粉色 iphone 13就是一个SKU</p>
<h4 id="基础属性与销售属性">基础属性与销售属性</h4>
<p>商品的基础属性是SPU的特性, 商品的销售属性是SKU的特性。</p>
<h2 id="分布式进阶">分布式进阶</h2>
<h3 id="elastisearch">Elastisearch</h3>
<h4 id="介绍">介绍</h4>
<p>一个分布式开源搜索和分析引擎, 适用于所有类型的数据</p>
<h4 id="基本概念">基本概念</h4>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220602143050.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>1、Index 索引</p>
<p>动词, 相当于MySQL的insert; 名词, 相当于MySQL中的Database</p>
<p>2、Type 类型</p>
<p>在Index中, 可以定义一个或多个类型。类似于MySQL中的Table; 每一种类型的数据放在一起</p>
<p>3、Document 文档</p>
<p>保存在某个索引下, 某种类型(Type)的一个数据(Document), 文档是JSON格式的, Document就像是MySQL中的某个Table里面的内容</p>
<p>4、倒排索引</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220602143549.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<h4 id="安装">安装</h4>
<p>1、下载镜像文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">存储和检索数据</span><br>docker pull elasticsearch:7.4.2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">可视化检索数据</span><br>docker pull kibana:7.4.2<br></code></pre></td></tr></table></figure>
<p>2、配置挂载数据文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建配置文件目录</span><br>mkdir -p /mydata/elasticsearch/config<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据目录</span><br>mkdir -p /mydata/elasticsearch/data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将/mydata/elasticsearch/文件夹中文件都可读可写</span><br>chmod -R 777 /mydata/elasticsearch/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置任意机器可以访问 elasticsearch</span><br>echo &quot;http.host: 0.0.0.0&quot; &gt;/mydata/elasticsearch/config/elasticsearch.yml<br></code></pre></td></tr></table></figure>
<p>3、启动Elasticsearch</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \<br>-e  &quot;discovery.type=single-node&quot; \<br>-e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; \<br>-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \<br>-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \<br>-v  /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \<br>-d elasticsearch:7.4.2 <br></code></pre></td></tr></table></figure>
<ul>
<li><code>-p 9200:9200 -p 9300:9300</code>：向外暴露两个端口，9200用于HTTP REST API请求，9300 ES 在分布式集群状态下 ES 之间的通信端口；</li>
<li><code>-e  "discovery.type=single-node"</code>：es 以单节点运行</li>
<li><code>-e ES_JAVA_OPTS="-Xms64m -Xmx512m"</code>：设置启动占用内存，不设置可能会占用当前系统所有内存</li>
<li>-v：挂载容器中的配置文件、数据文件、插件数据到本机的文件夹；</li>
<li><code>-d elasticsearch:7.6.2</code>：指定要启动的镜像</li>
</ul>
<p>访问 IP:9200 看到返回的 json 数据说明启动成功。</p>
<p>4、设置Elasticsearch随Docker启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">当前 Docker 开机自启，所以 ES 现在也是开机自启</span><br>docker update elasticsearch --restart=always<br></code></pre></td></tr></table></figure>
<p>5、启动可视化Kibana</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">docker run --name kibana \<br>-e ELASTICSEARCH_HOSTS=http:<span class="hljs-comment">//192.168.134.146:9200 \</span><br><span class="hljs-comment">-p 5601:5601 \</span><br><span class="hljs-comment">-d kibana:7.4.2</span><br></code></pre></td></tr></table></figure>
<p><code>-e ELASTICSEARCH_HOSTS=``http://192.168.134.146:9200</code>: <strong>这里要设置成自己的虚拟机IP地址</strong></p>
<p><strong>浏览器输入</strong>192.168.134.146:5601 测试</p>
<p>6、设置Kibana随Docker启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">当前 Docker 开机自启，所以 kibana 现在也是开机自启</span><br>docker update kibana --restart=always<br></code></pre></td></tr></table></figure>
<h4 id="入门-初步检索">入门 初步检索</h4>
<p>1、_cat</p>
<p>GET /_cat/nodes; 查看所有节点</p>
<p>GET /_cat/health; 查看es的健康状况</p>
<p>GET /_cat/master; 查看主节点</p>
<p>GET /_cat/indices; 查看所有索引, 相当于 show databases</p>
<p>2、索引一个文档 （保存一条数据）</p>
<p>保存一个数据, 保存在哪个索引的哪个类型下, 指定用哪个唯一标识</p>
<p>PUT customer/external/1; 在customer索引下的external类型下保存1号数据</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">PUT customer<span class="hljs-regexp">/external/</span><span class="hljs-number">1</span><br><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John Doe&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>使用POST 可以不带id, 如果不带id, 则会生成一个默认id</p>
<p>3、查询文档</p>
<p>GET customer/external/1</p>
<p>返回</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;customer&quot;</span><span class="hljs-punctuation">,</span>	<span class="hljs-comment">// 在哪个索引</span><br>    <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;external&quot;</span><span class="hljs-punctuation">,</span>           <span class="hljs-comment">// 在哪个类型</span><br>    <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span>                         <span class="hljs-comment">// 记录id</span><br>    <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>                   <span class="hljs-comment">// 版本号, 进行更新操作时id + 1</span><br>    <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>                   <span class="hljs-comment">// 并发控制字段, 每次更新 + 1, 用来做客观锁</span><br>    <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>        <span class="hljs-comment">// 同上, 主分片重新分配, 如重启会发送变化</span><br>    <span class="hljs-attr">&quot;found&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xinyu&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p>做并发修改时, 可以在修改时带上param, 如果_seq_no和_primary_term满足要求才修改, 有点像CAS</p>
<p>比如, 发post请求时, 指定url为http://192.168.134.146:9200/customer/external/1?_seq_no=0&amp;_pirmary_term=0</p>
<p>4、更新文档</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">POST customer<span class="hljs-regexp">/external/</span><span class="hljs-number">1</span>/_update<br>&#123;<br>    <span class="hljs-string">&quot;doc&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-regexp">//</span> or<br><br>POST customer<span class="hljs-regexp">/external/</span><span class="hljs-number">1</span><br>&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span><br>&#125;<br><br><span class="hljs-regexp">//</span> or<br>PUT customer<span class="hljs-regexp">/external/</span><span class="hljs-number">1</span><br>&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>几种更新操作的区别</p>
<p>使用第一种方式时: 如果要更新的内容和原本的内容一致, 则不会进行任何操作</p>
<p>5、删除文档&amp;索引</p>
<p>DELETE customer/external/1, 删除文档</p>
<p>DELETE customer, 删除索引</p>
<p>6、bulk批量API</p>
<p>POST /customer/external/bulk</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/customer/</span>external/_bulk<br>&#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;John Doe&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;index&quot;</span>:&#123;<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;2&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;John Doe&quot;</span>&#125;<br></code></pre></td></tr></table></figure>
<p>数据的格式为:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&#123;action: &#123;metadata&#125;&#125;\n<br>&#123;request <span class="hljs-selector-tag">body</span>&#125;\n<br></code></pre></td></tr></table></figure>
<p>复杂示例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">POST /_bulk<br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;delete&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;website&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;blog&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>  <span class="hljs-comment">// 删除</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;create&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;website&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;blog&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span> <span class="hljs-comment">// 创建</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;my first blog post&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;website&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;blog&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span> <span class="hljs-comment">// index 创建</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;my second blog post&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;update&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;website&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;blog&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>  <span class="hljs-comment">// 更新</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;my updated blog post&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p>导入批量数据</p>
<p>POST bank/account/_bulk</p>
<p>https://github.com/linuxacademy/content-elasticsearch-deep-dive/blob/master/sample_data/accounts.json</p>
<h4 id="进阶检索">进阶检索</h4>
<h5 id="searchapi">1、SearchApi</h5>
<p>ES支持两种基本方式检索:</p>
<ul>
<li>一个是通过REST request api 发送搜索参数 uri + 检索参数</li>
<li>一个是通过使用 REST request body 来发送 uri + 请求体</li>
</ul>
<p>1.1 检索信息</p>
<p>GET bank/_search?q=*&amp;sort=account_number:asc 按account_number升序排序</p>
<hr />
<p>GET bank/_search</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;account_number&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<h5 id="query-dsl">2、Query DSL</h5>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html">Query DSL</a></p>
<h6 id="基本语法格式">基本语法格式</h6>
<p>一个典型语句的典型结构:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">QUERY_NAME<span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>   ARGUMENT<span class="hljs-punctuation">:</span>VALUE<span class="hljs-punctuation">,</span><br>   ARGUMENT<span class="hljs-punctuation">:</span>VALUE<span class="hljs-punctuation">,</span>...<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p>如果对于某个字段, 那么它的结构为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  QUERY_NAME<span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>     FIELD_NAME<span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>       ARGUMENT<span class="hljs-punctuation">:</span>VALUE<span class="hljs-punctuation">,</span><br>       ARGUMENT<span class="hljs-punctuation">:</span>VALUE<span class="hljs-punctuation">,</span>...<br>      <span class="hljs-punctuation">&#125;</span>   <br>   <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p>请求示例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">GET bank/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;account_number&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;balance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      	<span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><br># match_all 查询类型【代表查询所有的所有】，es中可以在query中组合非常多的查询类型完成复杂查询；<br># from+size 限定，完成分页功能；从第几条数据开始，每页有多少数据<br># sort 排序，多字段排序，会在前序字段相等时后续字段内部排序，否则以前序为准；<br></code></pre></td></tr></table></figure>
<h6 id="返回部分字段">返回部分字段</h6>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">GET bank/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;account_number&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;balance&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;firstname&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><br># _source 指定返回结果中包含的字段名<br></code></pre></td></tr></table></figure>
<h6 id="macth-匹配查询">macth-匹配查询</h6>
<p>精确查询-基本数据类型(非文本)</p>
<p>demo</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">GET /bank/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;account_number&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br># 查找匹配 account_number为<span class="hljs-number">20</span>的数据 非文本推荐使用term<br></code></pre></td></tr></table></figure>
<p>模糊查询-文本字符串</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">GET /bank/_seach<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mill lane&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br># 查找匹配address包含mill或line的数据<br></code></pre></td></tr></table></figure>
<p>精确匹配-文本字符串</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">GET bank/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;address.keyword&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;288 Mill Street&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br># 查找 address 为 <span class="hljs-number">288</span> Mill Street 的数据。<br># 这里的查找是精确查找，只有完全匹配时才会查找出存在的记录，<br># 如果想模糊查询应该使用match_phrase 短语匹配<br></code></pre></td></tr></table></figure>
<p>match_phrase-短语匹配</p>
<p>将需要匹配的值当成一整个单词(不分词)进行检索</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">GET bank/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_phrase&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mill lane&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br># 这里会检索 address 匹配包含短语 mill lane 的数据<br></code></pre></td></tr></table></figure>
<p>multi_match-多字段匹配</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">GET bank/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;multi_match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mill&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;city&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;address&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br># city或address字段包含mill的数据<span class="hljs-punctuation">,</span> 会对查询条件进行分词<br></code></pre></td></tr></table></figure>
<p>bool-复合查询</p>
<p>复合语句可以合并, 任何其它查询语句, 包括复合语句。这就意味着, 复合语句之间可以互相嵌套, 可以表达非常复杂的逻辑</p>
<ul>
<li>must: 必须达到must列举的所有条件</li>
<li>must_not: 必须不匹配must_not所列举的所有条件</li>
<li>should: 应该满足should所列举的条件</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> bank/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;gender&quot;</span>: <span class="hljs-string">&quot;M&quot;</span><br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;mill&quot;</span><br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment"># 查询 gender 为 M 且 address 包含 mill 的数据</span><br></code></pre></td></tr></table></figure>
<p>filer-结果过滤</p>
<p>must和should满足会提高相关性得分, 而must_not不会</p>
<p>filter和must_not一样不会影响相关性得分, 它只会过滤出满足条件的数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">GET bank/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mill&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;balance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10000&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20000&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br># 这里先是查询所有匹配 address 包含 mill 的文档，<br># 然后再根据 <span class="hljs-number">10000</span>&lt;=balance&lt;=<span class="hljs-number">20000</span> 进行过滤查询结果<br></code></pre></td></tr></table></figure>
<p>term-精确检索</p>
<p>文本类型查询使用match, 非文本类型使用term</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">GET bank/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;28&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p>aggregations（执行聚合）</p>
<p>聚合提供了从数据中分组和提取数据的能力。最简单的聚合方法大致等于SQL GROUP BY和SQL聚合函数。</p>
<p><strong>搜索address中包含mill的所有人的年龄分布以及平均年龄, 但不显示这些人的详情</strong></p>
<p>GET bank/_search</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mill&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;ageAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>	<span class="hljs-comment">// 聚合的类型</span><br>                <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;ageAvg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;avg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;balanceAvg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;avg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;balance&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span>	<span class="hljs-comment">// 不列出搜索的结果, 只展示聚合结果</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p><strong>按照年龄聚合, 并且请求这些年龄段的这些人的平均薪资</strong></p>
<p>GET bank/_search</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;ageAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;balanceAvg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;avg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        field<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;balance&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p><strong>查出所有年龄分布，并且这些年龄段中M的平均薪资和F的平均薪资以及这个年龄段的总体平均薪资</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">GET bank/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;ageAggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;age&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;genderAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gender.keyword&quot;</span>	# 对于文本字段<span class="hljs-punctuation">,</span> 聚合时要加上.keyword<br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;balanceAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;avg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;balance&quot;</span><br>              <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;balnceAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;avg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;balance&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<h5 id="mapping-映射">3、Mapping 映射</h5>
<h6 id="介绍-1">介绍</h6>
<p>Mapping是用来定义一个文档, 以及其包含的属性(field)是如何存储和检索的。</p>
<p>比如: 使用mapping来定义:</p>
<ul>
<li>哪些字符串属性应该被看做全文本属性, full text fields</li>
<li>哪些属性包含数字, 日期或者地理位置</li>
<li>文档中的所有属性是否都能被索引</li>
<li>日期的格式</li>
<li>自定义映射规则来执行动态添加属性</li>
</ul>
<p>查看mapping信息</p>
<p>GET bank/_mapping</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;bank&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;properties&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;account_number&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;address&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;fields&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;ignore_above&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;balance&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;city&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;fields&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;ignore_above&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;email&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;fields&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;ignore_above&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;employer&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;fields&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;ignore_above&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;firstname&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;fields&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;ignore_above&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;gender&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;fields&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;ignore_above&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lastname&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;fields&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;ignore_above&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;state&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;fields&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;ignore_above&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<h6 id="新版本type移除">新版本type移除</h6>
<p>Elasticsearch去掉type概念</p>
<ol type="1">
<li><p>关系型数据库中两个table是独立的, 即使两个table里面有相同名称的列也不影响使用, 但在es中不是这样的！es是基于Lucene开发的搜索引擎, 而es中不同type名称相同的field最终在Lucene中的处理方式是一样的</p>
<ul>
<li>两个不同type下的两个user_name, 在es同一个索引下被认为是同一个field, 所以必须在不同type定义相同的field映射。否则, 不同type中的相同名称字段就会在处理中出现冲突的情况</li>
<li>去掉type就是为了提高es处理数据的效率</li>
</ul></li>
<li><p>Elasticsearch 7.x URL中的type参数为可选。比如，索引一个文档不再要求提供文档类型。</p></li>
<li><p>Elasticsearch 8.x 不再支持URL中的type参数。</p></li>
<li><p>解决：</p>
<p>将索引从多类型迁移到单类型, 每种类型文档一个独立索引</p>
<p>将已存在的索引下的类型数据, 全部迁移到指定位置即可。</p></li>
</ol>
<h6 id="创建mapping">创建mapping</h6>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">PUT /my_index<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<h6 id="为已存在的mapping添加字段">为已存在的mapping添加字段</h6>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">PUT /my_index/_mapping<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;employee-id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p>index为false表示这个字段不能被检索呢, 默认为true</p>
<h6 id="更新映射">更新映射</h6>
<p>对于已经存在的映射字段, 我们不能更新。更新必须创建新的索引进行数据迁移</p>
<h6 id="数据迁移">数据迁移</h6>
<p>根据之前的bank索引创建一个新的mapping, 并修改一部分的mapping信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">PUT /newbank<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;account_number&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;long&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;address&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;age&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;integer&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;balance&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;long&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;city&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;email&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;employer&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;firstname&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;gender&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;lastname&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;keyword&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>            <span class="hljs-string">&quot;ignore_above&quot;</span>: 256<br>          &#125;<br>        &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;state&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>迁移数据：**POST _reindex**</p>
<p>无type索引之间的迁移</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">POST _reindex<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sourceIndexName&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;dest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;destIndexName&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p>带type索引之间的迁移</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">POST _reindex<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;typeName&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sourceIndexName&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;dest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;destIndexName&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p>比如将带type的bank索引, 迁移到新的newbank索引</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">POST _reindex<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;account&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bank&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;newbank&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<h5 id="分词">4、分词</h5>
<h6 id="简介">简介</h6>
<p>一个tokenizer（分词器）接收一个字符流, 将之分割为独立的tokens（词元, 通常是独立的单词）, 然后输出tokens流</p>
<p>例如：whitespace tokenizer遇到空白字符时分割文本。它会将文本“Quick brown fox!”分割为[Quick,brown,fox!]。</p>
<p>该tokenizer还负责记录各个terms(词条)的顺序或position位置（用于phrase短语和word proximity词近邻查询），以及term（词条）所代表的原始word（单词）的start（起始）和end（结束）的character offsets（字符串偏移量）（用于高亮显示搜索的内容）。</p>
<p>elasticsearch提供了很多内置的分词器，可以用来构建custom analyzers（自定义分词器）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">POST _analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;standard&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#x27;s bone.&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<h6 id="安装ik分词器">安装IK分词器</h6>
<p>下载</p>
<blockquote>
<p>事前准备：</p>
<ul>
<li>IK 分词器属于 Elasticsearch 的插件，所以 IK 分词器的安装目录是 Elasticsearch 的 plugins 目录，在我们使用Docker启动 Elasticsearch 时，已经将该目录挂载到主机的 <code>/mydata/elasticsearch/plugins</code> 目录。</li>
<li>IK 分词器的版本需要跟 Elasticsearch 的版本对应，当前选择的版本为 <code>7.4.2</code>，下载地址为：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.4.2">Github Release</a> 或访问：<a href="https://hub.fastgit.org/medcl/elasticsearch-analysis-ik/releases/tag/v7.4.2">镜像地址</a></li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入挂载的插件目录 /mydata/elasticsearch/plugins</span><br>cd /mydata/elasticsearch/plugins<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 wget 下载工具</span><br> yum install -y wget<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载对应版本的 IK 分词器（这里是7.4.2）</span><br>wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.4.2/elasticsearch-analysis-ik-7.4.2.zip<br></code></pre></td></tr></table></figure>
<p>这里已经在挂载的 plugins 目录安装好了 IK分词器。现在我们进入到 es 容器内部检查是否成功安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入容器内部</span><br>docker exec -it elasticsearch /bin/bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看 es 插件目录</span><br>ls /usr/share/elasticsearch/plugins<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">可以看到 elasticsearch-analysis-ik-7.4.2.zip</span><br></code></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">解压到 plugins 目录下的 ik 目录</span><br>unzip elasticsearch-analysis-ik-7.4.2.zip -d ik<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除下载的压缩包</span><br> rm -f elasticsearch-analysis-ik-7.4.2.zip <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改文件夹访问权限</span><br>chmod -R 777 ik/<br></code></pre></td></tr></table></figure>
<p>查看安装的ik插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入 es 容器内部</span><br>docker exec -it elasticsearch /bin/bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入 es bin 目录</span><br>cd /usr/share/elasticsearch/bin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行查看命令  显示 ik</span><br>elasticsearch-plugin list<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">退出容器</span><br>exit<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启 Elasticsearch</span><br>docker restart elasticsearch<br></code></pre></td></tr></table></figure>
<p>测试ik分词器</p>
<p>GET my_index/_analyze</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">GET my_index/_analyze<br><span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span> <br>   <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;南京市长江大桥&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;tokens&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;南京市&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;南京&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;市长&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;长江大桥&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;长江&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;大桥&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<blockquote>
<p><strong>这里对于默认词库中没有的词，不会有词语的组合，所以我们可以通过配置自定义词库或远程词库来实现对词库的扩展。</strong></p>
</blockquote>
<h6 id="自定义拓展词库">自定义拓展词库</h6>
<blockquote>
<p><a href="https://blog.csdn.net/U201017971/article/details/45819723">Linux系统只能连上内网不能够连上外网</a></p>
</blockquote>
<p>首先在mysql安装nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir -p /mydata/nginx/conf		# 创建要挂载的配置目录<br><br>docker run -p 80:80 --name nginx -d nginx:1.10	# 创建临时容器<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将nginx容器中的nginx目录复制到本机的/mydata/nginx/conf目录</span><br>docker container cp nginx:/etc/nginx /mydata/nginx/conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制的是nginx目录，将该目录的所有文件移动到 conf 目录</span><br>mv /mydata/nginx/conf/nginx/* /mydata/nginx/conf/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除多余的 /mydata/nginx/conf/nginx目录</span><br>rm -rf /mydata/nginx/conf/nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止运行 nginx 容器</span><br>docker stop nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除 nginx 容器</span><br>docker rm nginx<br></code></pre></td></tr></table></figure>
<p>启动新的nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">停止运行 nginx 容器</span><br>docker stop nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除 nginx 容器</span><br>docker rm nginx<br></code></pre></td></tr></table></figure>
<p>在/mydata/nginx/html/es目录下创建fenci.txt</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">江大桥<br>心雨<br></code></pre></td></tr></table></figure>
<p>在浏览器访问http://ip/es/fenci.txt, 发现可以访问到这个文件</p>
<p>修改ik分词器的配置/mydata/elasticsearch/plugins/ik/config/IKAnalyzer.cfg.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">properties</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="hljs-tag">&lt;/<span class="hljs-name">comment</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;remote_ext_dict&quot;</span>&gt;</span>http://192.168.134.146/es/fenci.txt<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span><br>        <span class="hljs-comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>再次运行上面的分词示例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">GET my_index/_analyze<br><span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span> <br>   <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;南京市长江大桥&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;tokens&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;南京市&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;南京&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;市长&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;长江大桥&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;长江&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;江大桥&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;大桥&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p>发现已经可以将江大桥当作一个token了</p>
<h5 id="springboot整合es">Springboot整合es</h5>
<p>使用Elasticsearch-Rest-Client, 官方的RestClient, 封装了ES操作</p>
<p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>创建配置类, 创建RestHighLevelClient, 之后我们会用这个client操作es</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title function_">restHighLevelClient</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">RestHighLevelClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(<br>        RestClient.builder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHost</span>(<span class="hljs-string">&quot;192.168.134.146&quot;</span>, <span class="hljs-number">9200</span>, <span class="hljs-string">&quot;http&quot;</span>))<br>    );<br>    <span class="hljs-keyword">return</span> client;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>同时按照官方文档的说明, 操作es还需要指定RequestOptions, 所以在配置类中, 我们同时构建一个最普通的RequestOptions</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> RequestOptions COMMON_OPTIONS;<br><br><span class="hljs-keyword">static</span> &#123;<br>    RequestOptions.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> RequestOptions.DEFAULT.toBuilder();<br><br>    COMMON_OPTIONS = builder.build();<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="插入数据">插入数据</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RestHighLevelClient client;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试存储数据到es</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">indexData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">IndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;users&quot;</span>);<br>    request.id(<span class="hljs-string">&quot;1&quot;</span>);<br>    <span class="hljs-comment">// request.source(&quot;userName&quot;, &quot;xinyu&quot;, &quot;age&quot;, 18, &quot;gender&quot;, &quot;male&quot;);</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUserName(<span class="hljs-string">&quot;xinyu&quot;</span>);<br>    user.setAge(<span class="hljs-number">18</span>);<br>    user.setGender(<span class="hljs-string">&quot;male&quot;</span>);<br>    <span class="hljs-comment">// 转换成json</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> JSON.toJSONString(user);<br>    request.source(jsonString, XContentType.JSON);<br><br>    <span class="hljs-type">IndexResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.index(request, MallElasticSearchConfig.COMMON_OPTIONS);<br><br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="聚合">聚合</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">searchData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">searchRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>();<br>    <span class="hljs-comment">// 指定索引</span><br>    searchRequest.indices(<span class="hljs-string">&quot;bank&quot;</span>);<br>    <span class="hljs-comment">// 指定索引条件</span><br>    <span class="hljs-type">SearchSourceBuilder</span> <span class="hljs-variable">searchSourceBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchSourceBuilder</span>();<br>    searchSourceBuilder.query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;address&quot;</span>, <span class="hljs-string">&quot;mill&quot;</span>));<br>    <span class="hljs-type">TermsAggregationBuilder</span> <span class="hljs-variable">ageAgg</span> <span class="hljs-operator">=</span> AggregationBuilders.terms(<span class="hljs-string">&quot;ageAgg&quot;</span>).field(<span class="hljs-string">&quot;age&quot;</span>).size(<span class="hljs-number">10</span>);<br>    searchSourceBuilder.aggregation(ageAgg);<br>    <span class="hljs-type">AvgAggregationBuilder</span> <span class="hljs-variable">balanceAgg</span> <span class="hljs-operator">=</span> AggregationBuilders.avg(<span class="hljs-string">&quot;balanceAvg&quot;</span>).field(<span class="hljs-string">&quot;balance&quot;</span>);<br>    searchSourceBuilder.aggregation(balanceAgg);<br><br>    searchRequest.source(searchSourceBuilder);<br><br>    <span class="hljs-comment">// 执行检索</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(searchRequest, 			                             		MallElasticSearchConfig.COMMON_OPTIONS);<br>    System.out.println(response.toString());<br><br>    <span class="hljs-type">SearchHits</span> <span class="hljs-variable">hits</span> <span class="hljs-operator">=</span> response.getHits();<br>    SearchHit[] searchHits = hits.getHits();<br>    <span class="hljs-keyword">for</span> (SearchHit searchHit : searchHits) &#123;<br>        System.out.println(searchHit.getSourceAsString());<br>    &#125;<br><br>    <span class="hljs-type">Aggregations</span> <span class="hljs-variable">aggregations</span> <span class="hljs-operator">=</span> response.getAggregations();<br>    List&lt;Aggregation&gt; list = aggregations.asList();<br>    <span class="hljs-keyword">for</span> (Aggregation aggregation : list) &#123;<br>        System.out.println(aggregation.getName());<br>    &#125;<br><br>    <span class="hljs-type">Terms</span> <span class="hljs-variable">terms</span> <span class="hljs-operator">=</span> aggregations.get(<span class="hljs-string">&quot;ageAgg&quot;</span>);<br>    <span class="hljs-keyword">for</span> (Terms.Bucket bucket : terms.getBuckets()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">keyAsString</span> <span class="hljs-operator">=</span> bucket.getKeyAsString();<br>        System.out.println(keyAsString);<br>    &#125;<br><br>    <span class="hljs-type">Avg</span> <span class="hljs-variable">balanceAvg</span> <span class="hljs-operator">=</span> aggregations.get(<span class="hljs-string">&quot;balanceAvg&quot;</span>);<br>    System.out.println(balanceAvg.getValue());<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="检索业务">检索业务</h3>
<h4 id="es中sku的存储结构分析">es中sku的存储结构分析</h4>
<h5 id="商品的什么信息需要存储到es中">商品的什么信息需要存储到es中</h5>
<ol type="1">
<li>需要保存sku信息 sku的标题，价格，销量等</li>
<li>需要保存品牌, 分类信息 通过点击分类, 查出分类下的商品；通过点击品牌，查出品牌下的商品</li>
<li>需要保存spu信息 选择规格，检索出有这些规格的商品</li>
</ol>
<h5 id="怎么设计存储结构mapping来保存数据">怎么设计存储结构mapping来保存数据</h5>
<ol type="1">
<li><p>空间换时间</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    skuId<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    spuId<span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span><br>    skuTitle<span class="hljs-punctuation">:</span> 华为p50<span class="hljs-punctuation">,</span><br>    price<span class="hljs-punctuation">:</span> <span class="hljs-number">5899</span><span class="hljs-punctuation">,</span><br>    saleCount<span class="hljs-punctuation">:</span> <span class="hljs-number">99</span><span class="hljs-punctuation">,</span><br>    attrs<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span>size<span class="hljs-punctuation">:</span> <span class="hljs-number">5</span>寸<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span>CPU<span class="hljs-punctuation">:</span> 麒麟<span class="hljs-number">980</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span>分辨率<span class="hljs-punctuation">:</span> <span class="hljs-number">1080</span>p<span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">// 缺点: attrs中的信息是所有sku共享的, 对于同属同个spu的商品, 多存储了冗余信息</span><br><span class="hljs-comment">// 好处: 方便检索</span><br></code></pre></td></tr></table></figure></li>
<li><p>时间换空间</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">sku索引<br><span class="hljs-punctuation">&#123;</span><br>    skuId<span class="hljs-punctuation">:</span><span class="hljs-number">1</span><br>    spuId<span class="hljs-punctuation">:</span><span class="hljs-number">11</span><br><span class="hljs-punctuation">&#125;</span><br>attr索引<br><span class="hljs-punctuation">&#123;</span><br>    spuId<span class="hljs-punctuation">:</span><span class="hljs-number">11</span><br>    attrs<span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span>尺寸<span class="hljs-punctuation">:</span><span class="hljs-number">5</span>寸<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span>CPU<span class="hljs-punctuation">:</span>高通<span class="hljs-number">945</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span>分辨率<span class="hljs-punctuation">:</span>全高清<span class="hljs-punctuation">&#125;</span><br>	<span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">//  缺点：选择公共属性attr时,会检索当前属性的所有商品分类，然后再查询当前商品分类的所有可能属性；</span><br><span class="hljs-comment">// 导致耗时长。</span><br><span class="hljs-comment">// 好处：空间利用率高</span><br></code></pre></td></tr></table></figure></li>
<li><p>最终方案</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">PUT product<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;skuId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;spuId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;skuTitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;skuPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;skuImg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;doc_values&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;saleCount&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;long&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;hasStock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;boolean&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;hotScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;brandId&quot;</span><span class="hljs-punctuation">:</span>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;catelogId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;brandName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;doc_values&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;brandImg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;doc_values&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;catelogName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;doc_values&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;attrs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nested&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;attrId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;attrName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;doc_values&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;attrValue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p>mapping结构字段说明:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;skuId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;spuId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> # 精确检索，不分词<br>    <span class="hljs-attr">&quot;skuTitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span> # 全文检索<br>      <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span> # 分词器<br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skuPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skuImg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span> # <span class="hljs-keyword">false</span> 不可被检索<br>      <span class="hljs-attr">&quot;doc_values&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span> # <span class="hljs-keyword">false</span> 不可被聚合<br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;saleCount&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;long&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> # 商品销量<br>    <span class="hljs-attr">&quot;hasStock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;boolean&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> # 商品是否有库存<br>    <span class="hljs-attr">&quot;hotScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> # 商品热度评分<br>    <span class="hljs-attr">&quot;brandId&quot;</span><span class="hljs-punctuation">:</span>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> # 品牌id<br>    <span class="hljs-attr">&quot;catalogId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> # 分类id<br>    <span class="hljs-attr">&quot;brandName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>	# 品牌名，只用来查看，不用来检索和聚合<br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;doc_values&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;brandImg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>	# 品牌图片，只用来查看，不用来检索和聚合<br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;doc_values&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;catelogName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>	# 分类名，只用来查看，不用来检索和聚合<br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;doc_values&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;attrs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>	# 属性对象<br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nested&quot;</span><span class="hljs-punctuation">,</span>	# 嵌入式，内部属性<br>      <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;attrId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;attrName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>	# 属性名<br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_values&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;attrValue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-punctuation">&#125;</span>	# 属性值<br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li>
<li><p>关于nested类型</p>
<blockquote>
<p>官网：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/nested.html">Nested field type</a></p>
<ul>
<li>Object 数据类型的数组会被扁平化处理为一个简单的键与值的列表，即对象的相同属性会放到同一个数组中，在检索时会出现错误。参考官网：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/nested.html#nested-arrays-flattening-objects">How arrays of objects are flattened</a></li>
<li>对于 Object 类型的数组，要使用 nested 字段类型。参考官网：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/nested.html#nested-fields-array-objects">Using nested fields for arrays of objects</a></li>
</ul>
</blockquote></li>
</ol>
<h3 id="压力测试">压力测试</h3>
<h4 id="性能指标">性能指标</h4>
<ol type="1">
<li>响应时间 Response Time RT 响应时间指的是从客户端发起一个请求开始, 到客户端接收从服务器端返回的响应结束, 整个过程所耗费的时间</li>
<li>HPS Hits Per Second: 每秒点击次数, 单位是次/秒</li>
<li>TPS Transaction Per Second: 每秒钟的交易数</li>
<li>QPS Query Per Second: 系统每秒处理的查询次数, 单位是次/秒</li>
<li>最大响应时间</li>
<li>最小响应时间</li>
<li>90%响应时间, 是指所有用户的响应时间进行排序, 第90%的响应时间</li>
<li>从外部看, 性能测试主要关注如下三个指标:
<ul>
<li>吞吐量: 每秒钟系统能够处理的请求数, 任务数</li>
<li>响应时间</li>
<li>错误率</li>
</ul></li>
</ol>
<h4 id="jmeter">Jmeter</h4>
<p>首先考虑自己的应用属于<strong>CPU密集型</strong>还是<strong>IO密集型</strong></p>
<h5 id="堆内存和垃圾回收">堆内存和垃圾回收</h5>
<p>对于系统的性能优化方面，我们还可以调整 Java 程序运行的堆内存空间来减少 Full GC 和 Minor GC 从而减少运行时间。</p>
<p>Full gc 最会影响性能，根据代码问题，避免 full gc 频率。可以适当调大年轻代容量，让大对象可以在年轻代触发 young gc，调整大对象在年轻代的回收频次，尽可能保证大对象在年轻代回收，减小老年代缩短回收时间；</p>
<p>jconsole和jvisualvm</p>
<p>在命令行输出jconsole或jvisualvm就可以打开</p>
<h5 id="中间件对性能的影响">中间件对性能的影响</h5>
<h6 id="nginx">nginx</h6>
<p>启动50个线程, 设置循环次数为永远, 向nginx发起请求, http://192.168.134.146</p>
<p>通过docker stats观察容器的cpu使用率和内存使用率, 发现nginx的cpu使用率很高, 超过100%. 但是内存使用率很低, 只有0.3%左右, <strong>说明nginx是CPU密集型的</strong></p>
<h6 id="gateway">gateway</h6>
<p>启动50个线程, 设置循环次数为永远, 向网关发起请求, http://localhost:88</p>
<p>通过jvisualvm观察CPU使用率和内存使用率</p>
<h6 id="简单服务">简单服务</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<table>
<thead>
<tr class="header">
<th>压测内容</th>
<th>压测线程数</th>
<th>吞吐量</th>
<th>90%响应时间</th>
<th>99%响应时间</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Nginx</td>
<td>50</td>
<td>2565</td>
<td>11</td>
<td>513</td>
</tr>
<tr class="even">
<td>Gateway</td>
<td>50</td>
<td>7302</td>
<td>12</td>
<td>65</td>
</tr>
<tr class="odd">
<td>简单服务</td>
<td>50</td>
<td>10614</td>
<td>10</td>
<td>47</td>
</tr>
<tr class="even">
<td>首页一级菜单</td>
<td>50</td>
<td>420(db, thyemleaf)</td>
<td>244</td>
<td>501</td>
</tr>
<tr class="odd">
<td>首页一级菜单 <br>开缓存, 优化数据库 <br/>关闭日志</td>
<td>50</td>
<td>960</td>
<td>125</td>
<td>255</td>
</tr>
<tr class="even">
<td>三级分页数据获取</td>
<td>50</td>
<td>6(db)/10 (加索引)</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td>三级分页业务优化</td>
<td>50</td>
<td>140</td>
<td>627</td>
<td>1103</td>
</tr>
<tr class="even">
<td>三级分页加入缓存</td>
<td>50</td>
<td>530</td>
<td>408</td>
<td>521</td>
</tr>
<tr class="odd">
<td>首页全量数据获取</td>
<td>50</td>
<td>18(静态资源)/26(动静分离)</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>GateWay+简单服务</td>
<td>50</td>
<td>3717</td>
<td>16</td>
<td>48</td>
</tr>
<tr class="odd">
<td>全链路</td>
<td>50</td>
<td>120</td>
<td>1011</td>
<td>1043</td>
</tr>
</tbody>
</table>
<ul>
<li>中间件越多, 性能损失越大, 大多都损失在网络交互</li>
<li>业务
<ul>
<li>db</li>
<li>thyemleaf模板渲染速度</li>
<li>静态资源</li>
</ul></li>
</ul>
<h4 id="性能优化---nginx动静分离">性能优化 - Nginx动静分离</h4>
<p>静态资源(js, css, html)不由微服务返回, 而是由nginx返回</p>
<p>将mall-product的静态资源文件夹/resources/staic/index复制到nginx的html文件夹下, 并规定静态资源的请求访问路径带有/static前缀</p>
<p>并在nginx中添加多一个location块</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># /static/ 下所有的请求都转给 nginx</span><br><span class="hljs-section">location</span> /static/ &#123;<br>    <span class="hljs-attribute">root</span> /user/share/nginx/html<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="性能优化---业务代码优化">性能优化 - 业务代码优化</h4>
<p>在一个业务中, 如果需要多次查询数据库, 可以考虑一次将所有内容都查出来, 然后在业务中需要时再使用查出来的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="hljs-title function_">getCatelogJson</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 1. 将数据库的多次查询变为1次</span><br><span class="hljs-comment">    */</span><br>    List&lt;CategoryEntity&gt; selectList = baseMapper.selectList(<span class="hljs-literal">null</span>);<br><br>    List&lt;CategoryEntity&gt; level1Categories = getParent_cid(selectList, <span class="hljs-number">0L</span>);<br><br>    Map&lt;String, List&lt;Catelog2Vo&gt;&gt; catelog = level1Categories.stream().collect(Collectors.toMap(k -&gt; &#123;<br>        <span class="hljs-keyword">return</span> k.getCatId().toString();<br>    &#125;, v -&gt; &#123;<br>        List&lt;Catelog2Vo&gt; catelog2Vos = <span class="hljs-literal">null</span>;<br>        List&lt;CategoryEntity&gt; categories = getParent_cid(selectList, v.getCatId());<br>        <span class="hljs-keyword">if</span> (categories != <span class="hljs-literal">null</span>) &#123;<br>            catelog2Vos = categories.stream().map(item -&gt; &#123;<br>                List&lt;Catelog2Vo.Catelog3Vo&gt; catelog3Vos = <span class="hljs-literal">null</span>;<br>                List&lt;CategoryEntity&gt; level3Entities = getParent_cid(selectList, item.getCatId());<br>                <span class="hljs-keyword">if</span> (level3Entities != <span class="hljs-literal">null</span>) &#123;<br>                    catelog3Vos = level3Entities.stream().map(entity -&gt; &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Catelog2Vo</span>.Catelog3Vo(item.getCatId().toString(), entity.getCatId().toString(), entity.getName());<br>                    &#125;).collect(Collectors.toList());<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Catelog2Vo</span>(v.getCatId().toString(), catelog3Vos, item.getCatId().toString(), item.getName());<br>            &#125;).collect(Collectors.toList());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            catelog2Vos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        &#125;<br>        <span class="hljs-keyword">return</span> catelog2Vos;<br>    &#125;));<br>    <span class="hljs-keyword">return</span> catelog;<br>&#125;<br><br><span class="hljs-keyword">private</span> List&lt;CategoryEntity&gt; <span class="hljs-title function_">getParent_cid</span><span class="hljs-params">(List&lt;CategoryEntity&gt; selectList, Long parent_cid)</span> &#123;<br>    <span class="hljs-keyword">return</span> selectList.stream().filter((item) -&gt; Objects.equals(item.getParentCid(), parent_cid)).collect(Collectors.toList());<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="缓存和分布式锁">缓存和分布式锁</h3>
<h4 id="缓存简介">1、缓存简介</h4>
<p><strong>哪些数据适合放入缓存？</strong></p>
<ul>
<li>对即时性, 数据一致性要求不高的数据</li>
<li>访问量大且更新频率不高的数据, 读多写少</li>
</ul>
<p>读缓存流程:</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220605193906.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p><strong>本地缓存存在的问题</strong></p>
<p>本地缓存, 即我们用map或者guava, 做缓存, product集群中各个节点都存着一份缓存。</p>
<p>如果某一节点的缓存发送更改, 其它节点的缓存也需要进行更改, 如果不修改会出现数据不一致的问题</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220605194730.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p><strong>分布式缓存方案</strong></p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220605195607.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<h4 id="在业务中使用redis">2、在业务中使用redis</h4>
<p><strong>堆外内存溢出？</strong> OutOfDirectMemoryError</p>
<p>lettuce的bug导致netty堆外内存溢出</p>
<p>netty如果没有指定堆外内存, 默认使用-Xmx指定的内存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="hljs-title function_">getCatelogJson</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">catelogJSON</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;catelogJSON&quot;</span>);<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(catelogJSON)) &#123;<br>        Map&lt;String, List&lt;Catelog2Vo&gt;&gt; catelogJsonFromDb = getCatelogJsonFromDb();<br>        catelogJSON = JSON.toJSONString(catelogJsonFromDb);<br>        stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;catelogJSON&quot;</span>, catelogJSON);<br>        <span class="hljs-keyword">return</span> catelogJsonFromDb;<br>    &#125;<br><br>    Map&lt;String, List&lt;Catelog2Vo&gt;&gt; result = JSON.parseObject(catelogJSON, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;&gt;() &#123;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="高并发下缓存失效问题">3、高并发下缓存失效问题</h4>
<h5 id="缓存穿透">缓存穿透</h5>
<p>缓存穿透是指 查询一个一定不存在的数据，由于缓存是不命中，将去查询数据库，但是数据库也无此记录，我们没有将这次查询的 null 写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p>
<p>在流量大时，可能 DB 就挂掉了，要是有人利用不存在的 key 频繁攻击我们的应用，这就是漏洞。</p>
<p><strong>解决方法</strong>：缓存空结果、并且设置短的过期时间。</p>
<h5 id="缓存雪崩">缓存雪崩</h5>
<p>缓存雪崩是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到 DB，DB 瞬时压力过重雪崩。</p>
<p><strong>解决方法</strong>：原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>
<h5 id="缓存击穿">缓存击穿</h5>
<p>对于一些设置了过期时间的 key，如果这些 key 可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。</p>
<p>这个时候，需要考虑一个问题：如果这个 key 在大量请求同时进来前正好失效，那么所有对这个 key 的数据查询都落到 db，我们称为缓存击穿。</p>
<p><strong>解决方法</strong>：加锁。大量并发只让一个人去查，其他人等待，查到之后释放锁，其他人获取到锁，先查缓存，就会有数据，不用去查数据库</p>
<h4 id="加锁解决缓存击穿问题">4、加锁解决缓存击穿问题</h4>
<h5 id="使用synchronized">使用synchronized</h5>
<p>给查询数据库的方法加锁</p>
<p>伪代码为:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getFromDB</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) &#123;<br>        <span class="hljs-comment">// search redis</span><br>        <span class="hljs-comment">// if res != null, return</span><br>        <span class="hljs-comment">// else search db</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>实际业务代码为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="hljs-title function_">getCatelogJson</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 1. 空结果缓存，缓存穿透</span><br><span class="hljs-comment">         * 2. 设置过期时间 + 随机值，缓存雪崩</span><br><span class="hljs-comment">         * 3. 加锁， 缓存击穿</span><br><span class="hljs-comment">         */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">catelogJSON</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;catelogJSON&quot;</span>);<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(catelogJSON)) &#123;<br>        Map&lt;String, List&lt;Catelog2Vo&gt;&gt; catelogJsonFromDb = getCatelogJsonFromDb();<br>        <span class="hljs-keyword">return</span> catelogJsonFromDb;<br>    &#125;<br><br>    Map&lt;String, List&lt;Catelog2Vo&gt;&gt; result = JSON.parseObject(catelogJSON, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;&gt;() &#123;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="hljs-title function_">getCatelogJsonFromDb</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 1. 将数据库的多次查询变为1次</span><br><span class="hljs-comment">         */</span><br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">catelogJSON</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;catelogJSON&quot;</span>);<br>        <span class="hljs-comment">// 再查询一遍缓存</span><br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(catelogJSON)) &#123;<br>            <span class="hljs-keyword">return</span> JSON.parseObject(catelogJSON, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;&gt;() &#123;&#125;);<br>        &#125;<br>        List&lt;CategoryEntity&gt; selectList = baseMapper.selectList(<span class="hljs-literal">null</span>);<br>        List&lt;CategoryEntity&gt; level1Categories = getParent_cid(selectList, <span class="hljs-number">0L</span>);<br><br>        Map&lt;String, List&lt;Catelog2Vo&gt;&gt; catelog = level1Categories.stream().collect(Collectors.toMap(k -&gt; &#123;<br>            <span class="hljs-keyword">return</span> k.getCatId().toString();<br>        &#125;, v -&gt; &#123;<br>            List&lt;Catelog2Vo&gt; catelog2Vos = <span class="hljs-literal">null</span>;<br>            List&lt;CategoryEntity&gt; categories = getParent_cid(selectList, v.getCatId());<br>            <span class="hljs-keyword">if</span> (categories != <span class="hljs-literal">null</span>) &#123;<br>                catelog2Vos = categories.stream().map(item -&gt; &#123;<br>                    List&lt;Catelog2Vo.Catelog3Vo&gt; catelog3Vos = <span class="hljs-literal">null</span>;<br>                    List&lt;CategoryEntity&gt; level3Entities = getParent_cid(selectList, item.getCatId());<br>                    <span class="hljs-keyword">if</span> (level3Entities != <span class="hljs-literal">null</span>) &#123;<br>                        catelog3Vos = level3Entities.stream().map(entity -&gt; &#123;<br>                            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Catelog2Vo</span>.Catelog3Vo(item.getCatId().toString(), entity.getCatId().toString(), entity.getName());<br>                        &#125;).collect(Collectors.toList());<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Catelog2Vo</span>(v.getCatId().toString(), catelog3Vos, item.getCatId().toString(), item.getName());<br>                &#125;).collect(Collectors.toList());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                catelog2Vos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            &#125;<br>            <span class="hljs-keyword">return</span> catelog2Vos;<br>        &#125;));<br>        catelogJSON = JSON.toJSONString(catelog);<br>        stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;catelogJSON&quot;</span>, catelogJSON, <span class="hljs-number">1</span>, TimeUnit.DAYS);<br>        <span class="hljs-keyword">return</span> catelog;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> List&lt;CategoryEntity&gt; <span class="hljs-title function_">getParent_cid</span><span class="hljs-params">(List&lt;CategoryEntity&gt; selectList, Long parent_cid)</span> &#123;<br>    <span class="hljs-keyword">return</span> selectList.stream().filter((item) -&gt; Objects.equals(item.getParentCid(), parent_cid)).collect(Collectors.toList());<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>使用这种方式, 只能锁住当前节点, 如果该微服务下有<span class="math inline">\(n\)</span>个节点, 则实际上可能会有<span class="math inline">\(n\)</span>个进程同时访问数据库</strong></p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220605232310.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p><strong>在分布式下, 想要锁住所有, 必须使用分布式锁</strong></p>
<h4 id="分布式锁">分布式锁</h4>
<h5 id="使用redis做分布式锁">使用redis做分布式锁</h5>
<h6 id="方案一">方案一</h6>
<p>利用set key value NX, NX表示这个key不存在时才能set, 如果存在了返回nil</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220605233129.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="hljs-title function_">getCatelogJsonFromDbWithRedisLock</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-comment">// 1. 占分布式锁</span><br>    <span class="hljs-keyword">if</span> (Boolean.TRUE.equals(stringRedisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;lock&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>))) &#123;<br>        Map&lt;String, List&lt;Catelog2Vo&gt;&gt; dataFromDb = getDataFromDb();<br>        stringRedisTemplate.delete(<span class="hljs-string">&quot;lock&quot;</span>); <span class="hljs-comment">// 执行完任务后删除锁</span><br>        <span class="hljs-keyword">return</span> dataFromDb;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 休眠100ms重试</span><br><br>        <span class="hljs-keyword">return</span> getCatelogJsonFromDbWithLocalLock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>存在的问题</strong></p>
<p>1、setnx占好了位, 业务代码异常或者程序突然宕机了, 没有执行删除锁的逻辑, 这就造成了死锁</p>
<p>解决的方法：</p>
<p>设置锁自动过期, 即使没有删除, 也会自动删除。</p>
<h6 id="方案二">方案二</h6>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220605234638.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="hljs-title function_">getCatelogJsonFromDbWithRedisLock</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-comment">// 1. 占分布式锁</span><br>    <span class="hljs-keyword">if</span> (Boolean.TRUE.equals(stringRedisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;lock&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>, <span class="hljs-number">30</span>, TimeUnit.SECONDS))) &#123;<br>        <span class="hljs-comment">// 设置过期时间必须和加锁是原子的</span><br>        <span class="hljs-comment">// stringRedisTemplate.expire(&quot;lock&quot;, 30, TimeUnit.SECONDS);</span><br>        Map&lt;String, List&lt;Catelog2Vo&gt;&gt; dataFromDb = getDataFromDb();<br>        stringRedisTemplate.delete(<span class="hljs-string">&quot;lock&quot;</span>); <span class="hljs-comment">// 执行完任务后删除锁</span><br>        <span class="hljs-keyword">return</span> dataFromDb;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 休眠100ms重试</span><br><br>        <span class="hljs-keyword">return</span> getCatelogJsonFromDbWithLocalLock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>存在的问题</strong></p>
<p>1、删除锁直接删除？</p>
<p>如果由于业务时间很长, 锁自己过期啦, 我们直接删除, 有可能把别人持有的锁删除了</p>
<p>解决:</p>
<p>占锁的时间, 值指定为uuid, 每个人匹配是自己的锁才删除</p>
<h6 id="方案三">方案三</h6>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="hljs-title function_">getCatelogJsonFromDbWithRedisLock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>    <span class="hljs-comment">// 1. 占分布式锁</span><br>    <span class="hljs-keyword">if</span> (Boolean.TRUE.equals(stringRedisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;lock&quot;</span>, token, <span class="hljs-number">30</span>, TimeUnit.SECONDS))) &#123;<br>        <span class="hljs-comment">// 设置过期时间必须和加锁是原子的</span><br>        <span class="hljs-comment">// stringRedisTemplate.expire(&quot;lock&quot;, 30, TimeUnit.SECONDS);</span><br>        Map&lt;String, List&lt;Catelog2Vo&gt;&gt; dataFromDb = getDataFromDb();<br>        <span class="hljs-comment">// 自己占的锁才删除</span><br>        <span class="hljs-keyword">if</span> (token.equals(stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;lock&quot;</span>))) &#123;<br>            stringRedisTemplate.delete(<span class="hljs-string">&quot;lock&quot;</span>); <span class="hljs-comment">// 执行完任务后删除锁</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> dataFromDb;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 休眠100ms重试</span><br>        <span class="hljs-keyword">return</span> getCatelogJsonFromDbWithLocalLock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>不过呢，这样做还是有问题的！</strong>假如我们设置锁的过期时间为10s, 我们在9.5s时, 查到redis中的锁是自己占的锁, 然后返回到服务时, 时间超过了10s, 这时自己占有的锁<strong>已经被删除了呢</strong>, 再执行删除操作时, 也会把别人的锁删了！</p>
<h6 id="方案四">方案四</h6>
<p>让查询是否是自己的锁和删除锁作为一个原子操作, 使用lua脚本</p>
<blockquote>
<p><a href="http://redis.cn/commands/set.html">set 命令</a></p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> redis.call(<span class="hljs-string">&quot;get&quot;</span>,KEYS[<span class="hljs-number">1</span>]) == ARGV[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">return</span> redis.call(<span class="hljs-string">&quot;del&quot;</span>,KEYS[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="hljs-title function_">getCatelogJsonFromDbWithRedisLock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>    <span class="hljs-comment">// 1. 占分布式锁</span><br>    <span class="hljs-keyword">if</span> (Boolean.TRUE.equals(stringRedisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;lock&quot;</span>, token, <span class="hljs-number">30</span>, TimeUnit.SECONDS))) &#123;<br>        <span class="hljs-comment">// 设置过期时间必须和加锁是原子的</span><br>        <span class="hljs-comment">// stringRedisTemplate.expire(&quot;lock&quot;, 30, TimeUnit.SECONDS);</span><br>        Map&lt;String, List&lt;Catelog2Vo&gt;&gt; dataFromDb;<br>        <span class="hljs-keyword">try</span> &#123;<br>            dataFromDb = getDataFromDb();<br>            <span class="hljs-comment">// 自己占的锁才删除</span><br>            <span class="hljs-comment">// if (token.equals(stringRedisTemplate.opsForValue().get(&quot;lock&quot;))) &#123;</span><br>            <span class="hljs-comment">//   stringRedisTemplate.delete(&quot;lock&quot;); // 执行完任务后删除锁</span><br>            <span class="hljs-comment">// &#125;</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">script</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;if redis.call(\&quot;get\&quot;,KEYS[1]) == ARGV[1] then return redis.call(\&quot;del\&quot;,KEYS[1]) else return 0 end&quot;</span>;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> stringRedisTemplate.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;(script, Long.class), List.of(<span class="hljs-string">&quot;lock&quot;</span>), token);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dataFromDb;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 休眠100ms重试</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">100</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> getCatelogJsonFromDbWithLocalLock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="redisson">Redisson</h5>
<h6 id="简单使用">简单使用</h6>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.redisson/redisson --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.17.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRedissonConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean(destroyMethod = &quot;shutdown&quot;)</span><br>    RedissonClient <span class="hljs-title function_">redisson</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://192.168.134.146:6380&quot;</span>);<br>        <span class="hljs-keyword">return</span> Redisson.create(config);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取锁, 只要锁名一样就是同一把锁</span><br>    <span class="hljs-type">RLock</span> <span class="hljs-variable">rLock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;my-lock&quot;</span>);<br><br>    <span class="hljs-comment">// 加锁</span><br>    rLock.lock();<br>    <span class="hljs-comment">// 加锁时设置了过期时间 默认为30s</span><br>    <span class="hljs-comment">// 在执行长时间的业务时, 还能自动给锁续期</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;lock successfully.....&quot;</span> + Thread.currentThread().getId());<br>        Thread.sleep(<span class="hljs-number">40000</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 解锁</span><br>        System.out.println(<span class="hljs-string">&quot;unlock successfully.....&quot;</span> + Thread.currentThread().getId());<br>        rLock.unlock();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>注意</strong></p>
<p>如果调用lock方法时, 指定了lock的过期时间, 比如<code>rLock.lock(10, TimeUnit.seconds)</code>, 则这个锁是不会自动续期的！</p>
<p>两者的区别在于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> &lt;T&gt; RFuture&lt;Long&gt; <span class="hljs-title function_">tryAcquireAsync</span><span class="hljs-params">(<span class="hljs-type">long</span> waitTime, <span class="hljs-type">long</span> leaseTime, TimeUnit unit, <span class="hljs-type">long</span> threadId)</span> &#123;<br>    RFuture ttlRemainingFuture;<br>    <span class="hljs-keyword">if</span> (leaseTime &gt; <span class="hljs-number">0L</span>) &#123;<br>        ttlRemainingFuture = <span class="hljs-built_in">this</span>.tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ttlRemainingFuture = <span class="hljs-built_in">this</span>.tryLockInnerAsync(waitTime, <span class="hljs-built_in">this</span>.internalLockLeaseTime, TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);<br>    &#125;<br>    <br>    CompletionStage&lt;Long&gt; f = ttlRemainingFuture.thenApply((ttlRemaining) -&gt; &#123;<br>        <span class="hljs-keyword">if</span> (ttlRemaining == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 指定过期时间的</span><br>            <span class="hljs-keyword">if</span> (leaseTime &gt; <span class="hljs-number">0L</span>) &#123;<br>                <span class="hljs-built_in">this</span>.internalLockLeaseTime = unit.toMillis(leaseTime);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 不指定过期时间的</span><br>                <span class="hljs-built_in">this</span>.scheduleExpirationRenewal(threadId);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ttlRemaining;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompletableFutureWrapper</span>(f);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>this.scheduleExpirationRenewal(threadId)会设置一个定时任务, 任务的执行时间为1/3过期时间, 将锁续期为30s, 并再次调用这个定时任务</p>
<p><strong>推荐使用指定过期时间的lock, 且保证设置的过期时间大于业务的执行时间</strong></p>
<p><del>信号量做限流</del></p>
<h6 id="缓存一致性解决">缓存一致性解决</h6>
<p><strong>双写模式</strong></p>
<p>更新数据库时, 将redis中的缓存更新为数据库的最新值</p>
<p>不过呢，在分布式高并发场景下, 会出现如下场景:</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220606163654.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>线程A, 先执行写数据库操作, 然后被阻塞了, 或者线程B的机器比较快, 线程B完成了写数据库操作, 并写缓存, 之后A再写缓存。这样就会使得数据库和缓存出现不一致！</p>
<p><strong>解决的方法</strong></p>
<ol type="1">
<li>给更新方法加分布式锁, 只有拿到锁的线程才能执行更新操作, 这种方法会使得并发量大大降低</li>
<li>如果该业务允许暂时的数据不一致问题, 则我们可以给缓存设置过期时间, 等到缓存失效了, 就能从数据库取得最新数据, 使得数据一致</li>
</ol>
<p><strong>失效模式</strong></p>
<p>更新数据库时, 将缓存中的数据删除</p>
<p>这种场景也会出现数据不一致的问题呢, 见如下场景:</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220606164553.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p><strong>解决方法</strong></p>
<ol type="1">
<li>同样可以加锁</li>
<li>经常修改的数据, 且对实时性要求高的, 不应该放在缓存中, 应该直接查数据库</li>
</ol>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220606165848.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>这里采用读写锁做个示例</p>
<p>读操作时, 加上读锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 缓存里的数据如何和数据库的数据保持一致？？</span><br><span class="hljs-comment">     * 缓存数据一致性</span><br><span class="hljs-comment">     * 1)、双写模式</span><br><span class="hljs-comment">     * 2)、失效模式</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> Map&lt;String, List&lt;Catalogs2Vo&gt;&gt; <span class="hljs-title function_">getCatalogJsonFromDbWithRedissonLock</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-comment">//1、占分布式锁。去redis占坑</span><br>    <span class="hljs-comment">//（锁的粒度，越细越快:具体缓存的是某个数据，11号商品） product-11-lock</span><br>    <span class="hljs-comment">//RLock catalogJsonLock = redissonClient.getLock(&quot;catalogJson-lock&quot;);</span><br>    <span class="hljs-comment">//获取读锁</span><br>    <span class="hljs-type">RReadWriteLock</span> <span class="hljs-variable">readWriteLock</span> <span class="hljs-operator">=</span> redissonClient.getReadWriteLock(<span class="hljs-string">&quot;catalogJson-lock&quot;</span>);<br><br>    <span class="hljs-type">RLock</span> <span class="hljs-variable">rLock</span> <span class="hljs-operator">=</span> readWriteLock.readLock();<br><br>    Map&lt;String, List&lt;Catalogs2Vo&gt;&gt; dataFromDb = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        rLock.lock();<br>        <span class="hljs-comment">//加锁成功...执行业务</span><br>        dataFromDb = getCatalogJsonFromDB();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        rLock.unlock();<br>    &#125;<br>    <span class="hljs-keyword">return</span> dataFromDb;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在写操作时, 加上写锁</p>
<h4 id="springcache">SpringCache</h4>
<h5 id="简介-1">简介</h5>
<p>Spring 从 3.1 开始定义了 org.springframework.cache.Cache 和 org.springframework.cache.CacheManager 接口来统一不同的缓存技术; 并支持使用 JCache（JSR-107）注解简化我们开发</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220606171327.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<h5 id="常用注解">常用注解</h5>
<ul>
<li><span class="citation" data-cites="Cacheable">@Cacheable</span> ：触发将数据保存到缓存的操作；</li>
<li><span class="citation" data-cites="CacheEvict">@CacheEvict</span> : 触发将数据从缓存删除的操作；</li>
<li><span class="citation" data-cites="CachePut">@CachePut</span> ：不影响方法执行更新缓存；</li>
<li><span class="citation" data-cites="Cacheing">@Cacheing</span>：组合以上多个操作；</li>
<li><span class="citation" data-cites="CacheConfig">@CacheConfig</span>：在类级别共享缓存的相同配置；</li>
</ul>
<h5 id="使用springcache">使用SpringCache</h5>
<p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>在配置文件中指定缓存类型</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.cache.type</span>=<span class="hljs-string">redis</span><br></code></pre></td></tr></table></figure>
<p>在主类中添加<code>@EnableCaching</code>注解</p>
<p>简单demo, 使用@Cacheable</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Cacheable(&#123;&quot;category&quot;&#125;)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;CategoryEntity&gt; <span class="hljs-title function_">getLevel1Categories</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;getLevel1Categories...........&quot;</span>);<br>    List&lt;CategoryEntity&gt; categoryEntities = <span class="hljs-built_in">this</span>.list(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;CategoryEntity&gt;().eq(<span class="hljs-string">&quot;parent_cid&quot;</span>, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">return</span> categoryEntities;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><code>@Cacheable(&#123;"category"&#125;)</code>表示如果缓存中没有"category"这个缓存, 则调用这个方法, 如果有则返回缓存中的数据, 不调用方法</p>
<p><strong><span class="citation" data-cites="Cacheable的默认行为">@Cacheable的默认行为</span></strong></p>
<p>key为缓存的名字::SimpleKey, value存储java序列化后的结果, 默认过期时间为-1</p>
<h5 id="自定义springcache配置">自定义SpringCache配置</h5>
<p><strong>指定key</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Cacheable(value = &#123;&quot;category&quot;&#125;, key = &quot;&#x27;level1Categories&#x27;&quot;)</span><br></code></pre></td></tr></table></figure>
<p>key的值为SpEL表达式, <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#cache-spel-context">可以使用的SpEL表达式</a></p>
<p><strong>设置过期时间</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># application.properties</span><br><br><span class="hljs-attr">spring.cache.redis.time-to-live</span>=<span class="hljs-string">60000	# 单位为ms</span><br></code></pre></td></tr></table></figure>
<p><strong>Redis配置文件的自动装配过程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>RedisCacheManager <span class="hljs-title function_">cacheManager</span><span class="hljs-params">(CacheProperties cacheProperties, CacheManagerCustomizers cacheManagerCustomizers, ObjectProvider&lt;org.springframework.data.redis.cache.RedisCacheConfiguration&gt; redisCacheConfiguration, ObjectProvider&lt;RedisCacheManagerBuilderCustomizer&gt; redisCacheManagerBuilderCustomizers, RedisConnectionFactory redisConnectionFactory, ResourceLoader resourceLoader)</span> &#123;<br>    <span class="hljs-type">RedisCacheManagerBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> RedisCacheManager.builder(redisConnectionFactory).cacheDefaults(<span class="hljs-built_in">this</span>.determineConfiguration(cacheProperties, redisCacheConfiguration, resourceLoader.getClassLoader()));<br>    List&lt;String&gt; cacheNames = cacheProperties.getCacheNames();<br>    <span class="hljs-keyword">if</span> (!cacheNames.isEmpty()) &#123;<br>        builder.initialCacheNames(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>(cacheNames));<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (cacheProperties.getRedis().isEnableStatistics()) &#123;<br>        builder.enableStatistics();<br>    &#125;<br><br>    redisCacheManagerBuilderCustomizers.orderedStream().forEach((customizer) -&gt; &#123;<br>        customizer.customize(builder);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> (RedisCacheManager)cacheManagerCustomizers.customize(builder.build());<br>&#125;<br></code></pre></td></tr></table></figure>
<p>如果我们不自己配置redisCacheConfiguration, 则redisCacheConfiguration为null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> org.springframework.data.redis.cache.RedisCacheConfiguration <span class="hljs-title function_">determineConfiguration</span><span class="hljs-params">(CacheProperties cacheProperties, ObjectProvider&lt;org.springframework.data.redis.cache.RedisCacheConfiguration&gt; redisCacheConfiguration, ClassLoader classLoader)</span> &#123;<br>    <span class="hljs-keyword">return</span> (org.springframework.data.redis.cache.RedisCacheConfiguration)redisCacheConfiguration.getIfAvailable(() -&gt; &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.createConfiguration(cacheProperties, classLoader);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>如果redisCacheConfiguration为null则调用createConfiguration方法, 创建一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> org.springframework.data.redis.cache.RedisCacheConfiguration <span class="hljs-title function_">createConfiguration</span><span class="hljs-params">(CacheProperties cacheProperties, ClassLoader classLoader)</span> &#123;<br>    <span class="hljs-type">Redis</span> <span class="hljs-variable">redisProperties</span> <span class="hljs-operator">=</span> cacheProperties.getRedis();<br>    org.springframework.data.redis.cache.<span class="hljs-type">RedisCacheConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> org.springframework.data.redis.cache.RedisCacheConfiguration.defaultCacheConfig();<br>    config = config.serializeValuesWith(SerializationPair.fromSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JdkSerializationRedisSerializer</span>(classLoader)));<br>    <span class="hljs-keyword">if</span> (redisProperties.getTimeToLive() != <span class="hljs-literal">null</span>) &#123;<br>        config = config.entryTtl(redisProperties.getTimeToLive());<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (redisProperties.getKeyPrefix() != <span class="hljs-literal">null</span>) &#123;<br>        config = config.prefixCacheNameWith(redisProperties.getKeyPrefix());<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!redisProperties.isCacheNullValues()) &#123;<br>        config = config.disableCachingNullValues();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!redisProperties.isUseKeyPrefix()) &#123;<br>        config = config.disableKeyPrefix();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> config;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>defaultCacheConfig方法会返回默认一些配置, 然后再根据配置文件中是否指定了一些值, 设置值</p>
<p>综合上面分析, 如果我们想要自定义配置, 可以往容器中注入一个redisCacheConfiguration, 就不会使用默认配置了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableConfigurationProperties(CacheProperties.class)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCacheConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisCacheConfiguration <span class="hljs-title function_">redisCacheConfiguration</span><span class="hljs-params">(CacheProperties cacheProperties)</span> &#123;<br>        <span class="hljs-type">RedisCacheConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> RedisCacheConfiguration.defaultCacheConfig();<br>        config = config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>()));<br>        config = config.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>()));<br><br>        <span class="hljs-comment">// 将配置文件中的内容也拿来</span><br>        CacheProperties.<span class="hljs-type">Redis</span> <span class="hljs-variable">redisProperties</span> <span class="hljs-operator">=</span> cacheProperties.getRedis();<br>        <span class="hljs-keyword">if</span> (redisProperties.getTimeToLive() != <span class="hljs-literal">null</span>) &#123;<br>            config = config.entryTtl(redisProperties.getTimeToLive());<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (redisProperties.getKeyPrefix() != <span class="hljs-literal">null</span>) &#123;<br>            config = config.prefixCacheNameWith(redisProperties.getKeyPrefix());<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!redisProperties.isCacheNullValues()) &#123;<br>            config = config.disableCachingNullValues();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!redisProperties.isUseKeyPrefix()) &#123;<br>            config = config.disableKeyPrefix();<br>        &#125;<br>        <span class="hljs-keyword">return</span> config;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>而且, 我们想要配置文件的配置也生效, 所以引入了CacheProperties, 并对值进行设置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.cache.type</span>=<span class="hljs-string">redis</span><br><br><span class="hljs-attr">spring.cache.redis.time-to-live</span>=<span class="hljs-string">60000</span><br><span class="hljs-comment"># 如果指定了前缀就使用该前缀, 否则默认使用缓存的名字作为前缀</span><br><span class="hljs-attr">spring.cache.redis.key-prefix</span>=<span class="hljs-string">CACHE_</span><br><span class="hljs-comment"># 如果为false, 则key没有前缀</span><br><span class="hljs-attr">spring.cache.redis.use-key-prefix</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 是否缓存空值, 防止缓存穿透</span><br><span class="hljs-attr">spring.cache.redis.cache-null-values</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure>
<h5 id="springcache的不足">SpringCache的不足</h5>
<ul>
<li>缓存穿透：查询一个null数据。解决方案：缓存空数据</li>
<li>缓存击穿：大量并发进来同时查询一个正好过期的数据。解决方案：加锁 ? 默认是无加锁的;使用sync = true来解决击穿问题</li>
<li>缓存雪崩：大量的key同时过期。解决：加随机时间。加上过期时间</li>
</ul>
<p>总结：</p>
<ul>
<li>常规数据（读多写少，即时性，一致性要求不高的数据，完全可以使用Spring-Cache）：写模式(只要缓存的数据有过期时间就足够了)</li>
<li>特殊数据：特殊设计</li>
</ul>
<h3 id="检索服务">检索服务</h3>
<h4 id="添加模板页面">添加模板页面</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 模板引擎 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>将资料中的前端页面放到search服务模块下的resource/templates下;</p>
<h4 id="配置请求跳转">配置请求跳转</h4>
<h5 id="配置nginx转发">配置Nginx转发</h5>
<p>配置windows hosts文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs host">192.168.163.131		search.gulimall.com<br></code></pre></td></tr></table></figure>
<p>修改Nginx的配置文件 mall.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs conf">server &#123;<br>    listen       80;<br>    server_name  *.mall.com;<br><br>    #charset koi8-r;<br>    #access_log  /var/log/nginx/log/host.access.log  main;<br>    location /static/ &#123;<br>        root    /usr/share/nginx/html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>然后重启Nginx</p>
<h5 id="配置网关服务转发到search服务">配置网关服务转发到search服务</h5>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">mall_search_route</span><br>  <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://mall-search</span><br>  <span class="hljs-attr">predicates:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Host=search.gulmall.com</span><br></code></pre></td></tr></table></figure>
<h4 id="检索功能">检索功能</h4>
<h5 id="修改映射">修改映射</h5>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">PUT product<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;skuId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;spuId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuTitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuImg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;saleCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;hasStock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;boolean&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;hotScore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;brandId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;catalogId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;brandName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;brandImg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;catalogName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;attrs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nested&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;attrId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;attrName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;attrValue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<h5 id="es检索分析">ES检索分析</h5>
<p>将检索时可能带的参数封装为<code>SeachParam</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xinyu.mall.search.vo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 封装所有页面可能传递过来的查询条件</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * catelog3Id=255&amp;keyword=小米&amp;sort=saleCount_As&amp;hasStock=0/1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SearchParam</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String keyword;     <span class="hljs-comment">// 页面传递过来的全文匹配关键字</span><br>    <span class="hljs-keyword">private</span> Long catelog3Id;    <span class="hljs-comment">// 三级分类id</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * sort = saleCount_asc/desc</span><br><span class="hljs-comment">     * sort = skuPrice_asc/desc</span><br><span class="hljs-comment">     * sort = hotScore_asc/desc</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String sort;        <span class="hljs-comment">// 排序条件</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 过滤条件</span><br><span class="hljs-comment">     * hosStock, skuPrice, brandId</span><br><span class="hljs-comment">     * hostStock=0/1</span><br><span class="hljs-comment">     * skuPrice=1_500/_500/500_</span><br><span class="hljs-comment">     * brandId=1&amp;brandId=2</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer hasStock;      <span class="hljs-comment">// 是否只显示有货</span><br>    <span class="hljs-keyword">private</span> String skuPrice;       <span class="hljs-comment">// 价格区间</span><br>    <span class="hljs-keyword">private</span> List&lt;Long&gt; brandId;          <span class="hljs-comment">// 按照品牌, 可以多选</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; attrs;    <span class="hljs-comment">// 按照属性进行筛选</span><br>    <span class="hljs-keyword">private</span> Integer pageNum;        <span class="hljs-comment">// 页码</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>将检索后返回的结果封装了SearchResult</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xinyu.mall.search.vo;<br><br><span class="hljs-keyword">import</span> com.xinyu.common.to.SkuEsModel;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SearchResult</span> &#123;<br><br>    <span class="hljs-comment">// 查询到的所有商品信息</span><br>    <span class="hljs-keyword">private</span> List&lt;SkuEsModel&gt; products;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer pageNum;<br>    <span class="hljs-keyword">private</span> Long total;     <span class="hljs-comment">// 总记录数</span><br>    <span class="hljs-keyword">private</span> Integer totalPages;<br><br>    <span class="hljs-keyword">private</span> List&lt;BrandVo&gt; brands;   <span class="hljs-comment">// 当前查询到的结果所涉及的所有品牌</span><br>    <span class="hljs-keyword">private</span> List&lt;CatelogVo&gt; catelogs;   <span class="hljs-comment">// 所涉及到的所有分类</span><br>    <span class="hljs-keyword">private</span> List&lt;AttrVo&gt; attrs;     <span class="hljs-comment">// 当前查询到的结果所涉及的所有属性</span><br><br>    <span class="hljs-comment">// ============以上是返回给页面的所有信息==============</span><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BrandVo</span> &#123;<br>        <span class="hljs-keyword">private</span> Long brandId;<br>        <span class="hljs-keyword">private</span> String brandName;<br>        <span class="hljs-keyword">private</span> String brandImg;<br>    &#125;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CatelogVo</span> &#123;<br>        <span class="hljs-keyword">private</span> Long catelogId;<br>        <span class="hljs-keyword">private</span> String catelogName;<br>    &#125;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AttrVo</span> &#123;<br>        <span class="hljs-keyword">private</span> Long attrId;<br>        <span class="hljs-keyword">private</span> String attrName;<br>        <span class="hljs-keyword">private</span> List&lt;String&gt; attrValue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="es检索dsl语句分析">ES检索DSL语句分析</h5>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">GET /product/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;skuTitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vivo&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;catelogId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;225&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;brandId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>              <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-string">&quot;3&quot;</span><br>            <span class="hljs-punctuation">]</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;nested&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;attrs&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                  <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                      <span class="hljs-attr">&quot;attrs.attrId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5&quot;</span><br>                      <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                      <span class="hljs-attr">&quot;attrs.attrValue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                        <span class="hljs-string">&quot;联发科 9000&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;骁龙&quot;</span><br>                      <span class="hljs-punctuation">]</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                  <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">]</span><br>              <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;hasStock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;skuPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6000</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;skuPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;skuTitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;pre_tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;b style=&#x27;color:red&#x27;&gt;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;post_tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;/b&gt;&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brand_agg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brandId&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;brand_name_agg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brandName&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brand_img_agg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brandImg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;catelog_agg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;catelogId&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;catelog_name_agg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;catelogName.keyword&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;attr_agg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;nested&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;attrs&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;attr_id_agg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;attrs.attrId&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;attr_name_agg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;attrs.attrName&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>              <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;attr_value_agg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;attrs.attrValue&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>              <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p>如果数据类型是<strong>nested</strong>, 则需要先指定查询类型是nested和nested的path</p>
<h5 id="检索代码">检索代码</h5>
<p>分析出DSL语句后, 根据DSL语句构建对应的SearchRequest就可以了</p>
<p>构建SearchResult时, 可以先在kibana执行一遍DSL语句, 然后根据执行的结果, 再边Debug, 边构建</p>
<h3 id="异步与线程池">异步与线程池</h3>
<h4 id="线程池的七大参数">线程池的七大参数</h4>
<blockquote>
<p>/**</p>
<p>* Creates a new <em>{</em><strong><em><span class="citation" data-cites="code">@code</span></em></strong> ThreadPoolExecutor<em>}</em> with the given initial</p>
<p>* parameters.</p>
<ul>
<li></li>
</ul>
<p>* <strong><em><span class="citation" data-cites="param">@param</span></em></strong> corePoolSize the number of threads to keep in the pool, even</p>
<p>* if they are idle, unless <em>{</em><strong><em><span class="citation" data-cites="code">@code</span></em></strong> allowCoreThreadTimeOut<em>}</em> is set</p>
<p>* <strong><em><span class="citation" data-cites="param">@param</span></em></strong> maximumPoolSize the maximum number of threads to allow in the</p>
<p>* pool</p>
<p>* <strong><em><span class="citation" data-cites="param">@param</span></em></strong> keepAliveTime when the number of threads is greater than</p>
<p>* the core, this is the maximum time that excess idle threads</p>
<p>* will wait for new tasks before terminating.</p>
<p>* <strong><em><span class="citation" data-cites="param">@param</span></em></strong> unit the time unit for the <em>{</em><strong><em><span class="citation" data-cites="code">@code</span></em></strong> keepAliveTime<em>}</em> argument</p>
<p>* <strong><em><span class="citation" data-cites="param">@param</span></em></strong> workQueue the queue to use for holding tasks before they are</p>
<p>* executed. This queue will hold only the <em>{</em><strong><em><span class="citation" data-cites="code">@code</span></em></strong> Runnable<em>}</em></p>
<p>* tasks submitted by the <em>{</em><strong><em><span class="citation" data-cites="code">@code</span></em></strong> execute<em>}</em> method.</p>
<p>* <strong><em><span class="citation" data-cites="param">@param</span></em></strong> threadFactory the factory to use when the executor</p>
<p>* creates a new thread</p>
<p>* <strong><em><span class="citation" data-cites="param">@param</span></em></strong> handler the handler to use when execution is blocked</p>
<p>* because the thread bounds and queue capacities are reached</p>
<ol type="1">
<li>corePoolSize: 池中一直保持的线程的数量，即使线程空闲。除非设置了 allowCoreThreadTimeOut</li>
<li>maximumPoolSize: 池中允许的最大的线程数</li>
<li>keepAliveTime: 当线程数大于核心线程数的时候，超出核心线程数的线程在最大多长时间没有接到新任务就会终止释放 ，最终线程池维持在 corePoolSize 大小</li>
<li>unit: 时间单位</li>
<li>workQueue: 阻塞队列，用来存储等待执行的任务，如果当前对线程的需求超过了 corePoolSize大小， 就 会放在这里 等待空闲线程执行.</li>
<li>threadFactory：创建线程的工厂，比如指定线程名等</li>
<li>handler：拒绝策略，如果线程满了，线程池就会使用拒绝策略。</li>
</ol>
</blockquote>
<ol type="1">
<li>corePoolSize: 池中一直保持的线程的数量，即使线程空闲。除非设置了 allowCoreThreadTimeOut</li>
<li>maximumPoolSize: 池中允许的最大的线程数</li>
<li>keepAliveTime: 当线程数大于核心线程数的时候，超出核心线程数的线程在最大多长时间没有接到新任务就会终止释放 ，最终线程池维持在 corePoolSize 大小</li>
<li>unit: 时间单位</li>
<li>workQueue: 阻塞队列，用来存储等待执行的任务，如果当前对线程的需求超过了 corePoolSize大小， 就 会放在这里 等待空闲线程执行.</li>
<li>threadFactory：创建线程的工厂，比如指定线程名等</li>
<li>handler：拒绝策略，如果线程满了，线程池就会使用拒绝策略。</li>
</ol>
<h4 id="completablefuture-异步编排">CompletableFuture 异步编排</h4>
<h5 id="简介-2">简介</h5>
<p>业务场景:</p>
<p>查询商品详情页的逻辑比较复杂, 有些数据还需要远程调用, 必然需要花费更多的时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 获取sku的基本信息	0.5s</span><br><br><span class="hljs-comment">// 2. 获取sku的图片信息	0.5s</span><br><br><span class="hljs-comment">// 3. 获取sku的促销信息	1s</span><br><br><span class="hljs-comment">// 4. 获取sku的所有销售属性	1s</span><br><br><span class="hljs-comment">//5. 获取规格参数及组下的规格参数	1.5s</span><br><br><span class="hljs-comment">// 6. spu详情	1s</span><br></code></pre></td></tr></table></figure>
<p>如果同步操作这个流程的话, 需要5.5s才能完成这个流程, 如果采用多线程的方式, 有可能只要1.5s就能完成</p>
<p>不过呢, 这些流程是有前后顺序要求的, 4，5，6需要1执行后获取spuId才能执行, 即<strong>多线程之间的任务调度是有先后顺序要求的</strong>。</p>
<p>使用CompletableFuture, 可以满足这个需求, 类似于js的Promise</p>
<h5 id="创建方式">创建方式</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="hljs-title function_">supplyAsync</span><span class="hljs-params">(Supplier&lt;U&gt; supplier)</span> &#123;<br>    <span class="hljs-keyword">return</span> asyncSupplyStage(ASYNC_POOL, supplier);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="hljs-title function_">supplyAsync</span><span class="hljs-params">(Supplier&lt;U&gt; supplier,</span><br><span class="hljs-params">                                                   Executor executor)</span> &#123;<br>    <span class="hljs-keyword">return</span> asyncSupplyStage(screenExecutor(executor), supplier);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">runAsync</span><span class="hljs-params">(Runnable runnable)</span> &#123;<br>    <span class="hljs-keyword">return</span> asyncRunStage(ASYNC_POOL, runnable);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">runAsync</span><span class="hljs-params">(Runnable runnable,</span><br><span class="hljs-params">                                               Executor executor)</span> &#123;<br>    <span class="hljs-keyword">return</span> asyncRunStage(screenExecutor(executor), runnable);<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="简单使用-1">简单使用</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    System.out.println(<span class="hljs-string">&quot;main start...........&quot;</span>);<br>    CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;currentThread: &quot;</span> + Thread.currentThread().getId());<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> / <span class="hljs-number">2</span>;<br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + i);<br>    &#125;, executor);<br>    System.out.println(<span class="hljs-string">&quot;main end...........&quot;</span> );<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    System.out.println(<span class="hljs-string">&quot;main start...........&quot;</span>);<br>    CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;currentThread: &quot;</span> + Thread.currentThread().getId());<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> / <span class="hljs-number">0</span>;<br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + i);<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;, executor).whenComplete((res, exception) -&gt; &#123;<br>        <span class="hljs-comment">// 虽然能得到异常信息, 但是没法修改返回数据</span><br>        System.out.println(<span class="hljs-string">&quot;async task finished, result = &quot;</span> + res + <span class="hljs-string">&quot;, exception = &quot;</span> + exception);<br>    &#125;).exceptionally(throwable -&gt; &#123;<br>        <span class="hljs-comment">// 可以感知异常, 并能返回一个值, 作为异常出现后返回的值</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>    &#125;);<br>    System.out.println(<span class="hljs-string">&quot;main end...........&quot;</span> + future.get());<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="handle方法">handle方法</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 任务执行后handle被调用, handle处理后返回值</span><br>CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;currentThread: &quot;</span> + Thread.currentThread().getId());<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> / <span class="hljs-number">2</span>;<br>    System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + i);<br>    <span class="hljs-keyword">return</span> i;<br>&#125;, executor).handle((res, e) -&gt; &#123;<br>    <span class="hljs-keyword">if</span> (res != <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> res * <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;);<br>System.out.println(<span class="hljs-string">&quot;main end...........&quot;</span> + future.get());<br></code></pre></td></tr></table></figure>
<h5 id="线程串行化方法">线程串行化方法</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 线程串行化</span><br><span class="hljs-comment">         * 1）thenRun: 不能获取上一步的执行结果, 无返回值</span><br><span class="hljs-comment">         *  thenRunAsync(() -&gt; &#123;</span><br><span class="hljs-comment">         *     System.out.println(&quot;任务2启动了&quot;);</span><br><span class="hljs-comment">         *  &#125;, executor);</span><br><span class="hljs-comment">         * 2）thenAccept: 能获取上一步的执行结果, 无返回值</span><br><span class="hljs-comment">         * thenAcceptAsync(res -&gt; &#123;</span><br><span class="hljs-comment">         *     System.out.println(&quot;任务2启动.....&quot; + res);</span><br><span class="hljs-comment">         * &#125;, executor);</span><br><span class="hljs-comment">         * 3）thenApply: 能获取上一步的执行结果, 且有返回值</span><br><span class="hljs-comment">         * thenApplyAsync(res -&gt; &#123;</span><br><span class="hljs-comment">         *     System.out.println(&quot;任务2启动了.......&quot; + res);</span><br><span class="hljs-comment">         *     return &quot;hello &quot; + res;</span><br><span class="hljs-comment">         *  &#125;, executor);</span><br><span class="hljs-comment"> */</span><br>CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;currentThread: &quot;</span> + Thread.currentThread().getId());<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> / <span class="hljs-number">2</span>;<br>    System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + i);<br>    <span class="hljs-keyword">return</span> i;<br>&#125;, executor).thenApplyAsync(res -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;任务2启动了.......&quot;</span> + res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello &quot;</span> + res;<br>&#125;, executor);<br>System.out.println(future.get());<br>System.out.println(<span class="hljs-string">&quot;main end...........&quot;</span>);<br></code></pre></td></tr></table></figure>
<h5 id="两任务组合-都要完成">两任务组合 都要完成</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">CompletableFuture&lt;Integer&gt; future1 = CompletableFuture.supplyAsync(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;Thread1 start: &quot;</span> + Thread.currentThread().getId());<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> / <span class="hljs-number">2</span>;<br>    System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + i);<br>    System.out.println(<span class="hljs-string">&quot;Thread1 end: &quot;</span> + Thread.currentThread().getId());<br>    <span class="hljs-keyword">return</span> i;<br>&#125;, executor);<br>CompletableFuture&lt;String&gt; future2 = CompletableFuture.supplyAsync(() -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;Thread2 start: &quot;</span> + Thread.currentThread().getId());<br>    System.out.println(<span class="hljs-string">&quot;Thread2 end: &quot;</span> + Thread.currentThread().getId());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>&#125;, executor);<br></code></pre></td></tr></table></figure>
<p><strong>不知道任务执行结果, 没有返回值</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">future1.runAfterBothAsync(future2, ()-&gt;&#123;<br>    System.out.println(<span class="hljs-string">&quot;Thread3 start: &quot;</span> + Thread.currentThread().getId());<br>&#125;, executor);<br></code></pre></td></tr></table></figure>
<p><strong>知道任务执行结果, 没有返回值</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">future1.thenAcceptBothAsync(future2, (res1, res2)-&gt;&#123;<br>    System.out.println(<span class="hljs-string">&quot;Thread3 start: &quot;</span> + Thread.currentThread().getId());<br>    System.out.println(<span class="hljs-string">&quot;result from f1, f2: &quot;</span> + res1 + <span class="hljs-string">&quot;:&quot;</span> + res2);<br>&#125;, executor);<br></code></pre></td></tr></table></figure>
<p><strong>知道任务执行结果, 有返回值</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">CompletableFuture&lt;String&gt; future3 = future1.thenCombineAsync(future2, (res1, res2) -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;Thread3 start: &quot;</span> + Thread.currentThread().getId());<br>    System.out.println(<span class="hljs-string">&quot;result from f1, f2: &quot;</span> + res1 + <span class="hljs-string">&quot;:&quot;</span> + res2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;xinyu&quot;</span>;<br>&#125;, executor);<br></code></pre></td></tr></table></figure>
<h5 id="两任务组合-一个完成">两任务组合 一个完成</h5>
<p>两个任务中, 任意一个future任务完成的时候, 执行任务</p>
<p><strong>不知道返回结果, 也没有返回值</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">future1.runAfterEitherAsync(future2, ()-&gt;&#123;<br>    System.out.println(<span class="hljs-string">&quot;Thread3 start..........&quot;</span>);<br>&#125;, executor);<br></code></pre></td></tr></table></figure>
<p><strong>知道返回结果, 没有返回值</strong></p>
<p>不过选择这种方式, 需要future1, future2的返回值是相同的, <code>res</code>表示先完成的future的返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">future1.acceptEitherAsync(future2, (res)-&gt;&#123;<br>    System.out.println(<span class="hljs-string">&quot;Thread3 start..........&quot;</span>);<br>&#125;, executor);<br></code></pre></td></tr></table></figure>
<p><strong>知道返回结果, 也有返回值</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">future1.applyToEitherAsync(future2, (res) -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;Thread3........&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Thread3 : &quot;</span> + res;<br>&#125;, executor);<br></code></pre></td></tr></table></figure>
<h5 id="多任务组合">多任务组合</h5>
<p>等待所有的任务都完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    System.out.println(<span class="hljs-string">&quot;main start...........&quot;</span>);<br>    CompletableFuture&lt;String&gt; futureImg = CompletableFuture.supplyAsync(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;查询的商品的图片信息&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello.jpg&quot;</span>;<br>    &#125;, executor);<br>    CompletableFuture&lt;String&gt; futureAttr = CompletableFuture.supplyAsync(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;查询的商品的属性&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;黑色+256G&quot;</span>;<br>    &#125;, executor);<br>    CompletableFuture&lt;String&gt; futureDesc = CompletableFuture.supplyAsync(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>            System.out.println(<span class="hljs-string">&quot;查询的商品介绍&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;华为&quot;</span>;<br>    &#125;, executor);<br><br>    CompletableFuture&lt;Void&gt; allOf = CompletableFuture.allOf(futureImg, futureAttr, futureDesc);<br>    allOf.get();    <span class="hljs-comment">// 等待所有</span><br>    System.out.println(<span class="hljs-string">&quot;main end...........&quot;</span> + futureImg.get() + <span class="hljs-string">&quot;=&gt;&quot;</span> + futureAttr.get() + <span class="hljs-string">&quot;=&gt;&quot;</span> + futureDesc.get());<br>&#125;<br></code></pre></td></tr></table></figure>
<p>所有任务中一个完成就可以了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    System.out.println(<span class="hljs-string">&quot;main start...........&quot;</span>);<br>    CompletableFuture&lt;String&gt; futureImg = CompletableFuture.supplyAsync(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;查询的商品的图片信息&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello.jpg&quot;</span>;<br>    &#125;, executor);<br>    CompletableFuture&lt;String&gt; futureAttr = CompletableFuture.supplyAsync(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;查询的商品的属性&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;黑色+256G&quot;</span>;<br>    &#125;, executor);<br>    CompletableFuture&lt;String&gt; futureDesc = CompletableFuture.supplyAsync(() -&gt; &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>            System.out.println(<span class="hljs-string">&quot;查询的商品介绍&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;华为&quot;</span>;<br>    &#125;, executor);<br><br>    CompletableFuture&lt;Object&gt; anyOf = CompletableFuture.anyOf(futureImg, futureAttr, futureDesc);<br>    System.out.println(<span class="hljs-string">&quot;main end...........&quot;</span> + anyOf.get());<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="商品详情">商品详情</h3>
<h4 id="环境配置">环境配置</h4>
<h5 id="域名跳转环境">域名跳转环境</h5>
<p>修改本地hosts文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs host"># mall<br>192.168.163.131		gulimall.com<br>192.168.163.131		search.gulimall.com<br>192.168.163.131		item.gulimall.com<br></code></pre></td></tr></table></figure>
<h5 id="配置网关">配置网关</h5>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">id: mall_host_route </span><br>  <span class="hljs-attribute">uri</span><span class="hljs-punctuation">:</span> <span class="hljs-string">lb://mall-product</span><br>  <span class="hljs-attribute">predicates</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Host=mall.com, item.mall.com</span><br></code></pre></td></tr></table></figure>
<h5 id="静态文件上传至nginx">静态文件上传至nginx</h5>
<h4 id="实现">实现</h4>
<h5 id="模型分析">模型分析</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xinyu.mall.product.vo;<br><br><span class="hljs-keyword">import</span> com.xinyu.mall.product.entity.SkuImagesEntity;<br><span class="hljs-keyword">import</span> com.xinyu.mall.product.entity.SkuInfoEntity;<br><span class="hljs-keyword">import</span> com.xinyu.mall.product.entity.SpuInfoDescEntity;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SkuItemVo</span> &#123;<br>    <span class="hljs-comment">// 1. sku 基本信息获取 pms_sku_info</span><br>    <span class="hljs-keyword">private</span> SkuInfoEntity info;<br>    <span class="hljs-comment">// 2. sku的图片信息 pms_sku_images</span><br>    <span class="hljs-keyword">private</span> List&lt;SkuImagesEntity&gt; images;<br>    <span class="hljs-comment">// 3. 获取spu的销售属性组合</span><br>    <span class="hljs-keyword">private</span> List&lt;SkuItemSaleAttrVo&gt; saleAttrs;<br>    <span class="hljs-comment">// 4. 获取spu的介绍</span><br>    <span class="hljs-keyword">private</span> SpuInfoDescEntity desc;<br>    <span class="hljs-comment">//5. 获取spu的规格参数信息</span><br>    <span class="hljs-keyword">private</span> List&lt;SpuItemAttrGroupVo&gt; groupAttrs;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SkuItemSaleAttrVo</span> &#123;<br>        <span class="hljs-keyword">private</span> Long attrId;<br>        <span class="hljs-keyword">private</span> String attrName;<br>        <span class="hljs-keyword">private</span> List&lt;String&gt; attrValues;<br>    &#125;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpuItemAttrGroupVo</span> &#123;<br>        <span class="hljs-keyword">private</span> String groupName;<br>        <span class="hljs-keyword">private</span> List&lt;SpuBaseAttrVo&gt; attrs;<br>    &#125;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpuBaseAttrVo</span> &#123;<br>        <span class="hljs-keyword">private</span> String attrName;<br>        <span class="hljs-keyword">private</span> String attrValue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="具体实现">具体实现</h5>
<p>根据模型分析出, 需要获取哪些信息, 然后调用相应的服务, 获取, 因为需要调用多个服务, 所以可以采用异步编排的方式, 且可以把商品详情信息存储到缓存</p>
<h3 id="认证服务">认证服务</h3>
<p>创建一个新的module mall-auth-server, 专门负责登录和注册</p>
<h4 id="发送短信验证码">发送短信验证码</h4>
<p>给手机发送短信的功能在mall-third-party模块实现, mall-auth-server模块执行注册功能时, 发起远程调用, 调用发送短信的接口</p>
<p>首先在阿里云购买短信服务, 编写短信接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xinyu.mall.thirdparty.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/sms&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SmsComponent smsComponent;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提供给别的任务进行调用的</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> phone 手机号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/sendcode&quot;)</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">sendCode</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;phone&quot;)</span> String phone, <span class="hljs-meta">@RequestParam(&quot;code&quot;)</span> String code)</span> &#123;<br>        smsComponent.sendSmsCode(phone, code);<br><br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>具体实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.cloud.alicloud.sms&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsComponent</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String host;<br>    <span class="hljs-keyword">private</span> String path;<br>    <span class="hljs-keyword">private</span> String templateId;<br>    <span class="hljs-keyword">private</span> String appcode;    <br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendSmsCode</span><span class="hljs-params">(String phone, String code)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;POST&quot;</span>;<br>        Map&lt;String, String&gt; headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        headers.put(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;APPCODE &quot;</span> + appcode);<br>        <span class="hljs-comment">//根据API的要求，定义相对应的Content-Type</span><br>        headers.put(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>);<br>        Map&lt;String, String&gt; querys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;String, String&gt; bodys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        bodys.put(<span class="hljs-string">&quot;content&quot;</span>, <span class="hljs-string">&quot;code:&quot;</span> + code + <span class="hljs-string">&quot;,expire_at:5&quot;</span>);<br>        bodys.put(<span class="hljs-string">&quot;phone_number&quot;</span>, phone);<br>        bodys.put(<span class="hljs-string">&quot;template_id&quot;</span>, templateId);<br><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">HttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> HttpUtils.doPost(host, path, method, headers, querys, bodys);<br>            <span class="hljs-comment">// System.out.println(response.toString());</span><br>            <span class="hljs-comment">//获取response的body</span><br>            <span class="hljs-comment">//System.out.println(EntityUtils.toString(response.getEntity()));</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>      <span class="hljs-attr">sms:</span><br>        <span class="hljs-attr">host:</span> <br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/data/send_sms</span><br>        <span class="hljs-attr">templateId:</span> <span class="hljs-string">TPL_0001</span><br>        <span class="hljs-attr">appcode:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">mall-third-party</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">30000</span><br></code></pre></td></tr></table></figure>
<p>这部分内容一般购买短信服务时会有对应的参考代码, 按照要求实现就可以了</p>
<p>另外为了防止用户频繁调用发送短信接口, 在mall-auth-server的controller中, 用redis做防刷, 每次调用发送短信接口时, 把手机号作为key, code加当前时间作为value, 先判断是否存在key, 且value超过了1分钟, 再调用第三方服务的短信接口, 否则返回错误信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@GetMapping(&quot;/sms/sendcode&quot;)</span><br><span class="hljs-keyword">public</span> R <span class="hljs-title function_">sendCode</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;phone&quot;)</span> String phone)</span> &#123;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> AuthServerConstant.SMS_CODE_CACHE_PREFIX + phone;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">redisCode</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(key);<br>    <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(redisCode)) &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> Long.parseLong(redisCode.split(<span class="hljs-string">&quot;_&quot;</span>)[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span> (System.currentTimeMillis() - l &lt; <span class="hljs-number">60000</span>) &#123;<br>            <span class="hljs-keyword">return</span> R.error(BizCodeEnum.SMS_CODE_EXCEPTION.getCode(), BizCodeEnum.SMS_CODE_EXCEPTION.getMessage());<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 1. 接口防刷</span><br><br>    <span class="hljs-comment">// 2. 校验 key sms:code:phone, value code</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> code + <span class="hljs-string">&quot;_&quot;</span> + System.currentTimeMillis();<br>    redisTemplate.opsForValue().set(key, value, <span class="hljs-number">5</span>, TimeUnit.MINUTES);<br>    thirdPartiesFeignService.sendCode(phone, code);<br>    <span class="hljs-keyword">return</span> R.ok();<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="注册接口">注册接口</h4>
<p>用@Valid对参数进行校验, 并验证短信验证码是否正确, 都正确后调用member模块的注册接口; 如果验证失败需要把错误信息返回到注册页面, 这里使用的是重定向的注册页的方式, <strong>使用RedirectAttributes携带错误信息</strong></p>
<p>注册接口就是往数据库插入一条记录而已, 不过密码是不能以明文的方式存储进数据库的, 这里使用spring自带的加盐md5工具进行哈希</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">BCryptPasswordEncoder</span> <span class="hljs-variable">passwordEncoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> passwordEncoder.encode(registerVo.getPassword());<br></code></pre></td></tr></table></figure>
<p>另外注册时需要检查手机号, 用户名是否被注册过了, 可以用唯一索引, 或者做一次查询</p>
<h4 id="登录接口">登录接口</h4>
<p>调用member的登录接口进行验证, 因为支持用用户名或手机号作为登录凭证, 所以根据其中一个到数据库查询密码, 并用BCryptPasswordEncoder验证是否一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> MemberEntity <span class="hljs-title function_">login</span><span class="hljs-params">(MemberLoginVo loginVo)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> loginVo.getAccount();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> loginVo.getPassword();<br><br>    <span class="hljs-comment">// 去数据库查询加密后的密码</span><br>    <span class="hljs-type">MemberEntity</span> <span class="hljs-variable">memberEntity</span> <span class="hljs-operator">=</span> baseMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;MemberEntity&gt;().eq(<span class="hljs-string">&quot;username&quot;</span>, account).or().eq(<span class="hljs-string">&quot;mobile&quot;</span>, account));<br>    <span class="hljs-keyword">if</span> (memberEntity == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">dbPass</span> <span class="hljs-operator">=</span> memberEntity.getPassword();<br>    <span class="hljs-type">BCryptPasswordEncoder</span> <span class="hljs-variable">passwordEncoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    <span class="hljs-keyword">if</span> (passwordEncoder.matches(password, dbPass)) &#123;<br>        <span class="hljs-keyword">return</span> memberEntity;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="第三方登录">第三方登录</h4>
<p>这里以gitee登录作为示例, <a href="https://gitee.com/api/v5/oauth_doc#/list-item-1">Gitee OAuth 文档</a></p>
<p>OAuth2 认证基本流程</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/openapi-oauth2-flow.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>首先需要创建一个应用, 设置应用的图片, 主页, 以及用户授权后的回调地址</p>
<p>创建后能得到clientId和clientSecrect</p>
<p>用户授权登录后, 跳转到</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/oauth/</span>authorize?client_id=&#123;client_id&#125;&amp;redirect_uri=&#123;redirect_uri&#125;&amp;response_type=code<br></code></pre></td></tr></table></figure>
<p>用户点击授权后, 跳转到redirectUri?code={code}</p>
<p>服务端收到请求后, 向gitee发起POST请求, 获取AccessToken</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><code class="hljs elm"><span class="hljs-title">https</span>://gitee.com/oauth/token?grant_<span class="hljs-keyword">type</span>=authorization_code&amp;code=&#123;code&#125;&amp;client_id=&#123;client_id&#125;&amp;redirect_uri=&#123;redirect_uri&#125;&amp;client_secret=&#123;client_secret&#125;<br></code></pre></td></tr></table></figure>
<p>注意将<strong>client_secret</strong>放在body中</p>
<p>gitee收到请求后, 返回</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;access_token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;token_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bearer&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;expires_in&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">86400</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;refresh_token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;00b5d01bc2a82deb809c54d392aa04aaa30cefc60cbf0e15fdd09b8846206edd&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;scope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user_info&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;created_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1654842349</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p>这样一个json, 可以从中获取access_token, 再一次调用gitee接口从中获取用户id和名字, 用户区别用户是否注册过了</p>
<p>接着调用member模块的登录功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> MemberEntity <span class="hljs-title function_">oauth2Login</span><span class="hljs-params">(SocialUser socialUser)</span> &#123;<br>    <span class="hljs-comment">// 登录和注册功能合并</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> socialUser.getId();<br>    <span class="hljs-comment">// 判断当前社交用户登录过了吗</span><br>    <span class="hljs-type">MemberEntity</span> <span class="hljs-variable">memberEntity</span> <span class="hljs-operator">=</span> baseMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;MemberEntity&gt;().eq(<span class="hljs-string">&quot;social_uid&quot;</span>, uid));<br>    <span class="hljs-comment">// 登录过了呢</span><br>    <span class="hljs-keyword">if</span> (memberEntity != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 更新令牌和过期时间</span><br>        <span class="hljs-type">MemberEntity</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemberEntity</span>();<br>        update.setId(memberEntity.getId());<br>        update.setAccessToken(socialUser.getAccess_token());<br>        update.setExpiresIn(socialUser.getExpires_in() + socialUser.getCreated_at());<br>        baseMapper.updateById(update);<br><br>        memberEntity.setAccessToken(socialUser.getAccess_token());<br>        memberEntity.setExpiresIn(socialUser.getExpires_in() + socialUser.getCreated_at());<br>        <span class="hljs-keyword">return</span> memberEntity;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 进行注册</span><br>        <span class="hljs-type">MemberEntity</span> <span class="hljs-variable">register</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemberEntity</span>();<br>        register.setUsername(socialUser.getName());<br>        register.setAccessToken(socialUser.getAccess_token());<br>        register.setExpiresIn(socialUser.getExpires_in() + socialUser.getCreated_at());<br>        register.setSocialUid(socialUser.getId());<br>        baseMapper.insert(register);<br>        <span class="hljs-keyword">return</span> register;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>不过好像存储access_token没什么用, member模块完成登录后, 会把用户信息返回给认证服务, 认证服务将用户信息存储到session中, 用于区别用户是否登录。</p>
<h3 id="分布式session">分布式session</h3>
<h4 id="session原理">Session原理</h4>
<p>浏览器第一次访问服务器时, 服务器会返回一个cookie Name为JESSIONID给浏览器, 以后浏览器访问服务器时就会带上这个cookie。在服务器会维护一个map sessionManager, key为JESSIONID的值, value为map</p>
<h4 id="分布式下session共享问题">分布式下Session共享问题</h4>
<ol type="1">
<li>同一个服务一般会部署多台服务器, 各个服务器的sessionManager是不共享的, 所以用户如果第一次访问时到A服务器, 第二次由于负载均衡访问B服务器, A服务器在session存储的用户信息, 在B时访问不到的, 所以B服务器会认为用户未登录</li>
<li>分布式涉及多个微服务, 不同服务间的session也不能共享</li>
</ol>
<h4 id="session共享问题的解决">Session共享问题的解决</h4>
<h5 id="session复制">Session复制</h5>
<p>服务间同步各自的Session, 也就是一台服务器中有所有服务器的Session信息</p>
<p>优点:</p>
<p>web-server(Tomcat)原生支持, 只需要修改配置文件</p>
<p>缺点:</p>
<ul>
<li><p>session同步需要服务器间传输数据, 占用大量网络带宽, 降低服务器的业务处理能力</p></li>
<li><p>任意一台web-server保存的数据都是所有的web-server的session总和, 收到内存限制无法水平拓展更多的web-server</p></li>
</ul>
<h5 id="客户端存储">客户端存储</h5>
<p>用户信息存储到cookie中, 发起请求携带cookie发给服务器就可以了</p>
<p>优点:</p>
<p>服务器不需要存储session, 用户保存自己的信息到session中, 节省服务器资源</p>
<p>缺点:</p>
<ul>
<li>每次请求, 都需要携带用户在cookie的完整信息, 浪费网络带宽</li>
<li>cookie有长度限制, 不能超过4kb</li>
<li>cookie有完全问题, 存在泄漏, 篡改, 窃取等完全隐患</li>
</ul>
<h5 id="hash一致性">hash一致性</h5>
<p>这个方案能解决同一服务下的session问题</p>
<p>将nginx的负载均衡策略改为ip_hash, 使得同一个ip总是访问同一台服务器; 不过在本项目的架构下不能采用这种方案, 因为采用的是nginx + gateway的方式, 由gateway的loadblancer决定访问哪台服务器, 可以采用自定义loadblancer的方式实现ip_hash</p>
<p>优点:</p>
<p>可以支持web-server水平拓展</p>
<p>缺点:</p>
<p>如果web-server水平拓展, rehash后session重新分布, 会导致一部分的用户路由不到正确的session</p>
<p>不过, 这种方案是比较可行的, 因为一部分用户路由不到正确的session并不是很严重的问题, 只需要让用户重新登录就可以了</p>
<h5 id="统一存储">统一存储</h5>
<p>将session信息统一存储到redis/db中</p>
<p>优点:</p>
<ul>
<li>没有安全隐患</li>
<li>可以水平拓展, 数据库/缓存水平切分即可</li>
<li>web-server重启或者扩容都不会有session丢失</li>
</ul>
<p>缺点:</p>
<ul>
<li>增加一次网络调用, 并且需要修改应用代码; 如将所有的getSession代码替换为从Redis get数据, redis get数据比内容慢</li>
</ul>
<h4 id="springsession">SpringSession</h4>
<h5 id="springboot整合springsession">springboot整合springSession</h5>
<p>使用SpringSession可以在不修改代码的基础上, 实现分布式session</p>
<p>这里以spring-session-data-redis示例</p>
<p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.session<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-session-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>配置文件 application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.redis.host</span>=<span class="hljs-string">192.168.134.146</span><br><span class="hljs-attr">spring.redis.port</span>=<span class="hljs-string">6380</span><br><br><span class="hljs-attr">spring.session.store-type</span>=<span class="hljs-string">redis</span><br><span class="hljs-attr">server.servlet.session.timeout</span>=<span class="hljs-string">60m</span><br></code></pre></td></tr></table></figure>
<p>配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableRedisHttpSession</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MallSessionConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CookieSerializer <span class="hljs-title function_">cookieSerializer</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-type">DefaultCookieSerializer</span> <span class="hljs-variable">cookieSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultCookieSerializer</span>();<br>        cookieSerializer.setDomainName(<span class="hljs-string">&quot;mall.com&quot;</span>);<br>        cookieSerializer.setCookieName(<span class="hljs-string">&quot;MALLSESSION&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> cookieSerializer;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisSerializer&lt;Object&gt; <span class="hljs-title function_">springSessionDefaultRedisSerializer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>指定cookie的domain和name, 并且以json的方式存储到redis</p>
<p>整合springSession中, 执行session.setAttribute就能自动存储到redis中, 执行session.getAttribute时也能自动到redis中取到值</p>
<p>redis中为session存储一个hash结构, key为cookie的value, 以attributeName作为key, attributeValue作为value</p>
<h5 id="springsession核心原理">SpringSession核心原理</h5>
<p><span class="citation" data-cites="EnableRedisHttpSession导入RedisHttpSessionConfiguration">@EnableRedisHttpSession导入RedisHttpSessionConfiguration</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;RedisHttpSessionConfiguration.class&#125;)</span><br><span class="hljs-meta">@Configuration(</span><br><span class="hljs-meta">    proxyBeanMethods = false</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableRedisHttpSession &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>RedisHttpSessionConfiguration继承SpringHttpSessionConfiguration, SpringHttpSessionConfiguration注入了SessionRepositoryFilter, SessionRepositoryFilter的doFilterInternal对request和response进行包装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    request.setAttribute(SESSION_REPOSITORY_ATTR, <span class="hljs-built_in">this</span>.sessionRepository);<br>    SessionRepositoryFilter&lt;S&gt;.<span class="hljs-type">SessionRepositoryRequestWrapper</span> <span class="hljs-variable">wrappedRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionRepositoryRequestWrapper</span>(request, response);<br>    SessionRepositoryFilter&lt;S&gt;.<span class="hljs-type">SessionRepositoryResponseWrapper</span> <span class="hljs-variable">wrappedResponse</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionRepositoryResponseWrapper</span>(wrappedRequest, response);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        filterChain.doFilter(wrappedRequest, wrappedResponse);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        wrappedRequest.commitSession();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<p>以后获取request.getSession(); 都会调用wrappedRequesr.getSession(); 从SessionRepository获取</p>
<h3 id="sso单点登录">sso单点登录</h3>
<p><img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220611000613.png" /></p>
<p><strong>关键点是重定向到sso server时, 会带上sso server的cookie发给sso的服务器</strong></p>
<h3 id="购物车">购物车</h3>
<h4 id="需求">需求</h4>
<p>用户未登录时, 维护一个临时购物车, 执行加入购物车操作时, 加商品加入这个临时购物车; 用户登录后, 加临时购物车的数据合并进用户的购物车, 并删除临时购物车</p>
<p><strong>如何实现临时购物车呢？</strong></p>
<p>首先实现一个拦截器</p>
<p>在preHandle方法判断用户是否登录过了, 即从session从取user, 如果user不为null, 则存储下userId</p>
<p>遍历cookie, 判断cookie中是否有临时user的key, 如果没有则用UUID生成一个</p>
<p>在执行postHandle方法时, 设置一下这个临时user key</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;UserInfoTo&gt; threadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">UserInfoTo</span> <span class="hljs-variable">userInfoTo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserInfoTo</span>();<br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>        <span class="hljs-type">MemberRespVo</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> (MemberRespVo) session.getAttribute(AuthServerConstant.LOGIN_USER);<br>        <span class="hljs-keyword">if</span> (loginUser != <span class="hljs-literal">null</span>) &#123;<br>            userInfoTo.setUserId(loginUser.getId());<br>        &#125;<br>        Cookie[] cookies = request.getCookies();<br>        <span class="hljs-keyword">if</span> (cookies != <span class="hljs-literal">null</span> &amp;&amp; cookies.length != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> cookie.getName();<br>                <span class="hljs-keyword">if</span> (name.equals(CartConstant.TEMP_USER_COOKIE_NAME)) &#123;<br>                    userInfoTo.setTempUser(<span class="hljs-literal">true</span>);<br>                    userInfoTo.setUserKey(cookie.getValue());<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(userInfoTo.getUserKey())) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>            userInfoTo.setUserKey(uuid);<br>        &#125;<br>        threadLocal.set(userInfoTo);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">UserInfoTo</span> <span class="hljs-variable">userInfoTo</span> <span class="hljs-operator">=</span> threadLocal.get();<br>        <span class="hljs-keyword">if</span> (!userInfoTo.getTempUser()) &#123;<br>            <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(CartConstant.TEMP_USER_COOKIE_NAME, threadLocal.get().getUserKey());<br>            cookie.setDomain(<span class="hljs-string">&quot;mall.com&quot;</span>);<br>            cookie.setMaxAge(CartConstant.TEMP_USER_COOKIE_TIMEOUT);<br>            response.addCookie(cookie);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>将用户信息存储到threadLocal中为了之后能够区分出用户是否登录了, 且没登录时能取出临时user key</p>
<h4 id="添加商品到购物车">添加商品到购物车</h4>
<p>将购物车信息存储到redis中, 以userId(登录时)或者临时user key作为key, value是hash结构, hash结构的key是skuId, value是单个购物项</p>
<p>首先从threadLocal取出用户信息, 然后根据userId是否为空确定redis的key, 从redis中取出对应的hash结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">BoundHashOperations&lt;String, Object, Object&gt; ops = getCartOps();<br><span class="hljs-type">String</span> <span class="hljs-variable">cartItem</span> <span class="hljs-operator">=</span> (String) ops.get(skuId.toString());<br></code></pre></td></tr></table></figure>
<p>如果cartItem为空, 说明没有这个购物项, 根据skuId查询cartItem所需的信息, 存储到redis中; 如果有这个购物项则只需改一下数量就可以了</p>
<h3 id="消息队列">消息队列</h3>
<h4 id="消息队列作用">消息队列作用</h4>
<h5 id="异步处理">1. 异步处理</h5>
<p>假如注册功能的流程是: 将注册信息写入数据库<span class="math inline">\(\rightarrow\)</span>发送注册邮件<span class="math inline">\(\rightarrow\)</span>发送注册短信</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220612001433.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>整个流程耗时为150ms</p>
<p>如果使用消息队列, 将发送邮件和发送注册短信作为消息存进消息队列中, 只要确保消息存放进broker中, 就可以立即返回, 由消费者服务器异步地从broker消费消息</p>
<p><img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220612001658.png" /></p>
<h5 id="应用解耦">2.应用解耦</h5>
<p>假设有两个系统: 订单系统, 库存系统, 订单系统直接调用库存系统的接口, 查询库存。如果库存系统把接口更改了, 则订单系统也有更改调用的接口，这两个系统的耦合度高。</p>
<p>如果引入消息队列, 当订单系统要查询库存时, 将该请求封装成一个消息, 存放进消息队列中, 而库存系统订阅相应的队列, 取到消息查询后, 返回给订单系统。这样不论, 库存系统怎么更改接口, 都和订单系统没关系, 订单系统唯一要做的只有把请求封装成消息写入broker</p>
<p><img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220612002506.png" alt="shadow" style="zoom:67%;" /></p>
<h5 id="流量控制">3.流量控制</h5>
<p>假如系统的并发量很大, 有很多用户发起请求, 系统可以把请求封装成消息写入broker, 并立即返回给用户, <strong>排队中</strong>, 再由消费者从broker取到消息, 处理后再返回给用户</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220612002850.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<h4 id="概述">概述</h4>
<h5 id="消息队列整体概述">消息队列整体概述</h5>
<p>消息服务中两个重要的概念</p>
<p>消息代理 message broker和目的地 destination</p>
<p>消息队列主要有两种形式的目的地</p>
<p><strong>点对点式</strong>: 可以有很多个消费者监听同一个队列, 但是一个消息只能由一个消费者接收到</p>
<p><strong>发布订阅式</strong>: 发布者发送消息到某个主题后, 订阅这个主体的订阅者都可以接收到这个消息</p>
<h5 id="rabbitmq概述">RabbitMQ概述</h5>
<p>RabbitMQ是一个用erlang语言开发的基于AMQP(Advanced Message Queue Protocol)协议的消息队列</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220612102122.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p><strong>核心概念</strong></p>
<p><strong>Message</strong></p>
<p>消息, 消息是不具名的, 它由消息头和消息体组成。消息体是不透明的, 即需要由我们自己指定内容, 而消息头则由一系列可选属性组成, 这些属性包括routing-key(路由键), priority(相对于其它消息的优先权), delivery-mode(指出该消息是否需要永久性存储)...</p>
<p><strong>Publisher</strong></p>
<p>消息的生产者, 也是一个向交换机发布消息的客户端应用程序</p>
<p><strong>Exchange</strong></p>
<p>交换机, 用来接收生产者发送的消息并将这些消息路由给相应的队列</p>
<p>RabbitMQ有<span class="math inline">\(4\)</span>种类型的Exchange: direct(默认), fanout, topic和headers, 不同类型的Exchange转发消息的策略有所区别</p>
<p><strong>Queue</strong></p>
<p>消息队列, 用来保存消息直到发送给消费者。它是消息的容器, 也是消息的终点。一个消息可以投入一个或多个队列。消息一直在队列里面, 等待消费者连接到这个队列将其取走</p>
<p><strong>Binding</strong></p>
<p>绑定, 用于消息队列和交换机之前的关联。一个绑定就是基于路由键将交换机和消息队列连接起来的路由规则, 所以可以将交换机理解成一个由绑定构成的路由表</p>
<p>Exchange和Queue的binding可以是多对多的关系</p>
<p><strong>Connection</strong></p>
<p>网络连接, 比如一个TCP连接</p>
<p><strong>Channel</strong></p>
<p>信道, 多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接, AMQP命令都是通过信道发出去的, 不管是发布消息, 订阅队列还是接收消息, 这些动作都是通过信道完成的。因为对于操作系统来说, 建立和销毁TCP都会带来昂贵的开销, 所以引入了信道的概念, 用于复用TCP连接</p>
<p><strong>Consumer</strong></p>
<p>消息的消费者, 表示一个从消息队列中取得消息的客户端应用程序</p>
<p><strong>Virtual host</strong></p>
<p>虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加 密环境的独立服务器域。每个 vhost 本质上就是一个 mini 版的 RabbitMQ 服务器，拥 有自己的队列、交换器、绑定和权限机制。vhost 是 AMQP 概念的基础，必须在连接时 指定，RabbitMQ 默认的 vhost 是</p>
<p><strong>Broker</strong></p>
<p>表示消息队列服务器实体</p>
<h5 id="docker安装rabbitmq">docker安装RabbitMQ</h5>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">docker run -d --name rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:4369 -p  25672:25672 -p 15671:15671 -p 15672:15672 rabbitmq:management<br></code></pre></td></tr></table></figure>
<p>4369, 25672 (Erlang发现&amp;集群端口)</p>
<p>5672, 5671 (AMQP端口)</p>
<p>15672 (web管理后台端口)</p>
<p>61613, 61614 (STOMP协议端口)</p>
<p>1883, 8883 (MQTT协议端口)</p>
<p><a href="https://www.rabbitmq.com/networking.html">各个端口的介绍</a></p>
<h5 id="rabbitmq运行机制">RabbitMQ运行机制</h5>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220612102519.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>生产者发送消息时, 需要指定消息的routing-key, 以及发送到哪个交换机。到达broker后, 由相应的交换机根据其类型和binding, 以及routing-key, 决定将消息发送给哪些队列</p>
<h5 id="交换机的类型">交换机的类型</h5>
<p>RabbitMQ有<span class="math inline">\(4\)</span>中类型的交换机: direct, fanout, topic, headers。headers根据AMQP消息的header是否匹配决定是否将消息发送给队列, headers交换机和direct交换机完全一致, 但性能差很多, 目前基本不用了, 所以这里就不讨论了。</p>
<p><strong>Direct Exchange</strong></p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220612103203.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>消息中的routing-key如果和Binding中的binding key<strong>完全一致</strong>, 交换机就将消息发送到对应的队列中。</p>
<p>这种模式的交换机是点对点模式, 单播模式</p>
<p><strong>Fanout Exchange</strong></p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220612103627.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>每个发到fanout类型交换机的消息都会分到所有绑定的队列上去。fanout交换机不处理routing-key, 只是简单的将队列绑定到交换机上。</p>
<p><strong>Topic Exchange</strong></p>
<p><img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220612104131.png" /></p>
<p>topic交换机通过模式匹配分配消息的路由键属性, 将routing-key和某个模式进行匹配, 此时队列需要绑定到一个模式 pattern上。它将路由键和绑定将的字符串切分成单词, 单词间用"."隔开。同时pattern支持两个通配符: "*"表示匹配一个单词, "#"表示匹配0个或多个单词</p>
<h4 id="springboot整合rabbitmq">Springboot整合RabbitMQ</h4>
<ol type="1">
<li><p>引入 spring-boot-starter-amqp</p></li>
<li><p>application.yml配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.rabbitmq.host</span>=<span class="hljs-string">192.168.134.146</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">5672</span><br><span class="hljs-attr">spring.rabbitmq.virtual-host</span>=<span class="hljs-string">/</span><br></code></pre></td></tr></table></figure>
<p>如果要使用@RabbitListener注解, 需要在主类或者配置类添加@EnableRabbit</p></li>
<li><p>测试RabbitMQ</p>
<ul>
<li><p>AmqpAdmin：管理组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>AmqpAdmin amqpAdmin;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1、如何创建Exchange[hello.java.exchange], Queue, Binding</span><br><span class="hljs-comment"> *    1）使用AmqpAdmin</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">createExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">DirectExchange</span> <span class="hljs-variable">directExchange</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(<span class="hljs-string">&quot;hello-java-exchange&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>    amqpAdmin.declareExchange(directExchange);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">createQueue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Queue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;hello-java-queue&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>    amqpAdmin.declareQueue(queue);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">createBinding</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Binding</span> <span class="hljs-variable">binding</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Binding</span>(<span class="hljs-string">&quot;hello-java-queue&quot;</span>,<br>                                  Binding.DestinationType.QUEUE,<br>                                  <span class="hljs-string">&quot;hello-java-exchange&quot;</span>,<br>                                  <span class="hljs-string">&quot;hello.java&quot;</span>, <span class="hljs-literal">null</span>);<br>    amqpAdmin.declareBinding(binding);<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>RabbitTemplate：消息发送处理组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>RabbitTemplate rabbitTemplate;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">OrderReturnReasonEntity</span> <span class="hljs-variable">reasonEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderReturnReasonEntity</span>();<br>    reasonEntity.setId(<span class="hljs-number">1L</span>);<br>    reasonEntity.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    reasonEntity.setName(<span class="hljs-string">&quot;haha&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>    rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;hello-java-exchange&quot;</span>, <span class="hljs-string">&quot;hello.java&quot;</span>, msg);<br>    <span class="hljs-comment">// 如果发送的消息是对象，需要使用序列化机制</span><br>    rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;hello-java-exchange&quot;</span>, <span class="hljs-string">&quot;hello.java&quot;</span>, reasonEntity);<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p><span class="citation" data-cites="RabbitListener">@RabbitListener</span> 监听消息的方法可以有三种参数(不分数量，顺序): Object content, Message message, Channel channel</p>
<p><span class="citation" data-cites="RabbitListener">@RabbitListener</span> 类+方法上, <span class="citation" data-cites="RabbitHandler">@RabbitHandler</span> 方法上重载区分不同的消息</p>
<p><strong>放在方法上</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> message 原生消息详细信息: header + body</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> content 类型T, 发送的消息的类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> channel 当前传输数据的通道</span><br><span class="hljs-comment"> * direct类型的交换机的queue可以有很多个listener, 但是只能有1个listener收到消息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RabbitListener(queues = &#123;&quot;hello-java-queue&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveMessage</span><span class="hljs-params">(Message message,</span><br><span class="hljs-params">                           OrderReturnReasonEntity content,</span><br><span class="hljs-params">                           Channel channel)</span> &#123;<br>    <span class="hljs-type">byte</span>[] body = message.getBody();<br>    <span class="hljs-type">MessageProperties</span> <span class="hljs-variable">messageProperties</span> <span class="hljs-operator">=</span> message.getMessageProperties();<br>    log.info(<span class="hljs-string">&quot;接收到消息:&#123;&#125;, content:&#123;&#125;&quot;</span>, message,content);<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>放在类上</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &#123;&quot;hello-java-queue&quot;&#125;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitListenerComponent</span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 原生消息详细信息: header + body</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 类型T, 发送的消息的类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> channel 当前传输数据的通道</span><br><span class="hljs-comment">     * direct类型的交换机的queue可以有很多个listener, 但是只能有1个listener收到消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RabbitHandler</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveMessage</span><span class="hljs-params">(Message message,</span><br><span class="hljs-params">                               OrderReturnReasonEntity content,</span><br><span class="hljs-params">                               Channel channel)</span> &#123;<br>        <span class="hljs-type">byte</span>[] body = message.getBody();<br>        <span class="hljs-type">MessageProperties</span> <span class="hljs-variable">messageProperties</span> <span class="hljs-operator">=</span> message.getMessageProperties();<br>        log.info(<span class="hljs-string">&quot;接收到消息:&#123;&#125;, content:&#123;&#125;&quot;</span>, message,content);<br>    &#125;<br>    <br>    <span class="hljs-meta">@RabbitHandler</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveMessage</span><span class="hljs-params">(Message message,</span><br><span class="hljs-params">                               OrderEntity content,</span><br><span class="hljs-params">                               Channel channel)</span> &#123;<br>        <span class="hljs-type">byte</span>[] body = message.getBody();<br>        <span class="hljs-type">MessageProperties</span> <span class="hljs-variable">messageProperties</span> <span class="hljs-operator">=</span> message.getMessageProperties();<br>        log.info(<span class="hljs-string">&quot;接收到消息:&#123;&#125;, content:&#123;&#125;&quot;</span>, message,content);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>放在类上时, 根据content类型的不同交由不同的方法处理</p></li>
</ul></li>
</ol>
<h4 id="消息可靠传递">消息可靠传递</h4>
<p>保证消息不丢失, 可靠抵达, 可以使用事务消息, 但是使用事务消息会使得性能下降<span class="math inline">\(150\)</span>倍, 为此引入确认机制</p>
<p><img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220612150304.png" /></p>
<ul>
<li><strong>publisher</strong> confirmCallback 确认模式, 消息到达broker后, 回调publisher的confirm方法</li>
<li><strong>publisher</strong> returnCallback 未投递到queue</li>
<li><strong>consumer</strong> ack机制</li>
</ul>
<h5 id="可靠抵达-confirmcallback">可靠抵达-ConfirmCallback</h5>
<p>消息到达broker后的确认回调</p>
<p>开启确认回调</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.rabbitmq.publisher-confirms</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure>
<p>springboot2.2.0以后这种配置已经被弃用了, 新的设置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.rabbitmq.publisher-confirm-type</span>=<span class="hljs-string">correlated</span><br></code></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://stackoverflow.com/questions/61673689/cachingconnectionfactory-confirm-type-simple-vs-correlated">stack overflow</a></p>
<p><code>correlated</code> means you pass in some correlation data with the send and you receive a callback when the confirm is received; the callback gets the correlation data - so you know which send the confirmation is for. You can wait on a <code>Future&lt;?&gt;</code> in the correlation data, which can also contain a returned message if it was returned.</p>
<p>With <code>simple</code>, it just means you can block waiting for the confirms for all the messages you sent have been received (<code>waitForConfirmsOrDie</code>). With simple confirms there is no correlation provided</p>
</blockquote>
<p>设置回调方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRabbitConfig</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    RabbitTemplate rabbitTemplate;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定制RabbitTemplate</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostConstruct</span>  <span class="hljs-comment">// MyRabbitConfig对象创建完成以后，执行这个方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initRabbitTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 设置到达broker的确认回调</span><br>        rabbitTemplate.setConfirmCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RabbitTemplate</span>.ConfirmCallback() &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 1. 只要消息到达broker 就调用</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> correlationData 当前消息的唯一关联数据 （作为消息的唯一id）</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> ack 消息是否成功到达broker</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> cause 失败的原因</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(CorrelationData correlationData, <span class="hljs-type">boolean</span> ack, String cause)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;confirm.......correlationData[&quot;</span> + correlationData + <span class="hljs-string">&quot;]&quot;</span> +<br>                        <span class="hljs-string">&quot;==&gt;ack[&quot;</span> + ack + <span class="hljs-string">&quot;]==&gt;cause[&quot;</span> + cause +<span class="hljs-string">&quot;]&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>这里使用PostConstruct非常巧妙呀</strong></p>
<h5 id="可靠抵达-returncallback">可靠抵达-ReturnCallback</h5>
<p>消息没有成功到达queue后回调</p>
<p>开启配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 开启发送端消息抵达队列确认</span><br><span class="hljs-attr">spring.rabbitmq.publisher-returns</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 只要抵达队列, 以异步方式优先回调这个return-confirm</span><br><span class="hljs-attr">spring.rabbitmq.template.mandatory</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure>
<p>设置回调方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRabbitConfig</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定制RabbitTemplate</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostConstruct</span>  <span class="hljs-comment">// MyRabbitConfig对象创建完成以后，执行这个方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initRabbitTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 设置到达broker的确认回调</span><br>        rabbitTemplate.setConfirmCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RabbitTemplate</span>.ConfirmCallback() &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 1. 只要消息到达broker 就调用</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> correlationData 当前消息的唯一关联数据 （作为消息的唯一id）</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> ack 消息是否成功到达broker</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> cause 失败的原因</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(CorrelationData correlationData, <span class="hljs-type">boolean</span> ack, String cause)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;confirm.......correlationData[&quot;</span> + correlationData + <span class="hljs-string">&quot;]&quot;</span> +<br>                        <span class="hljs-string">&quot;==&gt;ack[&quot;</span> + ack + <span class="hljs-string">&quot;]==&gt;cause[&quot;</span> + cause +<span class="hljs-string">&quot;]&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        rabbitTemplate.setReturnsCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RabbitTemplate</span>.ReturnsCallback() &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 只要消息没有投递到指定的队列, 触发这个失败回调</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> returnedMessage 对众多参数的封装</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnedMessage</span><span class="hljs-params">(<span class="hljs-meta">@Nonnull</span> ReturnedMessage returnedMessage)</span> &#123;<br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> returnedMessage.getMessage(); <span class="hljs-comment">// 投递失败的消息详细信息</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">replyCode</span> <span class="hljs-operator">=</span> returnedMessage.getReplyCode(); <span class="hljs-comment">// 回复的状态码</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">replyText</span> <span class="hljs-operator">=</span> returnedMessage.getReplyText();  <span class="hljs-comment">// 回复的文本内容</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">exchange</span> <span class="hljs-operator">=</span> returnedMessage.getExchange();    <span class="hljs-comment">// 当时这个消息发送给哪个交换机</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">routingKey</span> <span class="hljs-operator">=</span> returnedMessage.getRoutingKey();    <span class="hljs-comment">// 当时这个消息用哪个路由键</span><br>                System.out.println(returnedMessage);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="可靠抵达-ack确认机制">可靠抵达-ACK确认机制</h5>
<p>默认情况下, 只要消息到达消费者, 就会自动ack, 消息会从队列中删除</p>
<p>为了保证, 消息能够被消费者正确处理, 我们开启手动ack</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 手动ack</span><br><span class="hljs-attr">spring.rabbitmq.listener.simple.acknowledge-mode</span>=<span class="hljs-string">manual</span><br></code></pre></td></tr></table></figure>
<p>消费端根据处理情况, 选择ack或者nack</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitHandler</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveMessage</span><span class="hljs-params">(Message message,</span><br><span class="hljs-params">                           OrderReturnReasonEntity content,</span><br><span class="hljs-params">                           Channel channel)</span> &#123;<br>    <span class="hljs-type">byte</span>[] body = message.getBody();<br>    <span class="hljs-type">MessageProperties</span> <span class="hljs-variable">messageProperties</span> <span class="hljs-operator">=</span> message.getMessageProperties();<br>    log.info(<span class="hljs-string">&quot;接收到消息:&#123;&#125;, content:&#123;&#125;&quot;</span>, message,content);<br>    <span class="hljs-comment">// channel内自增的</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">deliveryTag</span> <span class="hljs-operator">=</span> messageProperties.getDeliveryTag();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// ack</span><br>        <span class="hljs-comment">// 非批量模式</span><br>        <span class="hljs-keyword">if</span> (deliveryTag % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            channel.basicAck(deliveryTag, <span class="hljs-literal">false</span>);<br>            System.out.println(<span class="hljs-string">&quot;ack......&quot;</span> + deliveryTag);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// long deliveryTag, boolean multiple, boolean requeue</span><br>            channel.basicNack(deliveryTag, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>            <span class="hljs-comment">// long deliveryTag, boolean requeue</span><br>            <span class="hljs-comment">// channel.basicReject();</span><br>            System.out.println(<span class="hljs-string">&quot;nack......&quot;</span> + deliveryTag);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>deliveryTag是同一通道内自增的long值, 用于标识当前投递到消费端的消息</p>
<p>这里模拟deliveryTag为偶数ack, 奇数nack, 消息违背消费端接收时, 是ready状态, 被消费端接收时会变为unacked状态</p>
<p>如果消费端回复ack, 即</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">channel.basicAck(deliveryTag, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure>
<p>deliveryTag对应的消息会从队列中删除, 第二个参数表示是否批量ack, 为true时表示批量ack, 即deliveryTag及小于它的消息都会从队列中删除</p>
<p>如果消费端回复unack, 可以调用两个方法任意一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// long deliveryTag, boolean multiple, boolean requeue</span><br>channel.basicNack(deliveryTag, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-comment">// long deliveryTag, boolean requeue</span><br>channel.basicReject(deliveryTag, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure>
<p>如果requeue=true, 则消息会被重新加入队列中, 且变为ready状态, 否则消息会被删除</p>
<p>另外要注意的是, 处于unacked状态的消息不能被投递被其它的消费端, 不过呢, 如果该消费端与broker的连接断开了, 则消息会从unacked变为ready状态, 此时可以投递给其它的消费端</p>
<h5 id="日志记录">日志记录</h5>
<p>创建一张关于消息的数据表, 记录消息的所有信息和状态</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `mq_message` (<br>`message_id` <span class="hljs-type">char</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`content` text,<br>`to_exchane` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`routing_key` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`class_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`message_status` <span class="hljs-type">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;0-新建 1-已发送 2-错误抵达 3-已抵达&#x27;</span>,<br>`create_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`message_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4<br></code></pre></td></tr></table></figure>
<p>开启一个定时任务, 定时到数据库扫描未成功的消息进行重发;</p>
<p>上面提到的3种机制, 分别对应1, 2, 3种状态, 回调后需要修改数据库中消息的状态</p>
<h4 id="解决消息重复和消息积压">解决消息重复和消息积压</h4>
<h5 id="消息重复">消息重复</h5>
<p>消息重复的原因, 分以下几种情况</p>
<ul>
<li>消息消费成功, 事务已经提交, ack时, 机器宕机。导致没有ack成功, broker中的消息由unack变为ready, 发送给其它消费者消费</li>
<li>消息消费失败, 由于重试机制, 自动又将消息发送出去</li>
</ul>
<p><strong>解决</strong></p>
<ol type="1">
<li>消费者的业务消费接口应该设计为幂等性的, 比如扣减库存时要改变订单状态, 下一次扣减库存时, 发现订单状态已经改变了, 就不再扣减库存了</li>
<li>使用防重表(redis/mysql), 发送给每个消息一个唯一标识, 处理时给防重表的消息标记处理过了</li>
<li>rabbitMQ的每一个消息都有redelivred字段, 可以根据这个字段判断消息是否是重新投递过的</li>
</ol>
<h5 id="消息积压">消息积压</h5>
<p>消息积压的原因:</p>
<ul>
<li>消费者宕机积压</li>
<li>消费者消费能力不足积压</li>
<li>发送者发送流量太大</li>
</ul>
<p><strong>解决</strong></p>
<ol type="1">
<li>上线更多的消费者, 增大消费者集群的消费能力</li>
<li>上线专门的队列消费服务, 将消息批量取出来, 记录数据库, 离线慢慢处理</li>
</ol>
<h3 id="rabbitmq延时队列">rabbitMQ延时队列</h3>
<h4 id="延时队列应用场景">延时队列应用场景</h4>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220625214702.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>在创建订单时, 我们一般会在订单创建时锁库存.</p>
<p>在这个过程中, 可能有2种情况导致异常: 1.锁库存后, 订单执行其它业务失败, 导致订单创建失败, 2. 用户创建订单后30min未支付, 这时候需要主动将订单状态修改为取消。之后由库存服务根据订单状态解锁库存</p>
<p>无论是订单创建成功还是失败, 我们三十分钟以后, 再对订单进行操作, 比如订单不支付, 我们把它关了。所以三十分钟以后订单肯定就见分晓了。</p>
<p>40min以后我们把这个消息再发给解锁库存服务, 解锁库存服务, 一看这个订单早都没有了, 或者订单都没有支付, 被人取消了。</p>
<p>它就可以把当时锁的库存自动的解锁一下。</p>
<p>相当于我们整了一个定时的扫描订单、一个定时的库存解锁消息。</p>
<p><strong>为什么是40min？</strong></p>
<p><span class="math inline">\(40\)</span>min是锁定库存后, 自动解锁库存的时间, 在锁定库存后, 创建订单的流程可能还有其它工作, 所以实际上订单自动取消的<span class="math inline">\(30\)</span>min会延后一些, 于是自动解锁库存的时间设定久一点, 可以确保订单是否自动取消了</p>
<h4 id="定时任务的问题">定时任务的问题</h4>
<p>要实现这个需求, 如果不适用延时队列, 也可以使用定时任务的方法, 每隔<span class="math inline">\(30\)</span>min扫描数据库是否存在订单状态为未支付的订单, 取消这些订单; 每隔<span class="math inline">\(40\)</span>min扫描锁定的库存关联的订单是否存在或者被取消了</p>
<p><strong>这两个业务都使用定时任务的话会给我们带来很大的问题</strong></p>
<p>首先定时任务消耗系统内存, 并且增加了数据库压力</p>
<p><strong>因为定时任务是每隔一段时间就要去扫描数据库里的所有订单</strong></p>
<p>相当于我们这个数据库每隔一段时间就要做一个全盘扫描, 扫描所有订单, 库存, <strong>这样整个数据库的压力就会非常大</strong></p>
<p><strong>定时任务最致命的问题是它有较大的时间误差</strong></p>
<p>比如下面这个场景:</p>
<p><img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220626154424.png" /></p>
<p>假设现在的时间是<span class="math inline">\(10:00\)</span>, 如果我们使用定时任务, 每隔<span class="math inline">\(30\)</span>min来扫一次</p>
<p>假设用户在<span class="math inline">\(10:01\)</span>下了一个订单, 这个订单应该在<span class="math inline">\(10:31\)</span>过期, 在<span class="math inline">\(10:30\)</span>又执行了一次定时任务, 此时订单还有一分钟才过期, 不能主动取消这个订单, <span class="math inline">\(11:00\)</span>执行定时任务, 发现这个订单过期了, 才能主动取消它。</p>
<p><span class="math inline">\(11:00\)</span>时才主动取消这个订单, 和期望的过期时间相差<span class="math inline">\(29\)</span>min, 这是很致命的问题</p>
<p>基于这些原因, 在这个应用场景, 不使用定时任务, 使用MQ</p>
<h4 id="延时队列使用介绍">延时队列使用介绍</h4>
<blockquote>
<p>延时队列，它是基于消息的 TTL（存活时间）以及死信Exchange （路由）结合的</p>
</blockquote>
<h5 id="ttl">TTL</h5>
<p>消息的TTL就是消息的存活时间。只要这个消息在TTL内没有被消费, 那这个消息就相当于没用了, <strong>将其称为死信</strong>。可以给消息设置TTL, 也可以给队列设置TTL, 效果都是一样的。只要指定时间内, 消息没有被消费, 消息就会变成死信。</p>
<h5 id="死信路由-dead-letter-exchanges-dlx">死信路由 Dead Letter Exchanges DLX</h5>
<p><strong>什么是死信？</strong></p>
<p>一个消息如果满足以下条件, 它就会成为死信</p>
<ol type="1">
<li>被Consumer拒收, 并且reject方法的参数里requeue是false</li>
<li>消息的TTL到了, 消息过期了</li>
</ol>
<p>消息成为死信后, 可以指定它发送给哪个交换机, 并以哪个路由键进行路由</p>
<h4 id="延时队列的实现">延时队列的实现</h4>
<h5 id="设置队列过期时间">设置队列过期时间</h5>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220626162737.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>首先生产者发送消息时, 指定了路由键 dead.message, 交换机根据路由键将消息发送到delay 5m queue, 没有消费者监听这个队列, 并且它有这几个参数:</p>
<ul>
<li><code>x-message-ttl</code>: 消息的存活时间, 它以毫秒为单位, 相当于300秒, 也就是五分钟以后消息过期</li>
<li><code>x-dead-letter-exchange</code>: 死信交换机, 队列中的消息成为死信后, 不直接丢弃, 而是发送给死信交换机</li>
<li><code>x-dead-letter-routing-key</code>: 死信路由键, 死信交换机以其作为路由键, 发送给相应队列</li>
</ul>
<h5 id="设置消息过期时间">设置消息过期时间</h5>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220626163657.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>不再给队列设置设置过期时间, 而是直接给消息设置过期时间, 其它的执行流程和给队列设置过期时间类似</p>
<h5 id="两种方式的区别">两种方式的区别</h5>
<p>如果给消息设置过期时间的话, rabbitMQ采用的是惰性检查机制, 也就是懒检查</p>
<p><strong>什么是懒检查？</strong></p>
<p>假设我们给delay 5m queue发送了3条消息, 第<span class="math inline">\(1\)</span>条是5min过期, 第<span class="math inline">\(2\)</span>条是1min过期, 第<span class="math inline">\(3\)</span>条是1s过期</p>
<p>我们期望的效果是, 第<span class="math inline">\(3\)</span>条消息加入队列后, 1s后过期, 加入到死信交换机中, 不过实际上mq broker并不是这样做的</p>
<p>它会以先进先出的策略, 从队列中取出第一条消息, 发现它是5min后过期的, 当前还没过期, 于是把它放回去, 等待5min后再来检查消息是否过期。这样就会导致第<span class="math inline">\(2\)</span>, <span class="math inline">\(3\)</span>消息的过期时间延后了。</p>
<p>如果给队列设置过期时间, 因为每个消息的过期时间是相同的, 所以队列的第一条消息肯定是最早过期的消息, mq broker只需从队头开始扫描是否有过期消息, 可以保证消息的删除时间不被延后</p>
<h4 id="延时队列模拟订单关闭">延时队列模拟订单关闭</h4>
<h5 id="基本设计">基本设计</h5>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220626170652.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>创建两个交换机: user.order.delay.exchange, user.order.exchange; 两个队列: user.order.delay.queue, user.order.queue</p>
<p>创建订单时, 将订单封装成一个消息, 发送到user.order.delay.queue</p>
<p>没有消费者监听user.order.delay.queue, 于是队列中的消息30min后过期, 按照指定的参数发送给user.order.exchange, 并根据路由键到达user.order.queue, 到达user.order.queue的消息都是超过30min的消息, 所以消费者可以去数据库检查订单是否支付过了, 如果没有支付过则把订单取消</p>
<h5 id="进阶设计和补充">进阶设计和补充</h5>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%B5%81%E7%A8%8B.jpg" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<h3 id="订单系统">订单系统</h3>
<h4 id="基本介绍">基本介绍</h4>
<h5 id="简介-3">简介</h5>
<p>电商系统涉及到<span class="math inline">\(3\)</span>流, 分别是信息流, 资金流, 物流, 而订单系统作为中枢将三者有机的集合起来</p>
<p>订单模块是电商系统的枢纽，在订单这个环节上需求获取多个模块的数据和信息，同时对这些信息进行加工处理后流向下个环节，这一系列就构成了订单的信息流通。</p>
<h5 id="订单构成">订单构成</h5>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220612233147.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<ol type="1">
<li><p>用户信息</p>
<p>用户信息包括用户账号, 用户等级, 收获地址, 收货人, 电话等, 用户账号需要绑定手机号, 但是用户绑定的手机号码不一定是收货信息上的电话。用户可以添加多个收货信息，用户等级信息可以用来和促销系统进行匹配, 获取商品折扣, 同时用户等级还可以获取积分的奖励等</p></li>
<li><p>订单信息是订单流转的核心, 包括订单类型, 父子订单, 订单编号, 订单状态, 订单流转的时间等</p>
<ol type="1">
<li>订单类型包括实体商品订单和虚拟商品订单等, 这个根据商城商品和服务类型进行区分</li>
<li>同时订单还需要做父子订单处理, 如果只有一个订单, 没有做父子订单, 后期需要拆弹的时候就比较麻烦, 也就是购物车有很多商品, 同时结算, 这个结算作为一个父订单, 单个商品做子订单。在多商品商场, 和不同仓库商品的时候, 父子订单就是为后期拆单做准备的</li>
<li>订单编号不多说了，需要强调的一点是父子订单都需要有订单编号，需要完善的时候可以对订单编号的每个字段进行统一定义和诠释。</li>
<li>订单状态记录订单每次流转过程, 后面会对订单状态进行单独的说明</li>
<li>订单流转时间需要记录下单时间，支付时间，发货时间，结束时间/关闭时间等等</li>
</ol></li>
<li><p>商品信息</p>
<p>商品信息从商品库中获取商品的 SKU 信息、图片、名称、属性规格、商品单价、商户信息等, 从用户下单行为记录的用户下单数量, 商品合计价格等。</p></li>
<li><p>优惠信息</p>
<p>优惠信息记录用户参与的优惠活动, 包括优惠促销活动, 比如满减、满赠、秒杀等, 用户使用的优惠券信息，优惠券满足条件的优惠券需要默认展示出来</p>
<p>为什么把优惠信息单独拿出来而不放在支付信息里面呢？ 因为优惠信息只是记录用户使用的条目, 而支付信息需要加入数据进行计算, 所以做为区分</p></li>
<li><p>支付信息</p>
<ol type="1">
<li>支付流水单号, 这个流水单号是在唤起网关支付后支付通道返回给电商业务平台的支付流水号, 财务通过订单号和流水单号与支付通道进行对账使用</li>
<li>支付方式用户使用的支付方式, 比如微信支付、支付宝支付、钱包支付、快捷支付等。支付方式有时候可能有两个——余额支付+第三方支付。</li>
<li>商品总金额, 每个商品加总后的金额; 运费, 物流产生的费用; 优惠总金额, 包括促销活动的优惠金额, 优惠券优惠金额, 虚拟积分或者虚拟币抵扣的金额, 会员折扣的金额等之和; 实付金额，用户实际需要付款的金额。用户实付金额=商品总金额+运费-优惠总金额</li>
</ol></li>
<li><p>物流信息</p>
<p>物流信息包括配送方式, 物流公司, 物流单号, 物流状态, 物流状态可以通过第三方接口来获取和向用户展示物流每个状态节点</p></li>
</ol>
<h5 id="订单状态">订单状态</h5>
<ol type="1">
<li><p>待付款</p>
<p>用户提交订单后, 订单进行预下单, 目前主流电商网站都会唤起支付, 便于用户快速完成支付, 需要注意的是待付款状态下可以对库存进行锁定, 锁定库存需要配置支付超时时间, 超时后将自动取消订单, 订单变更关闭状态</p></li>
<li><p>已付款/ 待发货</p>
<p>用户完成订单支付, 订单系统需要记录支付时间, 支付流水单号便于对账, 订单下放到WMS系统, 仓库进行调拨, 配货, 分拣, 出库等操作</p></li>
<li><p>待收货/ 已发货</p>
<p>仓储将商品出库后, 订单进入物流环节, 订单系统需要同步物流信息, 便于用户实时知悉物品物流状态</p></li>
<li><p>已完成</p>
<p>用户确认收货后, 订单交易完成。后续支付侧进行结算, 如果订单存在问题进入售后状态</p></li>
<li><p>已取消</p>
<p>付款之前取消订单。包括超时未付款或用户商户取消订单都会产生这种订单状态</p></li>
<li><p>售后中</p>
<p>用户在付款后申请退款, 或商家发货后用户申请退换货。售后也同样存在各种状态, 当发起售后申请后生成售后订单, 售后订单状态为待审核, 等待商家审核, 商家审核通过后订单状态变更为待退货, 等待用户将商品寄回, 商家收货后订单状态更新为待退款状态, 退款到用户原账户后订单状态更新为售后成功</p></li>
</ol>
<h5 id="订单流程">订单流程</h5>
<p>订单生成–&gt;支付订单–&gt;卖家发货–&gt;确认收货–&gt;交易成功</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220613000032.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<h5 id="feign远程调用丢失请求头问题">Feign远程调用丢失请求头问题</h5>
<p><img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220629204232.png" /></p>
<p><strong>解决</strong></p>
<p>Feign在调用时有自己的拦截器RequestInterceptor, 往容器里注入一个拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RequestInterceptor <span class="hljs-title function_">requestInterceptor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestInterceptor</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(RequestTemplate requestTemplate)</span> &#123;<br>            <span class="hljs-comment">// 取到刚进来的请求</span><br>            <span class="hljs-type">ServletRequestAttributes</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();<br>            <span class="hljs-keyword">if</span> (attributes != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> attributes.getRequest();  <span class="hljs-comment">// 老请求</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;cookie&quot;</span>);<br>                <span class="hljs-comment">// 给新请求同步老请求的cookie</span><br>                requestTemplate.header(<span class="hljs-string">&quot;cookie&quot;</span>, cookie);<br>            &#125;<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>RequestContextHodler可以获取当前线程的请求参数</p>
<h5 id="异步任务丢失上下文问题">异步任务丢失上下文问题</h5>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220629205153.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>因为RequestContextHolder可以获取到当前线程的请求参数, 但是执行异步请求时, 位于不同线程, 所以无法给feign调用设置cookie</p>
<p>在执行异步任务时, 先给异步任务对应的线程的RequestContextHodler设置主线程的请求参数</p>
<h4 id="订单确认页">订单确认页</h4>
<h5 id="登录拦截">登录拦截</h5>
<p>因为呢, 只要登录的用户才能提交订单, 所以为订单服务, 设置一个拦截器, 如果没登录则需要重定向到登录页</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginUserInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;MemberRespVo&gt; threadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MemberRespVo</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> (MemberRespVo) request.getSession().getAttribute(AuthServerConstant.LOGIN_USER);<br>        <span class="hljs-keyword">if</span> (loginUser != <span class="hljs-literal">null</span>) &#123;<br>            threadLocal.set(loginUser);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            request.getSession().setAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;请先进行登录&quot;</span>);<br>            response.sendRedirect(<span class="hljs-string">&quot;http://auth.mall.com/login.html&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MallWebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CartInterceptor</span>()).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>注意这里为什么<code>getSession</code>可以取到数据, 是因为我们让order服务也集成了spring-session, getSesssion时会以cookie中的MALLSESSION作为key到redis取到session</p>
<h5 id="确认页模型分析">确认页模型分析</h5>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220613001903.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220613002003.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderConfirmVo</span> &#123;<br><br>    <span class="hljs-comment">// 收获地址 ums_member_receive_address表</span><br>    <span class="hljs-keyword">private</span> List&lt;MemberAddressVo&gt; address;<br>    <br>    <span class="hljs-comment">// 支付方式</span><br>    <br>    <span class="hljs-comment">// 所有选中的购物项</span><br>    <span class="hljs-keyword">private</span> List&lt;OrderItemVo&gt; items;<br><br>    <span class="hljs-comment">// 发票...</span><br><br>    <span class="hljs-comment">// 优惠卷信息</span><br>    <span class="hljs-keyword">private</span> Integer integration;<br><br>    <span class="hljs-comment">// 订单总额</span><br><br>    <span class="hljs-comment">// 应付价格</span><br><br>    <span class="hljs-comment">// 防重令牌</span><br>    <span class="hljs-keyword">private</span> String orderToken;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="获取orderconfirmvo">获取OrderConfirmVo</h5>
<p>根据上面的分析, OrderConfirmVo主要的信息有地址信息和购物车的信息, 所以获取OrderConfirmVo时, 需要分别调用会员服务查出用户关联的所有地址, 购物车所有的购物项</p>
<p>这个过程涉及多个远程服务调用, 可以使用CompletableFuture异步编排的方式, 缩短查询总时间</p>
<p>另外每次到订单确认页时, 还需要给用户发一个令牌, 防止用户重复点击提交订单按钮</p>
<h4 id="提交订单功能的实现">提交订单功能的实现</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SubmitOrderResponseVo <span class="hljs-title function_">submitOrder</span><span class="hljs-params">(OrderSubmitVo vo)</span> &#123;<br>    <span class="hljs-type">SubmitOrderResponseVo</span> <span class="hljs-variable">responseVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubmitOrderResponseVo</span>();<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> validToken(vo);<br>    <span class="hljs-keyword">if</span> (result) &#123;<br>        <span class="hljs-comment">// 验证成功</span><br>        <span class="hljs-comment">// 创建订单</span><br>        <span class="hljs-type">OrderCreateTo</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> createOrder(vo);<br>        <span class="hljs-comment">// 验价</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">payPrice</span> <span class="hljs-operator">=</span> order.getPayPrice();<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">voPayPrice</span> <span class="hljs-operator">=</span> vo.getPayPrice();<br>        <span class="hljs-keyword">if</span> (Math.abs(payPrice.subtract(voPayPrice).doubleValue()) &lt; <span class="hljs-number">0.01</span>) &#123;<br>            <span class="hljs-comment">// 金额对比</span><br>            <span class="hljs-comment">// 保存订单</span><br>            saveOrder(order);<br>            <span class="hljs-comment">// 锁库存 只要有异常锁数据</span><br>            <span class="hljs-comment">// 订单号，所有订单项 skuId, skuName, num</span><br>            <span class="hljs-type">WareSkuLockVo</span> <span class="hljs-variable">lockVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WareSkuLockVo</span>();<br>            lockVo.setOrderSn(order.getOrder().getOrderSn());<br>            List&lt;OrderItemVo&gt; collect = order.getOrderItems().stream().map(item -&gt; &#123;<br>                <span class="hljs-type">OrderItemVo</span> <span class="hljs-variable">orderItemVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItemVo</span>();<br>                orderItemVo.setSkuId(item.getSkuId());<br>                orderItemVo.setCount(item.getSkuQuantity());<br>                orderItemVo.setTitle(item.getSkuName());<br>                <span class="hljs-keyword">return</span> orderItemVo;<br>            &#125;).collect(Collectors.toList());<br>            lockVo.setLocks(collect);<br>            <span class="hljs-comment">// 远程锁库存</span><br><br>            <span class="hljs-comment">// 为了保证高并发，库存服务自己回滚，发消息给库存服务</span><br>            <span class="hljs-comment">// 库存本身也可以自动解锁 消息队列</span><br>            <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> wareFeignService.orderLockStock(lockVo);<br>            <span class="hljs-keyword">if</span> (r.getCode() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// int i = 10 / 0;</span><br>                responseVo.setResponseStatus(SubmitOrderResponseVo.ResponseStatus.SUCCESS);<br>                responseVo.setOrder(order.getOrder());<br>                <span class="hljs-comment">// 订单创建成功发送消息给MQ</span><br>                <span class="hljs-comment">// 实际上会发送给delay queue</span><br>                <span class="hljs-comment">// delay queue超过过期时间会将其发送给release order queue</span><br>                rabbitTemplate.convertAndSend(OrderConstant.ORDER_EVENT_EXCHANGE,<br>                                              OrderConstant.ORDER_CREATE_ORDER_ROUTING_KEY,<br>                                              order.getOrder());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 锁库存失败</span><br>                responseVo.setResponseStatus(SubmitOrderResponseVo.ResponseStatus.STOCK_LOCKED_FAIL);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoStockException</span>((String) r.get(<span class="hljs-string">&quot;msg&quot;</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 验价失败</span><br>            responseVo.setResponseStatus(SubmitOrderResponseVo.ResponseStatus.CONFLICT_PRICE);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 重复提交</span><br>        responseVo.setResponseStatus(SubmitOrderResponseVo.ResponseStatus.CONFLICT_PRICE);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> responseVo;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>创建订单的基本过程</p>
<ol type="1">
<li>验证令牌, 防止用户提交重复请求</li>
<li>调用库存服务获取用户的运费信息和收货地址</li>
<li>调用购物车服务, 查出所有购物项, <strong>需要注意的是购物项的价格不一定是存入购物车时的价格, 需要重新计算</strong></li>
<li>统计总价, 计算用户应付价格</li>
<li>调用库存服务, 锁定所需库存</li>
</ol>
<p>这个过程涉及到两个重要过程: 1.创建订单; 2.锁库存, 这两个过程应该构成一个分布式事务, <strong>要么同时成功，要么都失败, 具体的实现会在后面介绍</strong></p>
<p>创建订单后提交到支付页, 支付页主要的信息有订单号, 订单金额</p>
<h3 id="分布式事务">分布式事务</h3>
<h4 id="本地事务基础">本地事务基础</h4>
<h5 id="acid">ACID</h5>
<ol type="1">
<li>原子性</li>
<li>一致性</li>
<li>隔离性</li>
<li>持久性</li>
</ol>
<h5 id="隔离级别">隔离级别</h5>
<p><strong>READ UNCOMMITTED（读未提交）</strong></p>
<p><strong>READ COMMITTED（读已提交）</strong></p>
<p><strong>REPEATABLE READ（可重复读）</strong></p>
<p><strong>SERIALIZABLE（序列化）</strong></p>
<table>

<thead>
<tr class="header">
<th></th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>脏读</td>
<td>A事务未提交却被B事务读取到</td>
</tr>
<tr class="even">
<td>不可重复读</td>
<td>A事务做了修改提交了， 同时开启的B事务读取到了修改后的结果</td>
</tr>
<tr class="odd">
<td>幻读</td>
<td>同时开启的两个事务中，A事务进行了查询，发现表内有两条数据，此时B事务向表中插入了一条数据并提交，A事务打算修改这两条数据，结果修改了三条数据</td>
</tr>
</tbody>
</table>
<h5 id="传播行为">传播行为</h5>
<ol type="1">
<li><p><strong>PROPAGATION_REQUIRED</strong>: 如果当前没有事务, 就创建一个新事务, 如果当前存在事务, 就加入该事务, 这个设置是最常用的设置</p></li>
<li><p>PROPAGATION_SUPPORTS: 支持当前事务, 如果当前存在事务, 就加入该事务, 如果当前不存在事务, 就以非事务执行</p></li>
<li><p>PROPAGATION_MANDATORY: 支持当前事务，如果当前存在事务, 就加入该事务, 如果当前不存在事务, 就抛出异常</p></li>
<li><p><strong>PROPAGATION_REQUIRES_NEW</strong>: 创建新事务, 无论当前存不存在事务, 都创建新事务</p></li>
<li><p>PROPAGATION_NOT_SUPPORTED: 以非事务方式执行操作, 如果当前存在事务, 就把当前事务挂起</p></li>
<li><p>PROPAGATION_NESTED: 如果当前存在事务, 则在嵌套事务内执行。如果当前没有事务, 则执行与 PROPAGATION_REQUIRED 类似的操作</p></li>
</ol>
<p><strong>demo</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * a, b公用一个事务, 如果其中一个出现异常都会回滚,</span><br><span class="hljs-comment"> * 而c在另一个事务中, 不会回滚</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span> &#123;<br>    b();<br>    c();<br>&#125;<br><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span> &#123;<br>    <br>&#125;<br><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">c</span><span class="hljs-params">()</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>存在的问题</strong></p>
<p>同一个对象内, 隔离级别的配置失效</p>
<p>上述的这个示例, 如果 a、b、c 方法全都在同一个 service 下, 那么 b、c 做的传播行为配置, 都不会起作用, 也就是说b、c都会跟 a 共用一个事务</p>
<p>除非b、c在其他不同的 service, 那样才能使它们自己的配置生效</p>
<p><strong>原因</strong></p>
<p>事务是使用代理对象来控制的, 如果在a里面调用的同一个service的b, c方法, 相当于把b, c的代码复制到a, 不会使用代理执行b, c方法</p>
<p><strong>解决</strong></p>
<p>使用代理对象调用b, c方法, 即可解决</p>
<ol type="1">
<li><p>导入<code>spring-boot-starter-aop</code>依赖, 这个依赖引入了aspectj</p></li>
<li><p>启动类开启 aspectj 动态代理功能, 以后所有的动态代理都是 aspectj 创建的（即使没有接口也可以创建动态代理）, 对外暴露代理对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAspectJAutoProxy(exposeProxy=true)</span> <br></code></pre></td></tr></table></figure></li>
<li><p>用代理对象对本类互调</p>
<p><code>AopContext.currentProxy()</code> 调用方法</p></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-type">OrderServiceImpl</span> <span class="hljs-variable">orderService</span> <span class="hljs-operator">=</span> (OrderServiceImpl) AopContext.currentProxy();<br>    orderService.b();<br>    orderService.c();<br>&#125;<br><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span> &#123;<br>    <br>&#125;<br><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">c</span><span class="hljs-params">()</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="本地事务在分布式下存在的问题">本地事务在分布式下存在的问题</h5>
<p><img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220614145559.png" alt="shadow" style="zoom:67%;" /></p>
<h6 id="假失败">假失败</h6>
<p>如果保存订单成功, 远程锁库存假失败, 那就会出现问题</p>
<p>假失败就是我们在订单服务调库存服务时, <strong>库存锁定成功</strong>, 库存服务的事务提交了, 然后由于服务器慢、卡顿、等故障原因, 没有返回到订单服务</p>
<p>如果超过了feign规定的超时时间, 就会抛出read time out读取超时, 抛出异常</p>
<p><strong>库存锁定成功, 但是订单数据回滚, 导致数据不一致</strong></p>
<h6 id="调用新服务出现异常之后-之前调用的服务无法回滚">调用新服务出现异常之后, 之前调用的服务无法回滚</h6>
<p>假设库存锁定成功, 将结果返回到了订单服务, 我们根据结果又调用了积分服务, 让它扣减积分，</p>
<p>结果积分服务内部出现异常, 积分数据回滚</p>
<p>此时再看订单服务, 订单服务感知到我们手动抛的积分异常, 订单数据回滚, 但是库存服务, 却不会有任何感知</p>
<p><strong>结果：积分、订单数据全部回滚，库存给锁定了，也是数据不一致</strong></p>
<h4 id="分布式事务常见的解决方案">分布式事务常见的解决方案</h4>
<h5 id="pc模式">2PC模式</h5>
<blockquote>
<p>2PC就是我们所说的二阶段提交, 又叫做XA Transactions。</p>
</blockquote>
<p>主流数据库对2PC模式的支持情况:</p>
<p>MySQL从5.5版本开始支持, SQL Server 2005开始支持, Oracle 7开始支持</p>
<p>2PC模式, 将整个分布式事务拆分成两个阶段:</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220629233009.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>每个微服务有自己的本地资源管理器, 由事务管理器, 决定本地资源管理器的行为</p>
<p>事务管理器将分布式事务分为两个阶段：</p>
<ol type="1">
<li>事务管理器会询问分布式事务涉及的每个资源管理器准备好了吗？即数据有没有准备好、连接正不正常、能不能提交数据？如果一切准备好了, 就差提交, 就会告诉事务管理器它就绪了</li>
<li>事务管理器收到所有涉及的资源管理器的就绪信息, 事务管理器发送提交信号给它们; 资源管理器收到信号后提交事务, 并发送成功信号给事务管理器, 如果有任意一个本地资源管理器提及失败, 即事务管理器没有收到它的成功信号, 事务管理器就会命令所有的资源管理器都回滚</li>
</ol>
<p><strong>优点</strong></p>
<p>比较简单, 而且数据库原生支持, 使用这种模式, 只需要少量配置就能使用了</p>
<p><strong>缺点</strong></p>
<p><strong>同步阻塞</strong></p>
<p>可以看到在第一阶段执行了准备命令后, 我们每个本地资源都处于锁定状态, 因为除了事务的提交之外啥都做了。</p>
<p>所以这时候如果本地的其他请求要访问同一个资源, 比如要修改商品表 id 等于 100 的那条数据, 那么此时是被阻塞住的, 必须等待前面事务的完结, 收到提交/回滚命令执行完释放资源后, 这个请求才能得以继续。</p>
<p><strong>单点故障</strong></p>
<p>如果事务管理器挂了, 整个事务就执行不下去了, 特别是事务管理器发送准备命令后就挂了, 就会让微服务的资源一直被锁住了, 无法释放, 严重影响业务的执行</p>
<p><strong>数据不一致问题</strong></p>
<p>如果事务管理器发送回滚命令给某一个本地资源管理器时, 由于网络问题命令无法发送到, 就会产生数据不一致问题</p>
<h5 id="pc模式-1">3PC模式</h5>
<p>三阶提交模式将2PC模式的预备划分为两个阶段, 总有有3个阶段</p>
<pre><code class="hljs">1. 能否提交
1. 能否准备好数据
1. 提交</code></pre>
<p>3PC的引入是为了解决2CP同步阻塞和减少数据不一致的情况</p>
<h5 id="柔性事务-tcc事务补偿方案">柔性事务-TCC事务补偿方案</h5>
<p>二阶提交协议，看起来就像刚性事务。</p>
<p>就像是，我命令你们都提交，那你们都能提交，只要命令过去了，这个状态呢就是一致的, 强一致性</p>
<p><strong>但是在分布式里边，更多使用的是柔性事务</strong>。</p>
<h6 id="什么叫柔性事务">什么叫柔性事务</h6>
<p>刚性事务遵循ACID原则, 要求强一致性</p>
<p>柔性事务遵循BASE理论, 实现最终一致性</p>
<h6 id="tcc事务补偿方案是怎么工作的">TCC事务补偿方案是怎么工作的</h6>
<p>TCC模式要求在写业务代码时, 还要写出对应的回调方法</p>
<p>TCC模式分为3个阶段</p>
<p>Try, 尝试阶段, 预准备一些数据</p>
<p>Confirm, 把准备的数据提交</p>
<p>Cancel, 回滚提交的数据</p>
<p>假设现在有3个用户A, B, C分别位于三个不同的数据库实例上, 现在A, B要分别向C转账40元（一共80元）。</p>
<p>Try阶段: 尝试执行</p>
<ul>
<li>业务检查（一致性）: 检查A, B, C的账户状态是否正常, 以及A, B的账户余额是否都不低于40元</li>
<li>预留资源（准隔离性）: 账户A, B的余额均冻结40元。这样保证其他并发事务不会把A, B的余额扣成负数。</li>
</ul>
<p>Confirm阶段: 确认执行</p>
<ul>
<li>真正执行事务: 执行实际的业务操作: A, B账户减少40元, C账户增加80元</li>
</ul>
<p>Cancel阶段: 取消执行</p>
<ul>
<li>释放A, B账户上被成功冻结的金额</li>
<li>释放Try阶段预留的业务资源: 如果Try阶段部分成功, 比如账户A的金额够用, 且冻结相应的金额成功, 帐户B的余额不够而冻结失败, 则需要对帐户A做Cancel操作, 将帐户A被冻结的金额解冻掉</li>
</ul>
<p><strong>优点</strong></p>
<ul>
<li>解决了跨应用业务操作的原子性问题</li>
<li>TCC实际上把数据库层的二阶段提交上提到应用层来实现, 对于数据库来说是一阶段提交, 规避了数据库层的2PC性能低下问题。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>对于业务的侵入性高</li>
</ul>
<h5 id="柔性事务-最大努力通知方案">柔性事务-最大努力通知方案</h5>
<p><strong>最大努力通知和可靠消息都是用来保证最终一致性的</strong>。</p>
<p>比如, 现在有个场景, 订单服务调用库存服务锁库存, 库存服务锁定成功, 订单服务继续执行其它业务失败, 导致订单没有创建成功。订单服务就需要尽最大通知通知库存服务解锁库存。</p>
<p>订单服务调用一次库存解锁方法, 不成了再调一次, 再不成了, 再调一次。</p>
<p>可以将通知封装成可靠消息, 发送给MQ, 库存服务监听对应的消息, 收到消息后, 减去相应库存, 注意减库存的方法要保证幂等性</p>
<p><strong>最大努力通知</strong></p>
<p>就是我们害怕这个订单服务, 不知道我们这个消息, 就是我们这个消息发出去了, 我们害怕它没收到, 万一这个宕机了, 一直收不到, 那怎么办呢？那这块就失败了。</p>
<p>所以我们隔一秒给它里边发一个消息, 说我失败了。再隔三秒, 我发个消息, 我说我失败了。再隔五秒我发一个消息, 我说我失败了, 我一直告诉你, 我失败了、我失败了......</p>
<p>你哪一次真正的收到我失败了这个消息, 而且你把你的业务执行成功了, 你就可以告诉我, 说行了我知道你失败了，你不用再通知我了。</p>
<p>这是我们说的最大努力通知型方案。</p>
<h5 id="以上几种方案的总结">以上几种方案的总结</h5>
<p>柔性事务最大的好处, 是可以允许高并发; 当然刚性事务在并发量小的时候, 也可以使用, 它们使用起来非常简单, 只需要简单配置即可。</p>
<h4 id="分布式事务的最终解决方案">分布式事务的最终解决方案</h4>
<p><strong>选择可靠消息+最终一致性这种方式</strong></p>
<h5 id="库存服务自己怎么回滚">库存服务自己怎么回滚</h5>
<p>有两个解决方法</p>
<p><strong>第一种</strong></p>
<p>我们在提交订单那里, 当捕捉到异常要回滚的时候, 给库存服务发一个消息, 让库存服务自己把库存解锁</p>
<p>这样不需要让库存事务回滚, 只需要给它发一个消息, 不会损失什么性能</p>
<p><strong>第二种</strong></p>
<p>库存服务本身也可以使用自动解锁模式</p>
<p>怎么自动解锁呢？</p>
<p>需要使用消息队列完成</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220630233426.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p><strong>如果你想让我这的哪些库存解锁, 首先你需要给我发一个消息告诉我。</strong></p>
<p>然后我们专门的库存解锁服务, 去来订阅我们<code>stock.release.stock.queue</code>这个队列里的消息, 库存解锁服务收到消息后, 进行解锁。</p>
<p>我们不用保证强一致, 我们哪怕是二十分钟、三十分钟, 乃至于一天以后把这个库存解锁了, 最终一致了就行。</p>
<p>所以我们可以来使用消息队列来完成我们的这个最终一致性。</p>
<h5 id="订单服务完整消息队列">订单服务完整消息队列</h5>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220630235528.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>锁定库存时, 如果锁定某个项成功, 会往stock.delay.queue发送一条消息, 包含工作单详情id, wareId, skuId, num等信息, 这个消息会在40min后过期, 到达stock-event-exchange交换机, 然后到达stock.release.stock.queue队列, 由库存服务进行解锁</p>
<p>解锁时, 根据工作单详情id查到工作单详情, 如果不存在或者工作单详情的状态为已解锁则不用解锁, 否则进一步根据工作单id查出订单, 如果订单存在且订单的状态不为已取消, 则不用解锁, 否则需要解锁</p>
<p>解锁时记要改变锁定的库存, 同时需要把工作单详情的id改为已解锁, 保证幂等性</p>
<p>同时订单创建成功时, 会往order.delay.queue发送一条消息, 主要包含订单号, 这条消息会在30min后过期, 如果30min内用户没有支付, 支付会改变订单状态, 则订单的状态仍为未支付, order.release.order.queue收到消息后, 订单服务会进行订单取消</p>
<p>首先判断订单状态是否为未支付, 如果不是则不用取消订单, 否则说明需要解锁, 将订单号对应的订单状态改为已取消, 并发送一条消息给stock.release.stock.queue, 通知它需要解锁订单号对应的库存</p>
<p><strong>这里为什么还需要发送一条消息给stock.release.stock.queue呢？</strong></p>
<p>因为可能因为网络延迟或者订单服务处理不过来等原因, 导致实际上订单并没有在30min后解锁, 可能等到40min后才解锁, 假设库存服务在40min后收到解锁消息, 此时它判断订单的状态不为已取消, 则不会去解锁库存, 这就造成了数据不一致的问题, 所以需要在取消订单的时候, 再发送一条消息解锁库存</p>
<p>不过如果将两者的时间差设置得大一点, 即可以保证订单取消, 肯定在解锁库存消息接受前触发, 去不需要发送额外得解锁库存消息了。</p>
<h3 id="支付系统">支付系统</h3>
<h4 id="内存穿透">内存穿透</h4>
<p>后面支付成功回调会用到</p>
<p>借由内网穿透服务商实现内网穿透</p>
<p>服务商会给我们分配一个临时域名, 这个域名一般是服务商的二级或三级域名, 外界访问我们分配的域名时, 首先会访问服务商, 服务商收到请求后, 会根据域名, 将请求转发给我们</p>
<p>这里使用<a href="https://natapp.cn/">natapp</a>实现内网穿透</p>
<p>首先需要下载一个客户端, 服务商通过下载的客户端与我们通信</p>
<p>之后需要注册一个隧道, 有免费版的可以使用, 不过域名是一直变换的, 需要更改nginx和gateway的配置</p>
<p>注册隧道后, 将本地地址写成服务器的内网地址, 服务商收到对分配的域名的请求后, 就会将这个请求转发到填写的内网地址</p>
<h4 id="整合支付宝">整合支付宝</h4>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alipay.sdk<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>alipay-sdk-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.31.7.ALL<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>首先支付完成后会跳到支付页, 在支付页面选择支付方式, 进行支付, 当前只支持支付宝支付。用户在支付页, 点击支付页面后, 向服务器的支付接口发起请求, 并带上订单号。</p>
<p>订单服务, 首先要根据订单号到数据库中查到订单的金额, 注意这个值不能直接使用订单确认页的数据, 因为前端传过来的数据可能被篡改过, 涉及金额等数据必须从数据库查一遍</p>
<p>查到金额后, 向支付宝发起请求, 这里使用<a href="https://openhome.alipay.com/develop/sandbox/app">支付宝黑盒</a>进行测试</p>
<p>示例代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  String <span class="hljs-title function_">pay</span><span class="hljs-params">(PayVo vo)</span> <span class="hljs-keyword">throws</span> AlipayApiException &#123;<br>    <span class="hljs-comment">//1、根据支付宝的配置生成一个支付客户端</span><br>    <span class="hljs-type">AlipayClient</span> <span class="hljs-variable">alipayClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAlipayClient</span>(gatewayUrl,<br>                                                        app_id, merchant_private_key, <span class="hljs-string">&quot;json&quot;</span>,<br>                                                        charset, alipay_public_key, sign_type);<br><br>    <span class="hljs-comment">//2、创建一个支付请求 //设置请求参数</span><br>    <span class="hljs-type">AlipayTradePagePayRequest</span> <span class="hljs-variable">alipayRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlipayTradePagePayRequest</span>();<br>    alipayRequest.setReturnUrl(return_url);<br>    alipayRequest.setNotifyUrl(notify_url);<br><br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">bizContent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>    bizContent.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>, vo.getOut_trade_no());<br>    bizContent.put(<span class="hljs-string">&quot;total_amount&quot;</span>, vo.getTotal_amount());<br>    bizContent.put(<span class="hljs-string">&quot;subject&quot;</span>, vo.getSubject());<br>    bizContent.put(<span class="hljs-string">&quot;timeout_express&quot;</span>, timeout_express);<br>    bizContent.put(<span class="hljs-string">&quot;product_code&quot;</span>, <span class="hljs-string">&quot;FAST_INSTANT_TRADE_PAY&quot;</span>);<br>    alipayRequest.setBizContent(bizContent.toString());<br><br>    <span class="hljs-type">AlipayTradePagePayResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> alipayClient.pageExecute(alipayRequest);<br><br>    <span class="hljs-keyword">if</span> (response.isSuccess()) &#123;<br>        <span class="hljs-comment">//会收到支付宝的响应，响应的是一个页面，只要浏览器显示这个页面，就会自动来到支付宝的收银台页面</span><br>        <span class="hljs-comment">//            System.out.println(&quot;支付宝的响应：&quot;+response.getBody());</span><br>        <span class="hljs-keyword">return</span> response.getBody();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>参数介绍</p>
<p>return_url是支付成功后浏览器跳转的地址</p>
<p>notify_url: 支付成功后, 支付宝会给这个地址发送请求, 告知支付的结果, 订单服务需要拿到这个结果改变订单状态以及保存订单流水, 订单流水为了对账使用。因为是支付宝向我们发起请求, 所以这个地址必须是公网ip对应的域名, 需要使用到内网穿透</p>
<p>收到支付宝的请求后, 还需要验签, 防止伪造请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/payed/notify&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleAliPayed</span><span class="hljs-params">(PayAsyncVo vo, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException, AlipayApiException &#123;<br>    <span class="hljs-comment">// 只要我们收到了支付宝给我们异步的通知，告诉我们订单支付成功，返回success，支付宝再页不通知了</span><br><br>    log.info(<span class="hljs-string">&quot;收到支付宝的请求了，哈哈&quot;</span>);<br>    <span class="hljs-comment">// 验签，防止伪造请求</span><br>    Map&lt;String,String&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    Map&lt;String,String[]&gt; requestParams = request.getParameterMap();<br>    <span class="hljs-keyword">for</span> (String name : requestParams.keySet()) &#123;<br>        String[] values = requestParams.get(name);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">valueStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; values.length; i++) &#123;<br>            valueStr = (i == values.length - <span class="hljs-number">1</span>) ? valueStr + values[i]<br>                : valueStr + values[i] + <span class="hljs-string">&quot;,&quot;</span>;<br>        &#125;<br>        <span class="hljs-comment">//乱码解决，这段代码在出现乱码时使用</span><br>        <span class="hljs-comment">// valueStr = new String(valueStr.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8);</span><br>        params.put(name, valueStr);<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">signVerified</span> <span class="hljs-operator">=</span> AlipaySignature.rsaCheckV1(params, alipayTemplate.getAlipay_public_key(), alipayTemplate.getCharset(), alipayTemplate.getSign_type()); <span class="hljs-comment">//调用SDK验证签名</span><br>    <span class="hljs-keyword">if</span> (signVerified) &#123;<br>        log.info(<span class="hljs-string">&quot;验签成功&quot;</span>);<br>        <span class="hljs-comment">// 改订单状态</span><br>        <span class="hljs-keyword">return</span> orderService.handlePayResult(vo);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        log.info(<span class="hljs-string">&quot;验签失败&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>收到支付宝的通知请求后, 需要返回"success"或者"fail, 否则支付宝会以最大努力通知方案继续发送请求</p>
<h3 id="秒杀系统">秒杀系统</h3>
<h4 id="定时任务">定时任务</h4>
<p><strong>Cron表达式</strong></p>
<p>Cron表达式用于描述定时任务的执行时间, 它是一个字符串, 由空格分隔的六到七个属性组成</p>
<p>具体格式为:</p>
<p>秒 分 时 日 月 周 年（可忽略年, Spring不支持年）</p>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220703163811.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>特殊符号可以参照<a href="http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html">官网</a></p>
<h4 id="springboot整合定时任务">Springboot整合定时任务</h4>
<p><strong>demo</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@EnableScheduling</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloScheduled</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1、Spring中6位组成，不允许第7月的年</span><br><span class="hljs-comment">     * 2、在周几的位置，1-7代表周一到周日</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;* * * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;hello....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><span class="citation" data-cites="EnableScheduling注解开启定时任务">@EnableScheduling注解开启定时任务</span>, <span class="citation" data-cites="Scheduled开启一个定时任务">@Scheduled开启一个定时任务</span></p>
<p><strong>简单的原理解析</strong></p>
<p>从<code>@EnableScheduling</code>注解开始分析, 这个注解会导入<code>SchedulingConfiguration</code>配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Import(&#123;SchedulingConfiguration.class&#125;)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableScheduling &#123;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><code>SchedulingConfiguration</code>配置类, 会注入ScheduledAnnotationBeanPostProcessor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(</span><br><span class="hljs-meta">    proxyBeanMethods = false</span><br><span class="hljs-meta">)</span><br><span class="hljs-meta">@Role(2)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SchedulingConfiguration</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SchedulingConfiguration</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(</span><br><span class="hljs-meta">        name = &#123;&quot;org.springframework.context.annotation.internalScheduledAnnotationProcessor&quot;&#125;</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-meta">@Role(2)</span><br>    <span class="hljs-keyword">public</span> ScheduledAnnotationBeanPostProcessor <span class="hljs-title function_">scheduledAnnotationProcessor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduledAnnotationBeanPostProcessor</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><code>ScheduledAnnotationBeanPostProcessor</code>是一个bean后置处理器, 会在任意bean初始完成后调用<code>postProcessAfterInitialization</code>方法, 这个方法会扫描bean的所有方法, 将带有<code>@Scheduled</code>注解的方法加入到<code>annotatedMethods</code>中。</p>
<p>扫描结束后, 会遍历<code>annotatedMethods</code>, 执行<code>processScheduled</code>方法, 创建<code>ScheduledTask</code>, 将加入到<code>ScheduledAnnotationBeanPostProcessor</code>的<code>scheduledTasks</code>中</p>
<p>同时<code>ScheduledAnnotationBeanPostProcessor</code>还实现<code>SmartInitializingSingleton</code>接口, 这个接口会在spring容器中所有单例bean初始化完毕之后调用, 定期器的装配及启动都是在这个方法中进行的。</p>
<p><strong>定时任务默认是阻塞的</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scheduled(cron = &quot;* * * ? * 1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">block</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    log.info(<span class="hljs-string">&quot;hello......&quot;</span>);<br>    Thread.sleep(<span class="hljs-number">3000</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>按照cron表达式, 我们本来应该每秒打印一次hello, 但是实际上每隔3秒才打印一次。</p>
<p>因为定时任务会在定任务线程池执行, 改线程池默认只支持一个线程运行</p>
<p><strong>解决方式</strong></p>
<p>1.可以让业务以异步方式执行，自己提交到线程池，CompletableFuture</p>
<ol start="2" type="1">
<li>SpringBoot支持定时任务线程池，设置TaskSchedulingProperties</li>
<li>让定时任务异步执行, 异步任务</li>
</ol>
<p><strong>异步任务</strong></p>
<ol type="1">
<li><p>首先在类上添加<code>@EnableAsync</code>注解, 开启异步功能</p></li>
<li><p>在定时任务的方法上加上<code>@Async</code>注解, 表明改方法需要异步执行</p></li>
<li><p>设置异步任务线程池的参数</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.task.execution.pool.core-size</span>=<span class="hljs-string">20</span><br><span class="hljs-attr">spring.task.execution.pool.queue-capacity</span>=<span class="hljs-string">50</span><br></code></pre></td></tr></table></figure></li>
</ol>
<h4 id="定时上架秒杀商品">定时上架秒杀商品</h4>
<p><strong>需求</strong></p>
<p>每天凌晨3点, 上架最近3天所需秒杀的商品</p>
<p>当天00:00:00 - 23:59:59; 明天00:00:00 - 23:59:59; 后天00:00:00 - 23:59:59</p>
<p>可以用定时任务来实现,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scheduled(cron = &quot;0 0 3 * * ?&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">uploadSeckillSkuLatest3Days</span><span class="hljs-params">()</span> &#123;<br>    log.info(<span class="hljs-string">&quot;上架秒杀的商品信息.....&quot;</span>);<br>    seckillService.uploadSeckillSkuLatest3Days();<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>设计分析</strong></p>
<p>一般来说, 秒杀活动都是有场次的, 一个场次里面可能有很多商品参与秒杀, 所以上架市, 至少需要存储两个信息, 一个是秒杀场次, 一个是秒杀商品</p>
<p>所以首先需要到优惠服务查到最近3天的秒杀活动, 再根据秒杀活动id查出在秒杀活动中的商品</p>
<p><strong>计算最近<span class="math inline">\(3\)</span>天时间</strong></p>
<p>时间由两部分组成, Date+time, 需要计算出当前日期day 00:00:00, 3天后day+2 23:59:59, 在这个时间范围内的秒杀活动都是需要上架的, 即<span class="math inline">\(min &lt;start\_time &lt; max\)</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> LocalDateTime <span class="hljs-title function_">getStartDateTime</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">LocalDate</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> LocalDate.now();<br>    <span class="hljs-type">LocalTime</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> LocalTime.MIN;<br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> LocalDateTime.of(date, min);<br>    start.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>    <span class="hljs-keyword">return</span> start;<br>&#125;<br><br><span class="hljs-keyword">private</span> LocalDateTime <span class="hljs-title function_">getEndDateTime</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">LocalDate</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> LocalDate.now().plusDays(<span class="hljs-number">2</span>);<br>    <span class="hljs-type">LocalTime</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> LocalTime.MAX;<br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> LocalDateTime.of(date, max);<br>    end.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>    <span class="hljs-keyword">return</span> end;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>查出秒杀活动后再查出关联的商品, 然后返回即可</p>
<p><strong>因为秒杀相关的信息, 一般访问量都比较大, 需要更高的QPS, 且上线后一般不会更改, 直到秒杀活动过期, 所以呢, 将秒杀有关的信息都存在redis中</strong></p>
<p>使用秒杀活动的开始时间 + "_" + 结束时间作为秒杀活动的key, 这样根据key就能很容易地查出, 当前秒杀活动是否进行; value则存储一个list, list的元素是活动id + "_" + 秒杀商品id</p>
<p>使用活动id + "_" + 秒杀商品id作为秒杀商品的key, 首先根据商品id到商品服务中查出商品的基本信息, 主要需要商品的图片和原有价格, 同时value还需要秒杀活动的开始和结束时间, 秒杀价格, 秒杀数量, 每人限购数量等</p>
<p>同时还需要存储秒杀商品的数量, 这里使用redisson的分布式信号量<code>RSemaphore</code>来存储, 用户在进行秒杀时, 需要拿到秒杀商品对应的信号量才能进行秒杀</p>
<p>同时呢, 这些信息存储在redis中, 为了不让内存浪费, 都需要设置过期时间</p>
<p><strong>商品的分布式信号量</strong></p>
<blockquote>
<p>信号量保存了当前秒杀商品的库存信息</p>
</blockquote>
<p>我们的库存秒杀不应该是实时去数据库扣库存, 因为几百万请求进来的时候, 如果都去扣, 那会直接把数据库压垮。</p>
<p>所以现在秒杀最大的问题就是, 如何应对这些高并发的流量？</p>
<p>首先, 这么大的流量进到服务器的话, 肯定大部分的流量都是无效的, 比如秒杀商品的数量是一百, 有一百万流量进来, 实际上有效的流量只有一百</p>
<p>所以我们可以提前在 redis 里边设置一个信号量, 这个信号量可以认为是一个自增量, 假设这个信号量叫 <code>count</code>, 它专门用来计数, 它的初始值是 100, 每进来一个请求, 我们就让这个值减一, 如果有用户想要秒杀这个商品, 我们先去 <code>redis</code> 里边获取一个信号量, 也就是给这一百的库存减一, 然后这个值就变成九十九, 如果能减成功了, 那就把这个请求放行, 然后再做后边的处理数据库。如果不能减, 就不用进行后续的操作了, 我们只会阻塞很短的时间, 就会释放这个请求, 我们只有每一个请求都能很快的释放, 能很快的做完, 我们才能拥有处理大并发的能力。</p>
<p><strong>上架商品的幂等性保证</strong></p>
<p>因为定时任务, 可能在很多台机器上执行, 多台机器保证高可用性, 不过这样如果不做任何处理, 可能造成重复上架的问题, 不过redis的set操作本身就是幂等性的, 但是为了防止无效的操作, 可以上架时用redisson的分布式锁, 拿到锁才能上架, 且上架商品时, 需要判断key不存在才继续操作</p>
<h4 id="首页查询秒杀商品">首页查询秒杀商品</h4>
<p>以秒杀活动的key前缀, 查出所有秒杀活动的key, 遍历这些key, 因为key是start_time + "_" + end_time, 所以可以根据key判断秒杀活动是否正在进行, 且value是活动id + "_" + skuId列表, 可以根据value构造出秒杀商品的key, 再从redis中查出商品</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;SecKillSkuRedisTo&gt; <span class="hljs-title function_">getCurrentSeckillSkus</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1. 确定当前时间的秒杀场次</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime();<br>    Set&lt;String&gt; keys = stringRedisTemplate.keys(SeckillConstant.SESSIONS_CACHE_PREFIX + <span class="hljs-string">&quot;*&quot;</span>);<br>    <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>        key = key.replace(SeckillConstant.SESSIONS_CACHE_PREFIX, <span class="hljs-string">&quot;&quot;</span>);<br>        String[] ss = key.split(<span class="hljs-string">&quot;_&quot;</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> Long.parseLong(ss[<span class="hljs-number">0</span>]);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> Long.parseLong(ss[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span> (time &gt;= start &amp;&amp; time &lt;= end) &#123;<br>            <span class="hljs-comment">// 2. 获取秒杀场次所有的商品信息</span><br>            List&lt;String&gt; ids = stringRedisTemplate.opsForList().range(SeckillConstant.SESSIONS_CACHE_PREFIX + key, -<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>            <span class="hljs-comment">// value是sessionId + &quot;_&quot; + skuId</span><br>            <span class="hljs-keyword">if</span> (ids != <span class="hljs-literal">null</span>) &#123;<br>                List&lt;String&gt; redisKey = ids.stream().map(id -&gt; &#123;<br>                    <span class="hljs-keyword">return</span> SeckillConstant.SKUKILL_CACHE_PREFIX + id;<br>                &#125;).collect(Collectors.toList());<br>                List&lt;String&gt; skusStrings = stringRedisTemplate.opsForValue().multiGet(redisKey);<br><br>                <span class="hljs-keyword">if</span> (skusStrings != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> skusStrings.stream().map(skuString -&gt; &#123;<br>                        <span class="hljs-keyword">return</span> JSON.parseObject(skuString, SecKillSkuRedisTo.class);<br>                    &#125;).collect(Collectors.toList());<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="商品详情查询秒杀信息">商品详情查询秒杀信息</h4>
<p>展示商品详情, 需要查出商品最近的秒杀信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> SecKillSkuRedisTo <span class="hljs-title function_">getSkuSeckillInfo</span><span class="hljs-params">(Long skuId)</span> &#123;<br>    <span class="hljs-comment">// 找到所有需要参与秒杀的商品的key信息</span><br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> SeckillConstant.SKUKILL_CACHE_PREFIX + <span class="hljs-string">&quot;*&quot;</span>;<br>    Set&lt;String&gt; keys = stringRedisTemplate.keys(pattern);<br>    <span class="hljs-keyword">if</span> (keys != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regx</span> <span class="hljs-operator">=</span> SeckillConstant.SKUKILL_CACHE_PREFIX + <span class="hljs-string">&quot;\\d_&quot;</span> + skuId + <span class="hljs-string">&quot;$&quot;</span>;<br>        <span class="hljs-comment">// 获取最近的一场秒杀活动</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">minTime</span> <span class="hljs-operator">=</span> Long.MAX_VALUE;<br>        <span class="hljs-type">SecKillSkuRedisTo</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 因为存在redis中的秒杀都是未开始或者正在进行中的</span><br>        <span class="hljs-comment">// 所以遇到进行中的则直接返回</span><br>        <span class="hljs-comment">// 否则要选未开始的, 距离现在最近的秒杀活动</span><br>        <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>            <span class="hljs-keyword">if</span> (Pattern.matches(regx, key)) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>                <span class="hljs-type">SecKillSkuRedisTo</span> <span class="hljs-variable">redisTo</span> <span class="hljs-operator">=</span> JSON.parseObject(jsonString, SecKillSkuRedisTo.class);<br>                <span class="hljs-type">Long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime();<br>                <span class="hljs-keyword">if</span> (time &gt;= redisTo.getStartTime() &amp;&amp; time &lt;= redisTo.getEndTime()) &#123;<br>                    <span class="hljs-keyword">return</span> redisTo;<br>                &#125;<br>          <br>                <span class="hljs-keyword">if</span> (minTime &gt; redisTo.getStartTime() - time) &#123;<br>                    minTime = redisTo.getStartTime() - time;<br>                    res = redisTo;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>首先拿出所有秒杀商品的key, 然后因为秒杀商品的key是活动id+"_"+skuId, 所以可以使用正则表达式或者endwith判断, 当前key是否是skuId的key</p>
<h4 id="秒杀系统设计">秒杀系统设计</h4>
<h5 id="需要注意的问题">需要注意的问题</h5>
<h6 id="服务单一职责-独立部署">1. 服务单一职责 + 独立部署</h6>
<p><img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220703214338.png" alt="shadow" style="zoom:50%;" /></p>
<h6 id="秒杀链接加密">2. 秒杀链接加密</h6>
<p><img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220703214501.png" alt="shadow" style="zoom:50%;" /></p>
<p>可以对链接进行MD5混淆, 也可以使用随机码机制, 就是在真正开始秒杀的时候, 用户才会得知随机码, 其它时间都不会知道</p>
<p>这里我采取的是, 判断的方式, 即有秒杀请求进来了, 判断其是否是正在秒杀中的商品</p>
<h6 id="库存预热快速扣减">3. 库存预热+快速扣减</h6>
<p><img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220703214814.png" alt="shadow" style="zoom:50%;" /></p>
<p>当然, 也有可能出现redis扛不住的情况, <strong>一台redis的并发可能就在两万到三万左右</strong>, 如果想要缓存抗住百万并发, 还是需要搭建redis集群的</p>
<h6 id="动静分离">4. 动静分离</h6>
<p><img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220703215122.png" alt="shadow" style="zoom:50%;" /></p>
<p>使用nginx, 或者CDN</p>
<p>我们将现有的静态资源, 全部分享给这个 CDN 网络, 比如使用阿里云, 我们让阿里云来保存这个静态资源, 阿里云会将这些静态资源放进各个服务节点, 比如有一个上海节点, 还有北京节点, 还有杭州节点。访问静态资源时，阿里云会就近选择一个最快的节点, 给我们返回这个静态资源。</p>
<p>做好动静分离之后, 放到后台的请求就很少了, 以首页为例, 5、60个请求, 只有1个是动态请求, 静态请求全过滤掉了, 这样服务器的压力就小很多了</p>
<h6 id="恶意请求拦截">5. 恶意请求拦截</h6>
<p><img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220703215738.png" alt="shadow" style="zoom:50%;" /></p>
<p>对于高并发系统来说，恶意请求也有很多种。</p>
<p>第一种情况，恶意脚本。</p>
<p>它会向服务器每秒发1000次秒杀请求，或者每秒发1000次请求商品数据的请求，但我们会发现，其实按照正用户正常的流量访问，刷的再快每秒可能也就五六次，所以每秒1000次请求肯定是有别的脚本在模拟这个访问。我们应该把这些恶意请求拦截过去，</p>
<p>还有一些伪造的请求。</p>
<p>比如我们有很多请求需要带一些令牌，它不带令牌，直接发请求，我们也应该直接拦截下来</p>
<p><strong>对恶意请求的拦截应该在网关做, 做到只要经过网关拦截之后, 放给后台集群的都是正常的请求</strong></p>
<h6 id="流量削峰">6. 流量削峰</h6>
<p><img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220703220029.png" alt="shadow" style="zoom:50%;" /></p>
<p>在秒杀活动中, 假设现在有100万个人同时进行秒杀, 他们同时点了立即抢购, 那么瞬间流量就会达到一百万, 需要采取一些方案将流量分散到几秒内</p>
<p><strong>方案一</strong></p>
<p>验证码方式, 即用户点击抢购前需要输入验证码, 才能进行抢购</p>
<p>这样做有两个好处: 1. 防止恶意攻击; 2. 用户输入验证码的时间是不一样的, 这样可以将流量在时间上分散</p>
<p><strong>方案二</strong></p>
<p>用户点击秒杀后, 如果秒杀成功, 弹出一个确认页, 3秒后自动跳转, 用户也可以选择手动跳转, 不过因为用户的手动操作快慢不同, 这样也能将流量分散开</p>
<h6 id="限流熔断降级">7. 限流&amp;熔断&amp;降级</h6>
<p><img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220703232307.png" alt="shadow" style="zoom:50%;" /></p>
<p>根据机器的峰值处理能力, 在网关处使用令牌桶或者漏桶算法进行限流</p>
<h6 id="队列削峰">8. 队列削峰</h6>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220703232710.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>假设有几百万件商品参与请求, 每件商品有一百个库存, 这样会有1亿的流量, 很明显服务器一开始是无法处理过来的, 所以可以使用队列。将拿到信号量的请求, 封装成消息, 发送到mq, 由消费者集群慢慢处理。拿到信号量的用户, 到订单页时, 首先会判断是否处理完成, 如果处理未完成则返回排队中, 让用户等待即可</p>
<h4 id="秒杀流程以及实现">秒杀流程以及实现</h4>
<h5 id="方案一-1">方案一</h5>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220703235547.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>这套方案采用的是跟京东、小米一样的流程, 把秒杀当成一个优惠显示的信息, 用户秒杀还是走正常的下单流程, 添加购物车、创建订单、支付</p>
<p><strong>优点</strong></p>
<p>把秒杀当成优惠信息, 加加入购物车, 然后再去生成订单结算, 能加流量分散开</p>
<p>秒杀系统和订单系统能做到业务统一, 相当于秒杀系统只是加入购物车有限制而已, 其它流程和订单系统都是一样的</p>
<p><strong>缺点</strong></p>
<p>分散开的流量会级联的映射到其他系统里边，本来秒杀请求可能只是秒杀系统扛不住，但是大量请求一进来，又在商品详情页展示，然后还要在购物车页面要确认，在订单页要确认，如果我们此时在极限情况下，用户都来访问的话，可能每一个页面都扛不住，除非流量非常分散，才可以扛得住非常大的并发。</p>
<h5 id="方案二-1">方案二</h5>
<figure>
<img src="https://raw.githubusercontent.com/liaozhifeng/pigoImages/master/20220704001430.png" alt="shadow" /><figcaption aria-hidden="true">shadow</figcaption>
</figure>
<p>用户点击立即抢购后, 会进行一系列的判断, 包括时间合法性, 购物数量合法性, 用户是否秒杀过了, 信号量是否获取成功, 然后再快速生成一个订单, 包括订单号, 秒杀id, 数量, 价格, 用户id等</p>
<p>然后将订单号返回给前端, 将快速订单发送给mq, 由订单服务收到这个快速订单后, 再去生成完整订单, 存到数据库里</p>
<p>订单号返回前端后, 会跳转到订单确认页, 根据订单号查询订单, 用户id查询地址信息, 用户在订单确认页选择地址信息后, 提交订单, 再继续修改订单信息, 最终生成完整订单</p>
<p><strong>优点</strong></p>
<p>从请求一进来，到 Controller，再到 Service，有一堆判断处理，一直到后面的给前端用户通知，这期间没有操作过一次数据库，没做过任何一次远程调用，这就是一个非常快的流程，我们只需要校验好所有的合法性就行。因为所有的数据我们都在缓存里边放着。一切正常以后，我们给秒杀订单快速的创建一个单号。然后告诉前端个单号已经准备好了，后台的订单服务，在慢慢的消费。</p>
<p><strong>缺点</strong></p>
<p>业务不统一, 且如果出现这种场景, 创建快速订单成功, 告诉用户秒杀成功, 之后订单服务挂了, 导致没有生成秒杀订单, 这样用户会一直处于排队中的状态</p>
<h5 id="方案选择和改进">方案选择和改进</h5>
<p>选择第二种方案, 且和订单系统一样引入了超时取消订单, 并补回信号量的操作, 生成快速订单时给死信队列发送一个消息, 30min后, 死信队列发送给订单关闭队列, 再执行操作</p>
<h2 id="集群搭建">集群搭建</h2>
<p>k8s, redis集群, mysql集群等, todo.....</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
</search>
